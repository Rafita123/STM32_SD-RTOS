
STM32_SD_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b83c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800b950  0800b950  0001b950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0e8  0800c0e8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0e8  0800c0e8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0e8  0800c0e8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0e8  0800c0e8  0001c0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0ec  0800c0ec  0001c0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c0f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  200001f8  0800c2e8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c68  0800c2e8  00021c68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b53d  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e98  00000000  00000000  0003b75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001708  00000000  00000000  0003f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  00040d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186eb  00000000  00000000  00042250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013db1  00000000  00000000  0005a93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dda3  00000000  00000000  0006e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec48f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  000ec50c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b934 	.word	0x0800b934

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800b934 	.word	0x0800b934

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fb5d 	bl	8000164 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <Send_Uart+0x28>)
 8000ab6:	f003 f9ac 	bl	8003e12 <HAL_UART_Transmit>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20001688 	.word	0x20001688

08000ac8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <Mount_SD+0x38>)
 8000ad6:	f005 fb8f 	bl	80061f8 <f_mount>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <Mount_SD+0x3c>)
 8000ae0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <Mount_SD+0x3c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <Mount_SD+0x2a>
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <Mount_SD+0x40>)
 8000aec:	f7ff ffd6 	bl	8000a9c <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000af0:	e002      	b.n	8000af8 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <Mount_SD+0x44>)
 8000af4:	f7ff ffd2 	bl	8000a9c <Send_Uart>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000120c 	.word	0x2000120c
 8000b04:	20001450 	.word	0x20001450
 8000b08:	0800b950 	.word	0x0800b950
 8000b0c:	0800b974 	.word	0x0800b974

08000b10 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f005 fb6b 	bl	80061f8 <f_mount>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <Unmount_SD+0x38>)
 8000b28:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <Unmount_SD+0x38>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <Unmount_SD+0x2a>
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <Unmount_SD+0x3c>)
 8000b34:	f7ff ffb2 	bl	8000a9c <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000b38:	e002      	b.n	8000b40 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <Unmount_SD+0x40>)
 8000b3c:	f7ff ffae 	bl	8000a9c <Send_Uart>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20001450 	.word	0x20001450
 8000b4c:	0800b998 	.word	0x0800b998
 8000b50:	0800b9c0 	.word	0x0800b9c0

08000b54 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8000b5a:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 8000b5c:	2014      	movs	r0, #20
 8000b5e:	f008 fca9 	bl	80094b4 <pvPortMalloc>
 8000b62:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    sprintf (path, "%s","/");
 8000b66:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000b6a:	492a      	ldr	r1, [pc, #168]	; (8000c14 <Format_SD+0xc0>)
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	8013      	strh	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f006 f8a9 	bl	8006cd2 <f_opendir>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <Format_SD+0xc4>)
 8000b86:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <Format_SD+0xc4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d136      	bne.n	8000bfe <Format_SD+0xaa>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4922      	ldr	r1, [pc, #136]	; (8000c1c <Format_SD+0xc8>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f006 f951 	bl	8006e3c <f_readdir>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <Format_SD+0xc4>)
 8000ba0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <Format_SD+0xc4>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d125      	bne.n	8000bf6 <Format_SD+0xa2>
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <Format_SD+0xc8>)
 8000bac:	7a5b      	ldrb	r3, [r3, #9]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d021      	beq.n	8000bf6 <Format_SD+0xa2>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <Format_SD+0xc8>)
 8000bb4:	7a1b      	ldrb	r3, [r3, #8]
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d011      	beq.n	8000be2 <Format_SD+0x8e>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000bbe:	4918      	ldr	r1, [pc, #96]	; (8000c20 <Format_SD+0xcc>)
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <Format_SD+0xd0>)
 8000bc2:	f7ff fac5 	bl	8000150 <strcmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <Format_SD+0x9e>
            	fresult = f_unlink(fno.fname);
 8000bcc:	4814      	ldr	r0, [pc, #80]	; (8000c20 <Format_SD+0xcc>)
 8000bce:	f006 f9d6 	bl	8006f7e <f_unlink>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <Format_SD+0xc4>)
 8000bd8:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <Format_SD+0xc4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	e7d6      	b.n	8000b90 <Format_SD+0x3c>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <Format_SD+0xcc>)
 8000be4:	f006 f9cb 	bl	8006f7e <f_unlink>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <Format_SD+0xc4>)
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e7ce      	b.n	8000b90 <Format_SD+0x3c>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000bf2:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000bf4:	e7cc      	b.n	8000b90 <Format_SD+0x3c>
            }
        }
        f_closedir(&dir);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 f8f2 	bl	8006de2 <f_closedir>
    }
    vPortFree(path);
 8000bfe:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8000c02:	f008 fd19 	bl	8009638 <vPortFree>
    return fresult;
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <Format_SD+0xc4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	0800ba10 	.word	0x0800ba10
 8000c18:	20001450 	.word	0x20001450
 8000c1c:	200011f4 	.word	0x200011f4
 8000c20:	200011fd 	.word	0x200011fd
 8000c24:	0800b9e4 	.word	0x0800b9e4

08000c28 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000c30:	4940      	ldr	r1, [pc, #256]	; (8000d34 <Create_File+0x10c>)
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f006 f950 	bl	8006ed8 <f_stat>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <Create_File+0x110>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <Create_File+0x110>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f008 fc33 	bl	80094b4 <pvPortMalloc>
 8000c4e:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	493a      	ldr	r1, [pc, #232]	; (8000d3c <Create_File+0x114>)
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f009 fa8d 	bl	800a174 <siprintf>
		Send_Uart(buf);
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff ff1e 	bl	8000a9c <Send_Uart>
		vPortFree(buf);
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f008 fce9 	bl	8009638 <vPortFree>
	    return fresult;
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <Create_File+0x110>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	e05f      	b.n	8000d2c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000c6c:	220b      	movs	r2, #11
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4833      	ldr	r0, [pc, #204]	; (8000d40 <Create_File+0x118>)
 8000c72:	f005 fb29 	bl	80062c8 <f_open>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <Create_File+0x110>)
 8000c7c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <Create_File+0x110>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d014      	beq.n	8000cb0 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f008 fc14 	bl	80094b4 <pvPortMalloc>
 8000c8c:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <Create_File+0x110>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	492b      	ldr	r1, [pc, #172]	; (8000d44 <Create_File+0x11c>)
 8000c98:	6938      	ldr	r0, [r7, #16]
 8000c9a:	f009 fa6b 	bl	800a174 <siprintf>
			Send_Uart(buf);
 8000c9e:	6938      	ldr	r0, [r7, #16]
 8000ca0:	f7ff fefc 	bl	8000a9c <Send_Uart>
			vPortFree(buf);
 8000ca4:	6938      	ldr	r0, [r7, #16]
 8000ca6:	f008 fcc7 	bl	8009638 <vPortFree>
		    return fresult;
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <Create_File+0x110>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	e03d      	b.n	8000d2c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f008 fbff 	bl	80094b4 <pvPortMalloc>
 8000cb6:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4923      	ldr	r1, [pc, #140]	; (8000d48 <Create_File+0x120>)
 8000cbc:	69f8      	ldr	r0, [r7, #28]
 8000cbe:	f009 fa59 	bl	800a174 <siprintf>
			Send_Uart(buf);
 8000cc2:	69f8      	ldr	r0, [r7, #28]
 8000cc4:	f7ff feea 	bl	8000a9c <Send_Uart>
			vPortFree(buf);
 8000cc8:	69f8      	ldr	r0, [r7, #28]
 8000cca:	f008 fcb5 	bl	8009638 <vPortFree>
		}

		fresult = f_close(&fil);
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <Create_File+0x118>)
 8000cd0:	f005 ffcf 	bl	8006c72 <f_close>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <Create_File+0x110>)
 8000cda:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <Create_File+0x110>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d012      	beq.n	8000d0a <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000ce4:	2064      	movs	r0, #100	; 0x64
 8000ce6:	f008 fbe5 	bl	80094b4 <pvPortMalloc>
 8000cea:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <Create_File+0x110>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4915      	ldr	r1, [pc, #84]	; (8000d4c <Create_File+0x124>)
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f009 fa3c 	bl	800a174 <siprintf>
			Send_Uart(buf);
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f7ff fecd 	bl	8000a9c <Send_Uart>
			vPortFree(buf);
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f008 fc98 	bl	8009638 <vPortFree>
 8000d08:	e00e      	b.n	8000d28 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000d0a:	2064      	movs	r0, #100	; 0x64
 8000d0c:	f008 fbd2 	bl	80094b4 <pvPortMalloc>
 8000d10:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <Create_File+0x128>)
 8000d16:	69b8      	ldr	r0, [r7, #24]
 8000d18:	f009 fa2c 	bl	800a174 <siprintf>
			Send_Uart(buf);
 8000d1c:	69b8      	ldr	r0, [r7, #24]
 8000d1e:	f7ff febd 	bl	8000a9c <Send_Uart>
			vPortFree(buf);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f008 fc88 	bl	8009638 <vPortFree>
		}
	}
    return fresult;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <Create_File+0x110>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200011f4 	.word	0x200011f4
 8000d38:	20001450 	.word	0x20001450
 8000d3c:	0800bb8c 	.word	0x0800bb8c
 8000d40:	20001458 	.word	0x20001458
 8000d44:	0800bbc4 	.word	0x0800bbc4
 8000d48:	0800bbec 	.word	0x0800bbec
 8000d4c:	0800bc2c 	.word	0x0800bc2c
 8000d50:	0800bb6c 	.word	0x0800bb6c

08000d54 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000d5e:	4953      	ldr	r1, [pc, #332]	; (8000eac <Update_File+0x158>)
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f006 f8b9 	bl	8006ed8 <f_stat>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <Update_File+0x15c>)
 8000d6c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000d6e:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Update_File+0x15c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d011      	beq.n	8000d9a <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f008 fb9c 	bl	80094b4 <pvPortMalloc>
 8000d7c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	494c      	ldr	r1, [pc, #304]	; (8000eb4 <Update_File+0x160>)
 8000d82:	68b8      	ldr	r0, [r7, #8]
 8000d84:	f009 f9f6 	bl	800a174 <siprintf>
		Send_Uart (buf);
 8000d88:	68b8      	ldr	r0, [r7, #8]
 8000d8a:	f7ff fe87 	bl	8000a9c <Send_Uart>
		vPortFree(buf);
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f008 fc52 	bl	8009638 <vPortFree>
	    return fresult;
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <Update_File+0x15c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	e083      	b.n	8000ea2 <Update_File+0x14e>
	}

	else
	{
		 /* Open file with write access */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8000d9a:	2232      	movs	r2, #50	; 0x32
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4846      	ldr	r0, [pc, #280]	; (8000eb8 <Update_File+0x164>)
 8000da0:	f005 fa92 	bl	80062c8 <f_open>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <Update_File+0x15c>)
 8000daa:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <Update_File+0x15c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d014      	beq.n	8000dde <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000db4:	2064      	movs	r0, #100	; 0x64
 8000db6:	f008 fb7d 	bl	80094b4 <pvPortMalloc>
 8000dba:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <Update_File+0x15c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	493d      	ldr	r1, [pc, #244]	; (8000ebc <Update_File+0x168>)
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f009 f9d4 	bl	800a174 <siprintf>
	    	Send_Uart(buf);
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f7ff fe65 	bl	8000a9c <Send_Uart>
	        vPortFree(buf);
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f008 fc30 	bl	8009638 <vPortFree>
	        return fresult;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <Update_File+0x15c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	e061      	b.n	8000ea2 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000dde:	6838      	ldr	r0, [r7, #0]
 8000de0:	f7ff f9c0 	bl	8000164 <strlen>
 8000de4:	4602      	mov	r2, r0
 8000de6:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <Update_File+0x16c>)
 8000de8:	6839      	ldr	r1, [r7, #0]
 8000dea:	4833      	ldr	r0, [pc, #204]	; (8000eb8 <Update_File+0x164>)
 8000dec:	f005 fc81 	bl	80066f2 <f_write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Update_File+0x15c>)
 8000df6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <Update_File+0x15c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d012      	beq.n	8000e26 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000e00:	2064      	movs	r0, #100	; 0x64
 8000e02:	f008 fb57 	bl	80094b4 <pvPortMalloc>
 8000e06:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <Update_File+0x15c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <Update_File+0x170>)
 8000e12:	69b8      	ldr	r0, [r7, #24]
 8000e14:	f009 f9ae 	bl	800a174 <siprintf>
	    	Send_Uart(buf);
 8000e18:	69b8      	ldr	r0, [r7, #24]
 8000e1a:	f7ff fe3f 	bl	8000a9c <Send_Uart>
	    	vPortFree(buf);
 8000e1e:	69b8      	ldr	r0, [r7, #24]
 8000e20:	f008 fc0a 	bl	8009638 <vPortFree>
 8000e24:	e00e      	b.n	8000e44 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000e26:	2064      	movs	r0, #100	; 0x64
 8000e28:	f008 fb44 	bl	80094b4 <pvPortMalloc>
 8000e2c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4925      	ldr	r1, [pc, #148]	; (8000ec8 <Update_File+0x174>)
 8000e32:	69f8      	ldr	r0, [r7, #28]
 8000e34:	f009 f99e 	bl	800a174 <siprintf>
	    	Send_Uart(buf);
 8000e38:	69f8      	ldr	r0, [r7, #28]
 8000e3a:	f7ff fe2f 	bl	8000a9c <Send_Uart>
	    	vPortFree(buf);
 8000e3e:	69f8      	ldr	r0, [r7, #28]
 8000e40:	f008 fbfa 	bl	8009638 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000e44:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <Update_File+0x164>)
 8000e46:	f005 ff14 	bl	8006c72 <f_close>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <Update_File+0x15c>)
 8000e50:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <Update_File+0x15c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d012      	beq.n	8000e80 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000e5a:	2064      	movs	r0, #100	; 0x64
 8000e5c:	f008 fb2a 	bl	80094b4 <pvPortMalloc>
 8000e60:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <Update_File+0x15c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4918      	ldr	r1, [pc, #96]	; (8000ecc <Update_File+0x178>)
 8000e6c:	6938      	ldr	r0, [r7, #16]
 8000e6e:	f009 f981 	bl	800a174 <siprintf>
	    	Send_Uart(buf);
 8000e72:	6938      	ldr	r0, [r7, #16]
 8000e74:	f7ff fe12 	bl	8000a9c <Send_Uart>
	    	vPortFree(buf);
 8000e78:	6938      	ldr	r0, [r7, #16]
 8000e7a:	f008 fbdd 	bl	8009638 <vPortFree>
 8000e7e:	e00e      	b.n	8000e9e <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f008 fb17 	bl	80094b4 <pvPortMalloc>
 8000e86:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4911      	ldr	r1, [pc, #68]	; (8000ed0 <Update_File+0x17c>)
 8000e8c:	6978      	ldr	r0, [r7, #20]
 8000e8e:	f009 f971 	bl	800a174 <siprintf>
	    	Send_Uart(buf);
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff fe02 	bl	8000a9c <Send_Uart>
	    	vPortFree(buf);
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f008 fbcd 	bl	8009638 <vPortFree>
	     }
	}
    return fresult;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <Update_File+0x15c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200011f4 	.word	0x200011f4
 8000eb0:	20001450 	.word	0x20001450
 8000eb4:	0800ba14 	.word	0x0800ba14
 8000eb8:	20001458 	.word	0x20001458
 8000ebc:	0800ba34 	.word	0x0800ba34
 8000ec0:	20001448 	.word	0x20001448
 8000ec4:	0800bc50 	.word	0x0800bc50
 8000ec8:	0800bc78 	.word	0x0800bc78
 8000ecc:	0800bb44 	.word	0x0800bb44
 8000ed0:	0800bb6c 	.word	0x0800bb6c

08000ed4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2101      	movs	r1, #1
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <SELECT+0x14>)
 8000ede:	f001 fb61 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <DESELECT+0x14>)
 8000ef6:	f001 fb55 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010c00 	.word	0x40010c00

08000f04 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f0e:	bf00      	nop
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <SPI_TxByte+0x30>)
 8000f12:	f002 fafa 	bl	800350a <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1f9      	bne.n	8000f10 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000f1c:	1df9      	adds	r1, r7, #7
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	2201      	movs	r2, #1
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <SPI_TxByte+0x30>)
 8000f26:	f002 f81a 	bl	8002f5e <HAL_SPI_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20001718 	.word	0x20001718

08000f38 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f3e:	23ff      	movs	r3, #255	; 0xff
 8000f40:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000f46:	bf00      	nop
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <SPI_RxByte+0x38>)
 8000f4a:	f002 fade 	bl	800350a <HAL_SPI_GetState>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d1f9      	bne.n	8000f48 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000f54:	1dba      	adds	r2, r7, #6
 8000f56:	1df9      	adds	r1, r7, #7
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <SPI_RxByte+0x38>)
 8000f62:	f002 f930 	bl	80031c6 <HAL_SPI_TransmitReceive>
  
  return data;
 8000f66:	79bb      	ldrb	r3, [r7, #6]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20001718 	.word	0x20001718

08000f74 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f7c:	f7ff ffdc 	bl	8000f38 <SPI_RxByte>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	701a      	strb	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <SD_ReadyWait+0x34>)
 8000f98:	2232      	movs	r2, #50	; 0x32
 8000f9a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f9c:	f7ff ffcc 	bl	8000f38 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000fa0:	f7ff ffca 	bl	8000f38 <SPI_RxByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2bff      	cmp	r3, #255	; 0xff
 8000fac:	d004      	beq.n	8000fb8 <SD_ReadyWait+0x28>
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SD_ReadyWait+0x34>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f3      	bne.n	8000fa0 <SD_ReadyWait+0x10>
  
  return res;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200017b4 	.word	0x200017b4

08000fc8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000fce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fd2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000fd4:	f7ff ff8a 	bl	8000eec <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e005      	b.n	8000fea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000fde:	20ff      	movs	r0, #255	; 0xff
 8000fe0:	f7ff ff90 	bl	8000f04 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	ddf6      	ble.n	8000fde <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000ff0:	f7ff ff70 	bl	8000ed4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000ff4:	2340      	movs	r3, #64	; 0x40
 8000ff6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001008:	2395      	movs	r3, #149	; 0x95
 800100a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e009      	b.n	8001026 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001012:	1d3a      	adds	r2, r7, #4
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff72 	bl	8000f04 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b05      	cmp	r3, #5
 800102a:	ddf2      	ble.n	8001012 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 800102c:	e002      	b.n	8001034 <SD_PowerOn+0x6c>
  {
    Count--;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3b01      	subs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001034:	f7ff ff80 	bl	8000f38 <SPI_RxByte>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d002      	beq.n	8001044 <SD_PowerOn+0x7c>
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f4      	bne.n	800102e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001044:	f7ff ff52 	bl	8000eec <DESELECT>
  SPI_TxByte(0XFF);
 8001048:	20ff      	movs	r0, #255	; 0xff
 800104a:	f7ff ff5b 	bl	8000f04 <SPI_TxByte>
  
  PowerFlag = 1;
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <SD_PowerOn+0x94>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000215 	.word	0x20000215

08001060 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <SD_PowerOff+0x14>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000215 	.word	0x20000215

08001078 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800107c:	4b02      	ldr	r3, [pc, #8]	; (8001088 <SD_CheckPower+0x10>)
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000215 	.word	0x20000215

0800108c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <SD_RxDataBlock+0x68>)
 8001098:	220a      	movs	r2, #10
 800109a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800109c:	f7ff ff4c 	bl	8000f38 <SPI_RxByte>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2bff      	cmp	r3, #255	; 0xff
 80010a8:	d104      	bne.n	80010b4 <SD_RxDataBlock+0x28>
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SD_RxDataBlock+0x68>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f3      	bne.n	800109c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2bfe      	cmp	r3, #254	; 0xfe
 80010b8:	d001      	beq.n	80010be <SD_RxDataBlock+0x32>
    return FALSE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e016      	b.n	80010ec <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff55 	bl	8000f74 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff4f 	bl	8000f74 <SPI_RxBytePtr>
  } while(btr -= 2);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3b02      	subs	r3, #2
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1ed      	bne.n	80010be <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80010e2:	f7ff ff29 	bl	8000f38 <SPI_RxByte>
  SPI_RxByte();
 80010e6:	f7ff ff27 	bl	8000f38 <SPI_RxByte>
  
  return TRUE;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200017b5 	.word	0x200017b5

080010f8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001108:	f7ff ff42 	bl	8000f90 <SD_ReadyWait>
 800110c:	4603      	mov	r3, r0
 800110e:	2bff      	cmp	r3, #255	; 0xff
 8001110:	d001      	beq.n	8001116 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001112:	2300      	movs	r3, #0
 8001114:	e040      	b.n	8001198 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fef3 	bl	8000f04 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	2bfd      	cmp	r3, #253	; 0xfd
 8001122:	d031      	beq.n	8001188 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fee7 	bl	8000f04 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fee0 	bl	8000f04 <SPI_TxByte>
    } while (--wc);
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	3b01      	subs	r3, #1
 8001148:	73bb      	strb	r3, [r7, #14]
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1eb      	bne.n	8001128 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001150:	f7ff fef2 	bl	8000f38 <SPI_RxByte>
    SPI_RxByte();
 8001154:	f7ff fef0 	bl	8000f38 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001158:	e00b      	b.n	8001172 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800115a:	f7ff feed 	bl	8000f38 <SPI_RxByte>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2b05      	cmp	r3, #5
 800116a:	d006      	beq.n	800117a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800116c:	7b7b      	ldrb	r3, [r7, #13]
 800116e:	3301      	adds	r3, #1
 8001170:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	2b40      	cmp	r3, #64	; 0x40
 8001176:	d9f0      	bls.n	800115a <SD_TxDataBlock+0x62>
 8001178:	e000      	b.n	800117c <SD_TxDataBlock+0x84>
        break;
 800117a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800117c:	bf00      	nop
 800117e:	f7ff fedb 	bl	8000f38 <SPI_RxByte>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0fa      	beq.n	800117e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2b05      	cmp	r3, #5
 8001190:	d101      	bne.n	8001196 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80011ac:	f7ff fef0 	bl	8000f90 <SD_ReadyWait>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	d001      	beq.n	80011ba <SD_SendCmd+0x1a>
    return 0xFF;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	e040      	b.n	800123c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fea1 	bl	8000f04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	0e1b      	lsrs	r3, r3, #24
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe9b 	bl	8000f04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe95 	bl	8000f04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe8f 	bl	8000f04 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe8a 	bl	8000f04 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b40      	cmp	r3, #64	; 0x40
 80011f8:	d101      	bne.n	80011fe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011fa:	2395      	movs	r3, #149	; 0x95
 80011fc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b48      	cmp	r3, #72	; 0x48
 8001202:	d101      	bne.n	8001208 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001204:	2387      	movs	r3, #135	; 0x87
 8001206:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fe7a 	bl	8000f04 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b4c      	cmp	r3, #76	; 0x4c
 8001214:	d101      	bne.n	800121a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001216:	f7ff fe8f 	bl	8000f38 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800121a:	230a      	movs	r3, #10
 800121c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800121e:	f7ff fe8b 	bl	8000f38 <SPI_RxByte>
 8001222:	4603      	mov	r3, r0
 8001224:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001226:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da05      	bge.n	800123a <SD_SendCmd+0x9a>
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	3b01      	subs	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f1      	bne.n	800121e <SD_SendCmd+0x7e>
  
  return res;
 800123a:	7b7b      	ldrb	r3, [r7, #13]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001254:	2301      	movs	r3, #1
 8001256:	e0d5      	b.n	8001404 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001258:	4b6c      	ldr	r3, [pc, #432]	; (800140c <SD_disk_initialize+0x1c8>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <SD_disk_initialize+0x2a>
    return Stat;        
 8001266:	4b69      	ldr	r3, [pc, #420]	; (800140c <SD_disk_initialize+0x1c8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	e0ca      	b.n	8001404 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800126e:	f7ff feab 	bl	8000fc8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001272:	f7ff fe2f 	bl	8000ed4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800127a:	2100      	movs	r1, #0
 800127c:	2040      	movs	r0, #64	; 0x40
 800127e:	f7ff ff8f 	bl	80011a0 <SD_SendCmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	f040 80a5 	bne.w	80013d4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <SD_disk_initialize+0x1cc>)
 800128c:	2264      	movs	r2, #100	; 0x64
 800128e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001290:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001294:	2048      	movs	r0, #72	; 0x48
 8001296:	f7ff ff83 	bl	80011a0 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d158      	bne.n	8001352 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e00c      	b.n	80012c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80012a6:	7bfc      	ldrb	r4, [r7, #15]
 80012a8:	f7ff fe46 	bl	8000f38 <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4423      	add	r3, r4
 80012b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d9ef      	bls.n	80012a6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8083 	bne.w	80013d4 <SD_disk_initialize+0x190>
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	2baa      	cmp	r3, #170	; 0xaa
 80012d2:	d17f      	bne.n	80013d4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012d4:	2100      	movs	r1, #0
 80012d6:	2077      	movs	r0, #119	; 0x77
 80012d8:	f7ff ff62 	bl	80011a0 <SD_SendCmd>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d807      	bhi.n	80012f2 <SD_disk_initialize+0xae>
 80012e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012e6:	2069      	movs	r0, #105	; 0x69
 80012e8:	f7ff ff5a 	bl	80011a0 <SD_SendCmd>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <SD_disk_initialize+0x1cc>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1eb      	bne.n	80012d4 <SD_disk_initialize+0x90>
 80012fc:	e000      	b.n	8001300 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012fe:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <SD_disk_initialize+0x1cc>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d064      	beq.n	80013d4 <SD_disk_initialize+0x190>
 800130a:	2100      	movs	r1, #0
 800130c:	207a      	movs	r0, #122	; 0x7a
 800130e:	f7ff ff47 	bl	80011a0 <SD_SendCmd>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d15d      	bne.n	80013d4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e00c      	b.n	8001338 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800131e:	7bfc      	ldrb	r4, [r7, #15]
 8001320:	f7ff fe0a 	bl	8000f38 <SPI_RxByte>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4423      	add	r3, r4
 800132e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	3301      	adds	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d9ef      	bls.n	800131e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800133e:	7a3b      	ldrb	r3, [r7, #8]
 8001340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SD_disk_initialize+0x108>
 8001348:	2306      	movs	r3, #6
 800134a:	e000      	b.n	800134e <SD_disk_initialize+0x10a>
 800134c:	2302      	movs	r3, #2
 800134e:	73bb      	strb	r3, [r7, #14]
 8001350:	e040      	b.n	80013d4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001352:	2100      	movs	r1, #0
 8001354:	2077      	movs	r0, #119	; 0x77
 8001356:	f7ff ff23 	bl	80011a0 <SD_SendCmd>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d808      	bhi.n	8001372 <SD_disk_initialize+0x12e>
 8001360:	2100      	movs	r1, #0
 8001362:	2069      	movs	r0, #105	; 0x69
 8001364:	f7ff ff1c 	bl	80011a0 <SD_SendCmd>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d801      	bhi.n	8001372 <SD_disk_initialize+0x12e>
 800136e:	2302      	movs	r3, #2
 8001370:	e000      	b.n	8001374 <SD_disk_initialize+0x130>
 8001372:	2301      	movs	r3, #1
 8001374:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d10e      	bne.n	800139a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800137c:	2100      	movs	r1, #0
 800137e:	2077      	movs	r0, #119	; 0x77
 8001380:	f7ff ff0e 	bl	80011a0 <SD_SendCmd>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d80e      	bhi.n	80013a8 <SD_disk_initialize+0x164>
 800138a:	2100      	movs	r1, #0
 800138c:	2069      	movs	r0, #105	; 0x69
 800138e:	f7ff ff07 	bl	80011a0 <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d107      	bne.n	80013a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001398:	e00d      	b.n	80013b6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800139a:	2100      	movs	r1, #0
 800139c:	2041      	movs	r0, #65	; 0x41
 800139e:	f7ff feff 	bl	80011a0 <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <SD_disk_initialize+0x1cc>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e1      	bne.n	8001376 <SD_disk_initialize+0x132>
 80013b2:	e000      	b.n	80013b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80013b4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <SD_disk_initialize+0x1cc>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <SD_disk_initialize+0x18c>
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c4:	2050      	movs	r0, #80	; 0x50
 80013c6:	f7ff feeb 	bl	80011a0 <SD_SendCmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80013d4:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <SD_disk_initialize+0x1d0>)
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80013da:	f7ff fd87 	bl	8000eec <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013de:	f7ff fdab 	bl	8000f38 <SPI_RxByte>
  
  if (type) 
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <SD_disk_initialize+0x1c8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SD_disk_initialize+0x1c8>)
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	e001      	b.n	80013fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013fa:	f7ff fe31 	bl	8001060 <SD_PowerOff>
  }
  
  return Stat;
 80013fe:	4b03      	ldr	r3, [pc, #12]	; (800140c <SD_disk_initialize+0x1c8>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	20000000 	.word	0x20000000
 8001410:	200017b5 	.word	0x200017b5
 8001414:	20000214 	.word	0x20000214

08001418 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001428:	2301      	movs	r3, #1
 800142a:	e002      	b.n	8001432 <SD_disk_status+0x1a>
  
  return Stat;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SD_disk_status+0x24>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000000 	.word	0x20000000

08001440 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <SD_disk_read+0x1c>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <SD_disk_read+0x20>
    return RES_PARERR;
 800145c:	2304      	movs	r3, #4
 800145e:	e051      	b.n	8001504 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <SD_disk_read+0xcc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800146e:	2303      	movs	r3, #3
 8001470:	e048      	b.n	8001504 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <SD_disk_read+0xd0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001484:	f7ff fd26 	bl	8000ed4 <SELECT>
  
  if (count == 1) 
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d111      	bne.n	80014b2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2051      	movs	r0, #81	; 0x51
 8001492:	f7ff fe85 	bl	80011a0 <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d129      	bne.n	80014f0 <SD_disk_read+0xb0>
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fdf3 	bl	800108c <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <SD_disk_read+0xb0>
      count = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	e01e      	b.n	80014f0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2052      	movs	r0, #82	; 0x52
 80014b6:	f7ff fe73 	bl	80011a0 <SD_SendCmd>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d117      	bne.n	80014f0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80014c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f7ff fde1 	bl	800108c <SD_RxDataBlock>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ed      	bne.n	80014c0 <SD_disk_read+0x80>
 80014e4:	e000      	b.n	80014e8 <SD_disk_read+0xa8>
          break;
 80014e6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80014e8:	2100      	movs	r1, #0
 80014ea:	204c      	movs	r0, #76	; 0x4c
 80014ec:	f7ff fe58 	bl	80011a0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80014f0:	f7ff fcfc 	bl	8000eec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014f4:	f7ff fd20 	bl	8000f38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000214 	.word	0x20000214

08001514 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <SD_disk_write+0x1c>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <SD_disk_write+0x20>
    return RES_PARERR;
 8001530:	2304      	movs	r3, #4
 8001532:	e06b      	b.n	800160c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <SD_disk_write+0x100>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001542:	2303      	movs	r3, #3
 8001544:	e062      	b.n	800160c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <SD_disk_write+0x100>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001554:	2302      	movs	r3, #2
 8001556:	e059      	b.n	800160c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <SD_disk_write+0x104>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800156a:	f7ff fcb3 	bl	8000ed4 <SELECT>
  
  if (count == 1) 
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d110      	bne.n	8001596 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	2058      	movs	r0, #88	; 0x58
 8001578:	f7ff fe12 	bl	80011a0 <SD_SendCmd>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13a      	bne.n	80015f8 <SD_disk_write+0xe4>
 8001582:	21fe      	movs	r1, #254	; 0xfe
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f7ff fdb7 	bl	80010f8 <SD_TxDataBlock>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d033      	beq.n	80015f8 <SD_disk_write+0xe4>
      count = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	e030      	b.n	80015f8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <SD_disk_write+0x104>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2077      	movs	r0, #119	; 0x77
 80015a6:	f7ff fdfb 	bl	80011a0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	2057      	movs	r0, #87	; 0x57
 80015ae:	f7ff fdf7 	bl	80011a0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	2059      	movs	r0, #89	; 0x59
 80015b6:	f7ff fdf3 	bl	80011a0 <SD_SendCmd>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d11b      	bne.n	80015f8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80015c0:	21fc      	movs	r1, #252	; 0xfc
 80015c2:	68b8      	ldr	r0, [r7, #8]
 80015c4:	f7ff fd98 	bl	80010f8 <SD_TxDataBlock>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3b01      	subs	r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <SD_disk_write+0xac>
 80015e2:	e000      	b.n	80015e6 <SD_disk_write+0xd2>
          break;
 80015e4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80015e6:	21fd      	movs	r1, #253	; 0xfd
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fd85 	bl	80010f8 <SD_TxDataBlock>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80015f8:	f7ff fc78 	bl	8000eec <DESELECT>
  SPI_RxByte();
 80015fc:	f7ff fc9c 	bl	8000f38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000214 	.word	0x20000214

0800161c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	460b      	mov	r3, r1
 800162a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001636:	2304      	movs	r3, #4
 8001638:	e117      	b.n	800186a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d126      	bne.n	8001694 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00e      	beq.n	800166c <SD_disk_ioctl+0x50>
 800164e:	2b02      	cmp	r3, #2
 8001650:	d012      	beq.n	8001678 <SD_disk_ioctl+0x5c>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d11a      	bne.n	800168c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001656:	f7ff fd0f 	bl	8001078 <SD_CheckPower>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001660:	f7ff fcfe 	bl	8001060 <SD_PowerOff>
      res = RES_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800166a:	e0fc      	b.n	8001866 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800166c:	f7ff fcac 	bl	8000fc8 <SD_PowerOn>
      res = RES_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001676:	e0f6      	b.n	8001866 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	1c5c      	adds	r4, r3, #1
 800167c:	f7ff fcfc 	bl	8001078 <SD_CheckPower>
 8001680:	4603      	mov	r3, r0
 8001682:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800168a:	e0ec      	b.n	8001866 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800168c:	2304      	movs	r3, #4
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001692:	e0e8      	b.n	8001866 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001694:	4b77      	ldr	r3, [pc, #476]	; (8001874 <SD_disk_ioctl+0x258>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e0e1      	b.n	800186a <SD_disk_ioctl+0x24e>
    
    SELECT();
 80016a6:	f7ff fc15 	bl	8000ed4 <SELECT>
    
    switch (ctrl) 
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	2b0d      	cmp	r3, #13
 80016ae:	f200 80cb 	bhi.w	8001848 <SD_disk_ioctl+0x22c>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <SD_disk_ioctl+0x9c>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	080017b3 	.word	0x080017b3
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	080017a3 	.word	0x080017a3
 80016c4:	08001849 	.word	0x08001849
 80016c8:	08001849 	.word	0x08001849
 80016cc:	08001849 	.word	0x08001849
 80016d0:	08001849 	.word	0x08001849
 80016d4:	08001849 	.word	0x08001849
 80016d8:	08001849 	.word	0x08001849
 80016dc:	08001849 	.word	0x08001849
 80016e0:	08001849 	.word	0x08001849
 80016e4:	080017c5 	.word	0x080017c5
 80016e8:	080017e9 	.word	0x080017e9
 80016ec:	0800180d 	.word	0x0800180d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80016f0:	2100      	movs	r1, #0
 80016f2:	2049      	movs	r0, #73	; 0x49
 80016f4:	f7ff fd54 	bl	80011a0 <SD_SendCmd>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80a8 	bne.w	8001850 <SD_disk_ioctl+0x234>
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2110      	movs	r1, #16
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fcc0 	bl	800108c <SD_RxDataBlock>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 809e 	beq.w	8001850 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001714:	7b3b      	ldrb	r3, [r7, #12]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10e      	bne.n	800173c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800171e:	7d7b      	ldrb	r3, [r7, #21]
 8001720:	b29a      	uxth	r2, r3
 8001722:	7d3b      	ldrb	r3, [r7, #20]
 8001724:	b29b      	uxth	r3, r3
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b29b      	uxth	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	3301      	adds	r3, #1
 8001730:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001732:	8bfb      	ldrh	r3, [r7, #30]
 8001734:	029a      	lsls	r2, r3, #10
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e02e      	b.n	800179a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800173c:	7c7b      	ldrb	r3, [r7, #17]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	b2da      	uxtb	r2, r3
 8001744:	7dbb      	ldrb	r3, [r7, #22]
 8001746:	09db      	lsrs	r3, r3, #7
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4413      	add	r3, r2
 800174c:	b2da      	uxtb	r2, r3
 800174e:	7d7b      	ldrb	r3, [r7, #21]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0306 	and.w	r3, r3, #6
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	3302      	adds	r3, #2
 8001760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001764:	7d3b      	ldrb	r3, [r7, #20]
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	b29a      	uxth	r2, r3
 800176c:	7cfb      	ldrb	r3, [r7, #19]
 800176e:	b29b      	uxth	r3, r3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b29a      	uxth	r2, r3
 8001778:	7cbb      	ldrb	r3, [r7, #18]
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	b29b      	uxth	r3, r3
 800177e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	3301      	adds	r3, #1
 800178a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800178c:	8bfa      	ldrh	r2, [r7, #30]
 800178e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001792:	3b09      	subs	r3, #9
 8001794:	409a      	lsls	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80017a0:	e056      	b.n	8001850 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017b0:	e055      	b.n	800185e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80017b2:	f7ff fbed 	bl	8000f90 <SD_ReadyWait>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2bff      	cmp	r3, #255	; 0xff
 80017ba:	d14b      	bne.n	8001854 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017c2:	e047      	b.n	8001854 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017c4:	2100      	movs	r1, #0
 80017c6:	2049      	movs	r0, #73	; 0x49
 80017c8:	f7ff fcea 	bl	80011a0 <SD_SendCmd>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d142      	bne.n	8001858 <SD_disk_ioctl+0x23c>
 80017d2:	2110      	movs	r1, #16
 80017d4:	6a38      	ldr	r0, [r7, #32]
 80017d6:	f7ff fc59 	bl	800108c <SD_RxDataBlock>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03b      	beq.n	8001858 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017e6:	e037      	b.n	8001858 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017e8:	2100      	movs	r1, #0
 80017ea:	204a      	movs	r0, #74	; 0x4a
 80017ec:	f7ff fcd8 	bl	80011a0 <SD_SendCmd>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d132      	bne.n	800185c <SD_disk_ioctl+0x240>
 80017f6:	2110      	movs	r1, #16
 80017f8:	6a38      	ldr	r0, [r7, #32]
 80017fa:	f7ff fc47 	bl	800108c <SD_RxDataBlock>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02b      	beq.n	800185c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800180a:	e027      	b.n	800185c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800180c:	2100      	movs	r1, #0
 800180e:	207a      	movs	r0, #122	; 0x7a
 8001810:	f7ff fcc6 	bl	80011a0 <SD_SendCmd>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001820:	e00b      	b.n	800183a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001822:	6a3c      	ldr	r4, [r7, #32]
 8001824:	1c63      	adds	r3, r4, #1
 8001826:	623b      	str	r3, [r7, #32]
 8001828:	f7ff fb86 	bl	8000f38 <SPI_RxByte>
 800182c:	4603      	mov	r3, r0
 800182e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001834:	3301      	adds	r3, #1
 8001836:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800183a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800183e:	2b03      	cmp	r3, #3
 8001840:	d9ef      	bls.n	8001822 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001848:	2304      	movs	r3, #4
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800184e:	e006      	b.n	800185e <SD_disk_ioctl+0x242>
      break;
 8001850:	bf00      	nop
 8001852:	e004      	b.n	800185e <SD_disk_ioctl+0x242>
      break;
 8001854:	bf00      	nop
 8001856:	e002      	b.n	800185e <SD_disk_ioctl+0x242>
      break;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <SD_disk_ioctl+0x242>
      break;
 800185c:	bf00      	nop
    }
    
    DESELECT();
 800185e:	f7ff fb45 	bl	8000eec <DESELECT>
    SPI_RxByte();
 8001862:	f7ff fb69 	bl	8000f38 <SPI_RxByte>
  }
  
  return res;
 8001866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800186a:	4618      	mov	r0, r3
 800186c:	372c      	adds	r7, #44	; 0x2c
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000

08001878 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <vApplicationGetIdleTaskMemory+0x28>)
 8001888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800188e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000218 	.word	0x20000218
 80018a4:	2000026c 	.word	0x2000026c

080018a8 <SDCARD_Task>:


xSemaphoreHandle DHT_SEM;

void SDCARD_Task (void *argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int indx=1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		char *buffer = pvPortMalloc(50*sizeof(char));
 80018b4:	2032      	movs	r0, #50	; 0x32
 80018b6:	f007 fdfd 	bl	80094b4 <pvPortMalloc>
 80018ba:	60b8      	str	r0, [r7, #8]
		sprintf (buffer, "%d. %lu\n", indx,Delta);
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <SDCARD_Task+0x4c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	490d      	ldr	r1, [pc, #52]	; (80018f8 <SDCARD_Task+0x50>)
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f008 fc55 	bl	800a174 <siprintf>
		Mount_SD("/");
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <SDCARD_Task+0x54>)
 80018cc:	f7ff f8fc 	bl	8000ac8 <Mount_SD>
		Update_File("Velocidad.TXT", buffer);
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <SDCARD_Task+0x58>)
 80018d4:	f7ff fa3e 	bl	8000d54 <Update_File>
		vPortFree(buffer);
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f007 fead 	bl	8009638 <vPortFree>
		Unmount_SD("/");
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <SDCARD_Task+0x54>)
 80018e0:	f7ff f916 	bl	8000b10 <Unmount_SD>

		indx++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]


		vTaskDelay(1000);
 80018ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ee:	f006 fd8f 	bl	8008410 <vTaskDelay>
	{
 80018f2:	e7df      	b.n	80018b4 <SDCARD_Task+0xc>
 80018f4:	20001708 	.word	0x20001708
 80018f8:	0800bd64 	.word	0x0800bd64
 80018fc:	0800bd70 	.word	0x0800bd70
 8001900:	0800bd74 	.word	0x0800bd74

08001904 <ENCONDER_Task>:
	}
}

void ENCONDER_Task (void *argument)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	while(1)
 800190c:	e7fe      	b.n	800190c <ENCONDER_Task+0x8>
	...

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001916:	f000 fbd9 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191a:	f000 f853 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191e:	f000 f945 	bl	8001bac <MX_GPIO_Init>
  MX_SPI1_Init();
 8001922:	f000 f895 	bl	8001a50 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001926:	f000 f8c9 	bl	8001abc <MX_TIM3_Init>
  MX_FATFS_Init();
 800192a:	f002 fc2f 	bl	800418c <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800192e:	f000 f913 	bl	8001b58 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  Mount_SD("/");
 8001932:	481a      	ldr	r0, [pc, #104]	; (800199c <main+0x8c>)
 8001934:	f7ff f8c8 	bl	8000ac8 <Mount_SD>
  Format_SD();
 8001938:	f7ff f90c 	bl	8000b54 <Format_SD>
  Create_File("Velocidad.TXT");
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <main+0x90>)
 800193e:	f7ff f973 	bl	8000c28 <Create_File>
  Unmount_SD("/");
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <main+0x8c>)
 8001944:	f7ff f8e4 	bl	8000b10 <Unmount_SD>

  DHT_SEM = xSemaphoreCreateBinary();
 8001948:	2203      	movs	r2, #3
 800194a:	2100      	movs	r1, #0
 800194c:	2001      	movs	r0, #1
 800194e:	f005 ff03 	bl	8007758 <xQueueGenericCreate>
 8001952:	4602      	mov	r2, r0
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <main+0x94>)
 8001956:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(DHT_SEM);
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <main+0x94>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	f005 ff55 	bl	8007810 <xQueueGenericSend>

  xTaskCreate(SDCARD_Task, "SD", 128, NULL, 3, &SDCARD_Task_Hnadler);
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <main+0x98>)
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2303      	movs	r3, #3
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	490e      	ldr	r1, [pc, #56]	; (80019ac <main+0x9c>)
 8001974:	480e      	ldr	r0, [pc, #56]	; (80019b0 <main+0xa0>)
 8001976:	f006 fc1e 	bl	80081b6 <xTaskCreate>
  xTaskCreate(ENCONDER_Task, "ENCONDER", 128, NULL, 2, &ENCONDER_Task_Hnadler);
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <main+0xa4>)
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	2302      	movs	r3, #2
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2300      	movs	r3, #0
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	490c      	ldr	r1, [pc, #48]	; (80019b8 <main+0xa8>)
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <main+0xac>)
 800198a:	f006 fc14 	bl	80081b6 <xTaskCreate>

  HAL_TIM_Base_Start(&htim3);  // Timer utilizado para obtene pulsos de reloj entre pulso de encoder
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <main+0xb0>)
 8001990:	f001 fe7b 	bl	800368a <HAL_TIM_Base_Start>


  vTaskStartScheduler();
 8001994:	f006 fd70 	bl	8008478 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001998:	e7fe      	b.n	8001998 <main+0x88>
 800199a:	bf00      	nop
 800199c:	0800bd70 	.word	0x0800bd70
 80019a0:	0800bd74 	.word	0x0800bd74
 80019a4:	20001710 	.word	0x20001710
 80019a8:	20001684 	.word	0x20001684
 80019ac:	0800bd84 	.word	0x0800bd84
 80019b0:	080018a9 	.word	0x080018a9
 80019b4:	20001770 	.word	0x20001770
 80019b8:	0800bd88 	.word	0x0800bd88
 80019bc:	08001905 	.word	0x08001905
 80019c0:	200016c8 	.word	0x200016c8

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b090      	sub	sp, #64	; 0x40
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0318 	add.w	r3, r7, #24
 80019ce:	2228      	movs	r2, #40	; 0x28
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f007 ff77 	bl	80098c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80019f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f6:	2301      	movs	r3, #1
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fa:	2302      	movs	r3, #2
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8001a04:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fdf8 	bl	8002604 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001a1a:	f000 f95d 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1e:	230f      	movs	r3, #15
 8001a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2302      	movs	r3, #2
 8001a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2102      	movs	r1, #2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 f863 	bl	8002b04 <HAL_RCC_ClockConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a44:	f000 f948 	bl	8001cd8 <Error_Handler>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3740      	adds	r7, #64	; 0x40
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a84:	2220      	movs	r2, #32
 8001a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001aa2:	f001 f9fb 	bl	8002e9c <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f000 f914 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20001718 	.word	0x20001718
 8001ab8:	40013000 	.word	0x40013000

08001abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <MX_TIM3_Init+0x98>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001ae0:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001aee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b00:	4813      	ldr	r0, [pc, #76]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001b02:	f001 fd97 	bl	8003634 <HAL_TIM_Base_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b0c:	f000 f8e4 	bl	8001cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001b1e:	f001 ff02 	bl	8003926 <HAL_TIM_ConfigClockSource>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b28:	f000 f8d6 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001b3a:	f002 f8c7 	bl	8003ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b44:	f000 f8c8 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200016c8 	.word	0x200016c8
 8001b54:	40000400 	.word	0x40000400

08001b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_USART3_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART3_UART_Init+0x4c>)
 8001b90:	f002 f8f2 	bl	8003d78 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b9a:	f000 f89d 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20001688 	.word	0x20001688
 8001ba8:	40004800 	.word	0x40004800

08001bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a2c      	ldr	r2, [pc, #176]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_GPIO_Init+0xcc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	481b      	ldr	r0, [pc, #108]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c0e:	f000 fcc9 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c12:	2301      	movs	r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	4816      	ldr	r0, [pc, #88]	; (8001c80 <MX_GPIO_Init+0xd4>)
 8001c26:	f000 fb63 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480e      	ldr	r0, [pc, #56]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c42:	f000 fb55 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCONDER_Pin */
  GPIO_InitStruct.Pin = ENCONDER_Pin;
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_GPIO_Init+0xd8>)
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCONDER_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	4808      	ldr	r0, [pc, #32]	; (8001c7c <MX_GPIO_Init+0xd0>)
 8001c5a:	f000 fb49 	bl	80022f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	2017      	movs	r0, #23
 8001c64:	f000 fb19 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c68:	2017      	movs	r0, #23
 8001c6a:	f000 fb32 	bl	80022d2 <HAL_NVIC_EnableIRQ>

}
 8001c6e:	bf00      	nop
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010c00 	.word	0x40010c00
 8001c80:	40010800 	.word	0x40010800
 8001c84:	10110000 	.word	0x10110000

08001c88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_6){
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d104      	bne.n	8001ca2 <HAL_GPIO_EXTI_Callback+0x1a>

  	Delta=__HAL_TIM_GET_COUNTER(&htim3);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_GPIO_EXTI_Callback+0x24>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001ca0:	6013      	str	r3, [r2, #0]
  }

  }
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	200016c8 	.word	0x200016c8
 8001cb0:	20001708 	.word	0x20001708

08001cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
//
//		portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc6:	f000 fa17 	bl	80020f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000800 	.word	0x40000800

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_MspInit+0x68>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_MspInit+0x68>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_MspInit+0x68>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_MspInit+0x68>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_MspInit+0x68>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_MspInit+0x68>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	210f      	movs	r1, #15
 8001d1e:	f06f 0001 	mvn.w	r0, #1
 8001d22:	f000 faba 	bl	800229a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_MspInit+0x6c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_MspInit+0x6c>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000

08001d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d12f      	bne.n	8001dd4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001d7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001da4:	23a0      	movs	r3, #160	; 0xa0
 8001da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_SPI_MspInit+0x90>)
 8001db8:	f000 fa9a 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dbc:	2340      	movs	r3, #64	; 0x40
 8001dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_SPI_MspInit+0x90>)
 8001dd0:	f000 fa8e 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013000 	.word	0x40013000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010800 	.word	0x40010800

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_TIM_Base_MspInit+0x34>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10b      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_TIM_Base_MspInit+0x38>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_TIM_Base_MspInit+0x38>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_TIM_Base_MspInit+0x38>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_UART_MspInit+0x8c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d131      	bne.n	8001ea8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4e:	61d3      	str	r3, [r2, #28]
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <HAL_UART_MspInit+0x94>)
 8001e8a:	f000 fa31 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_UART_MspInit+0x94>)
 8001ea4:	f000 fa24 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40004800 	.word	0x40004800
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010c00 	.word	0x40010c00

08001ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	201e      	movs	r0, #30
 8001ed2:	f000 f9e2 	bl	800229a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ed6:	201e      	movs	r0, #30
 8001ed8:	f000 f9fb 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_InitTick+0xa0>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_InitTick+0xa0>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	61d3      	str	r3, [r2, #28]
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_InitTick+0xa0>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ef4:	f107 0210 	add.w	r2, r7, #16
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 ff7e 	bl	8002e00 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f04:	f000 ff54 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <HAL_InitTick+0xa4>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0c9b      	lsrs	r3, r3, #18
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_InitTick+0xac>)
 8001f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f28:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001f3c:	4809      	ldr	r0, [pc, #36]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f3e:	f001 fb79 	bl	8003634 <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <HAL_InitTick+0xa8>)
 8001f4a:	f001 fbc1 	bl	80036d0 <HAL_TIM_Base_Start_IT>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3730      	adds	r7, #48	; 0x30
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	20001774 	.word	0x20001774
 8001f68:	40000800 	.word	0x40000800

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <HardFault_Handler+0x4>

08001f7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <MemManage_Handler+0x4>

08001f84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <BusFault_Handler+0x4>

08001f8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <UsageFault_Handler+0x4>

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fa0:	2040      	movs	r0, #64	; 0x40
 8001fa2:	f000 fb17 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TIM4_IRQHandler+0x10>)
 8001fb2:	f001 fbb0 	bl	8003716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20001774 	.word	0x20001774

08001fc0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x50>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <_sbrk+0x16>
		heap_end = &end;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <_sbrk+0x50>)
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <_sbrk+0x54>)
 8001fd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <_sbrk+0x50>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <_sbrk+0x50>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	466a      	mov	r2, sp
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d907      	bls.n	8001ffa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fea:	f007 fc37 	bl	800985c <__errno>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	e006      	b.n	8002008 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <_sbrk+0x50>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	4a03      	ldr	r2, [pc, #12]	; (8002010 <_sbrk+0x50>)
 8002004:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000046c 	.word	0x2000046c
 8002014:	20001c68 	.word	0x20001c68

08002018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <SystemInit+0x5c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <SystemInit+0x5c>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <SystemInit+0x5c>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4911      	ldr	r1, [pc, #68]	; (8002074 <SystemInit+0x5c>)
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <SystemInit+0x60>)
 8002030:	4013      	ands	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <SystemInit+0x5c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <SystemInit+0x5c>)
 800203a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <SystemInit+0x5c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SystemInit+0x5c>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <SystemInit+0x5c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <SystemInit+0x5c>)
 8002056:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800205a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SystemInit+0x5c>)
 800205e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002062:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SystemInit+0x64>)
 8002066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800206a:	609a      	str	r2, [r3, #8]
#endif 
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000
 8002078:	f8ff0000 	.word	0xf8ff0000
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002080:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002086:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002088:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800208c:	480a      	ldr	r0, [pc, #40]	; (80020b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002090:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002092:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
  ldr r2, =_sbss
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a6:	f7ff ffb7 	bl	8002018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f007 fbdd 	bl	8009868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ae:	f7ff fc2f 	bl	8001910 <main>
  bx lr
 80020b2:	4770      	bx	lr
  ldr r3, =_sidata
 80020b4:	0800c0f0 	.word	0x0800c0f0
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020bc:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 80020c0:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 80020c4:	20001c68 	.word	0x20001c68

080020c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_2_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x28>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x28>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f8d1 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff feea 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fdfc 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_IncTick+0x20>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	2000000c 	.word	0x2000000c
 8002118:	200017b8 	.word	0x200017b8

0800211c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	200017b8 	.word	0x200017b8

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4906      	ldr	r1, [pc, #24]	; (80021c8 <__NVIC_EnableIRQ+0x34>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff4f 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff64 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ffb2 	bl	8002220 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff81 	bl	80021cc <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff57 	bl	8002194 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	; 0x2c
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e127      	b.n	8002554 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002304:	2201      	movs	r2, #1
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8116 	bne.w	800254e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b12      	cmp	r3, #18
 8002328:	d034      	beq.n	8002394 <HAL_GPIO_Init+0xa4>
 800232a:	2b12      	cmp	r3, #18
 800232c:	d80d      	bhi.n	800234a <HAL_GPIO_Init+0x5a>
 800232e:	2b02      	cmp	r3, #2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x9a>
 8002332:	2b02      	cmp	r3, #2
 8002334:	d804      	bhi.n	8002340 <HAL_GPIO_Init+0x50>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d031      	beq.n	800239e <HAL_GPIO_Init+0xae>
 800233a:	2b01      	cmp	r3, #1
 800233c:	d01c      	beq.n	8002378 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800233e:	e048      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002340:	2b03      	cmp	r3, #3
 8002342:	d043      	beq.n	80023cc <HAL_GPIO_Init+0xdc>
 8002344:	2b11      	cmp	r3, #17
 8002346:	d01b      	beq.n	8002380 <HAL_GPIO_Init+0x90>
          break;
 8002348:	e043      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800234a:	4a89      	ldr	r2, [pc, #548]	; (8002570 <HAL_GPIO_Init+0x280>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d026      	beq.n	800239e <HAL_GPIO_Init+0xae>
 8002350:	4a87      	ldr	r2, [pc, #540]	; (8002570 <HAL_GPIO_Init+0x280>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d806      	bhi.n	8002364 <HAL_GPIO_Init+0x74>
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <HAL_GPIO_Init+0x284>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d020      	beq.n	800239e <HAL_GPIO_Init+0xae>
 800235c:	4a86      	ldr	r2, [pc, #536]	; (8002578 <HAL_GPIO_Init+0x288>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_GPIO_Init+0xae>
          break;
 8002362:	e036      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002364:	4a85      	ldr	r2, [pc, #532]	; (800257c <HAL_GPIO_Init+0x28c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0xae>
 800236a:	4a85      	ldr	r2, [pc, #532]	; (8002580 <HAL_GPIO_Init+0x290>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d016      	beq.n	800239e <HAL_GPIO_Init+0xae>
 8002370:	4a84      	ldr	r2, [pc, #528]	; (8002584 <HAL_GPIO_Init+0x294>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0xae>
          break;
 8002376:	e02c      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e028      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	3304      	adds	r3, #4
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e023      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	3308      	adds	r3, #8
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e01e      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	330c      	adds	r3, #12
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e019      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a6:	2304      	movs	r3, #4
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e012      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b4:	2308      	movs	r3, #8
 80023b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	611a      	str	r2, [r3, #16]
          break;
 80023be:	e008      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2308      	movs	r3, #8
 80023c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	615a      	str	r2, [r3, #20]
          break;
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2bff      	cmp	r3, #255	; 0xff
 80023d6:	d801      	bhi.n	80023dc <HAL_GPIO_Init+0xec>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	e001      	b.n	80023e0 <HAL_GPIO_Init+0xf0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2bff      	cmp	r3, #255	; 0xff
 80023e6:	d802      	bhi.n	80023ee <HAL_GPIO_Init+0xfe>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x104>
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	3b08      	subs	r3, #8
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	210f      	movs	r1, #15
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	401a      	ands	r2, r3
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	431a      	orrs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8096 	beq.w	800254e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002422:	4b59      	ldr	r3, [pc, #356]	; (8002588 <HAL_GPIO_Init+0x298>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_GPIO_Init+0x298>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6193      	str	r3, [r2, #24]
 800242e:	4b56      	ldr	r3, [pc, #344]	; (8002588 <HAL_GPIO_Init+0x298>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800243a:	4a54      	ldr	r2, [pc, #336]	; (800258c <HAL_GPIO_Init+0x29c>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4013      	ands	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x19e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x19a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a49      	ldr	r2, [pc, #292]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x196>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a48      	ldr	r2, [pc, #288]	; (800259c <HAL_GPIO_Init+0x2ac>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x192>
 800247e:	2303      	movs	r3, #3
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x1a0>
 8002482:	2304      	movs	r3, #4
 8002484:	e004      	b.n	8002490 <HAL_GPIO_Init+0x1a0>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x1a0>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x1a0>
 800248e:	2300      	movs	r3, #0
 8002490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	4093      	lsls	r3, r2
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024a0:	493a      	ldr	r1, [pc, #232]	; (800258c <HAL_GPIO_Init+0x29c>)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4938      	ldr	r1, [pc, #224]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
 80024c6:	e006      	b.n	80024d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	4933      	ldr	r1, [pc, #204]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	492e      	ldr	r1, [pc, #184]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e006      	b.n	80024fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	4929      	ldr	r1, [pc, #164]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800250a:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	4924      	ldr	r1, [pc, #144]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
 8002516:	e006      	b.n	8002526 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	43db      	mvns	r3, r3
 8002520:	491f      	ldr	r1, [pc, #124]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002522:	4013      	ands	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	491a      	ldr	r1, [pc, #104]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	60cb      	str	r3, [r1, #12]
 800253e:	e006      	b.n	800254e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	43db      	mvns	r3, r3
 8002548:	4915      	ldr	r1, [pc, #84]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800254a:	4013      	ands	r3, r2
 800254c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	3301      	adds	r3, #1
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	f47f aed0 	bne.w	8002304 <HAL_GPIO_Init+0x14>
  }
}
 8002564:	bf00      	nop
 8002566:	372c      	adds	r7, #44	; 0x2c
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	10210000 	.word	0x10210000
 8002574:	10110000 	.word	0x10110000
 8002578:	10120000 	.word	0x10120000
 800257c:	10310000 	.word	0x10310000
 8002580:	10320000 	.word	0x10320000
 8002584:	10220000 	.word	0x10220000
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	40010800 	.word	0x40010800
 8002594:	40010c00 	.word	0x40010c00
 8002598:	40011000 	.word	0x40011000
 800259c:	40011400 	.word	0x40011400
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	611a      	str	r2, [r3, #16]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fb48 	bl	8001c88 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e26c      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00c      	beq.n	800264a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d112      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06c      	beq.n	8002730 <HAL_RCC_OscConfig+0x12c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d168      	bne.n	8002730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e246      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x76>
 800266c:	4b80      	ldr	r3, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x98>
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7a      	ldr	r2, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbc>
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a71      	ldr	r2, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fd1c 	bl	800211c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fd18 	bl	800211c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1fa      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fd08 	bl	800211c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff fd04 	bl	800211c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1e6      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x10c>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1ba      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4939      	ldr	r1, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fcbd 	bl	800211c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7ff fcb9 	bl	800211c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e19b      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4927      	ldr	r1, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fc9c 	bl	800211c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7ff fc98 	bl	800211c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e17a      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03a      	beq.n	8002888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d019      	beq.n	800284e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7ff fc7c 	bl	800211c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7ff fc78 	bl	800211c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e15a      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002846:	2001      	movs	r0, #1
 8002848:	f000 fb0a 	bl	8002e60 <RCC_Delay>
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff fc62 	bl	800211c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285a:	e00f      	b.n	800287c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff fc5e 	bl	800211c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d908      	bls.n	800287c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e140      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	42420000 	.word	0x42420000
 8002878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b9e      	ldr	r3, [pc, #632]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e9      	bne.n	800285c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a6 	beq.w	80029e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a93      	ldr	r2, [pc, #588]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b8e      	ldr	r3, [pc, #568]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a8a      	ldr	r2, [pc, #552]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7ff fc1f 	bl	800211c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7ff fc1b 	bl	800211c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0fd      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x312>
 8002908:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a7a      	ldr	r2, [pc, #488]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x334>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x356>
 8002940:	4b6d      	ldr	r3, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a6c      	ldr	r2, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a69      	ldr	r2, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 800295a:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a63      	ldr	r2, [pc, #396]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff fbcf 	bl	800211c <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7ff fbcb 	bl	800211c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0ab      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCC_OscConfig+0x37e>
 80029a4:	e014      	b.n	80029d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7ff fbb9 	bl	800211c <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7ff fbb5 	bl	800211c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e095      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b48      	ldr	r3, [pc, #288]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8081 	beq.w	8002aee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d061      	beq.n	8002abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d146      	bne.n	8002a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_OscConfig+0x4fc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fb89 	bl	800211c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fb85 	bl	800211c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e067      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	492d      	ldr	r1, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a19      	ldr	r1, [r3, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	4927      	ldr	r1, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x4fc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7ff fb59 	bl	800211c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff fb55 	bl	800211c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e037      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46a>
 8002a8c:	e02f      	b.n	8002aee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_RCC_OscConfig+0x4fc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fb42 	bl	800211c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7ff fb3e 	bl	800211c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e020      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x498>
 8002aba:	e018      	b.n	8002aee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e013      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42420060 	.word	0x42420060

08002b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0d0      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	4965      	ldr	r1, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d040      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d115      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e073      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4936      	ldr	r1, [pc, #216]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf4:	f7ff fa92 	bl	800211c <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7ff fa8e 	bl	800211c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e053      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d210      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	4922      	ldr	r1, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f902 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	0800bdf4 	.word	0x0800bdf4
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b490      	push	{r4, r7}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ce0:	1d3c      	adds	r4, r7, #4
 8002ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x46>
 8002d16:	e02d      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d1a:	623b      	str	r3, [r7, #32]
      break;
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	0c9b      	lsrs	r3, r3, #18
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	0c5b      	lsrs	r3, r3, #17
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d56:	fb02 f203 	mul.w	r2, r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e004      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	623b      	str	r3, [r7, #32]
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d76:	623b      	str	r3, [r7, #32]
      break;
 8002d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc90      	pop	{r4, r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	0800bd94 	.word	0x0800bd94
 8002d8c:	0800bda4 	.word	0x0800bda4
 8002d90:	40021000 	.word	0x40021000
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	003d0900 	.word	0x003d0900

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <HAL_RCC_GetHCLKFreq+0x10>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	20000004 	.word	0x20000004

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db4:	f7ff fff2 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002db8:	4601      	mov	r1, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	0800be04 	.word	0x0800be04

08002dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ddc:	f7ff ffde 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de0:	4601      	mov	r1, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0adb      	lsrs	r3, r3, #11
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800be04 	.word	0x0800be04

08002e00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_GetClockConfig+0x58>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_RCC_GetClockConfig+0x58>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetClockConfig+0x58>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCC_GetClockConfig+0x58>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_GetClockConfig+0x5c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0207 	and.w	r2, r3, #7
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40022000 	.word	0x40022000

08002e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <RCC_Delay+0x34>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <RCC_Delay+0x38>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a5b      	lsrs	r3, r3, #9
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e7c:	bf00      	nop
  }
  while (Delay --);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	60fa      	str	r2, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f9      	bne.n	8002e7c <RCC_Delay+0x1c>
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000004 	.word	0x20000004
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e053      	b.n	8002f56 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fe ff43 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	ea42 0103 	orr.w	r1, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	0c1a      	lsrs	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f002 0204 	and.w	r2, r2, #4
 8002f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b088      	sub	sp, #32
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_SPI_Transmit+0x22>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e11e      	b.n	80031be <HAL_SPI_Transmit+0x260>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f88:	f7ff f8c8 	bl	800211c <HAL_GetTick>
 8002f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fa2:	e103      	b.n	80031ac <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Transmit+0x52>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fb4:	e0fa      	b.n	80031ac <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffc:	d107      	bne.n	800300e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800300c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d007      	beq.n	800302c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003034:	d14b      	bne.n	80030ce <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Transmit+0xe6>
 800303e:	8afb      	ldrh	r3, [r7, #22]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d13e      	bne.n	80030c2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	1c9a      	adds	r2, r3, #2
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003068:	e02b      	b.n	80030c2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b02      	cmp	r3, #2
 8003076:	d112      	bne.n	800309e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	; 0x36
 800309c:	e011      	b.n	80030c2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309e:	f7ff f83d 	bl	800211c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d803      	bhi.n	80030b6 <HAL_SPI_Transmit+0x158>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d102      	bne.n	80030bc <HAL_SPI_Transmit+0x15e>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030c0:	e074      	b.n	80031ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ce      	bne.n	800306a <HAL_SPI_Transmit+0x10c>
 80030cc:	e04c      	b.n	8003168 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x17e>
 80030d6:	8afb      	ldrh	r3, [r7, #22]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d140      	bne.n	800315e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003102:	e02c      	b.n	800315e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	d113      	bne.n	800313a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	86da      	strh	r2, [r3, #54]	; 0x36
 8003138:	e011      	b.n	800315e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313a:	f7fe ffef 	bl	800211c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d803      	bhi.n	8003152 <HAL_SPI_Transmit+0x1f4>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d102      	bne.n	8003158 <HAL_SPI_Transmit+0x1fa>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800315c:	e026      	b.n	80031ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1cd      	bne.n	8003104 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	6839      	ldr	r1, [r7, #0]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fa43 	bl	80035f8 <SPI_EndRxTxTransaction>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e000      	b.n	80031ac <HAL_SPI_Transmit+0x24e>
  }

error:
 80031aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08c      	sub	sp, #48	; 0x30
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031d4:	2301      	movs	r3, #1
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x26>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e18a      	b.n	8003502 <HAL_SPI_TransmitReceive+0x33c>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f4:	f7fe ff92 	bl	800211c <HAL_GetTick>
 80031f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800320e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003212:	2b01      	cmp	r3, #1
 8003214:	d00f      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x70>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321c:	d107      	bne.n	800322e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_SPI_TransmitReceive+0x68>
 8003226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322a:	2b04      	cmp	r3, #4
 800322c:	d003      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003234:	e15b      	b.n	80034ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x82>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x82>
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d103      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800324e:	e14e      	b.n	80034ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b04      	cmp	r3, #4
 800325a:	d003      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2205      	movs	r2, #5
 8003260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	887a      	ldrh	r2, [r7, #2]
 800327a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d007      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c0:	d178      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x10a>
 80032ca:	8b7b      	ldrh	r3, [r7, #26]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d166      	bne.n	800339e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f4:	e053      	b.n	800339e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d11b      	bne.n	800333c <HAL_SPI_TransmitReceive+0x176>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_SPI_TransmitReceive+0x176>
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d113      	bne.n	800333c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d119      	bne.n	800337e <HAL_SPI_TransmitReceive+0x1b8>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d014      	beq.n	800337e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	b292      	uxth	r2, r2
 8003360:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	1c9a      	adds	r2, r3, #2
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800337a:	2301      	movs	r3, #1
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800337e:	f7fe fecd 	bl	800211c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800338a:	429a      	cmp	r2, r3
 800338c:	d807      	bhi.n	800339e <HAL_SPI_TransmitReceive+0x1d8>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d003      	beq.n	800339e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800339c:	e0a7      	b.n	80034ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1a6      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x130>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1a1      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x130>
 80033b2:	e07c      	b.n	80034ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x1fc>
 80033bc:	8b7b      	ldrh	r3, [r7, #26]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d16b      	bne.n	800349a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e8:	e057      	b.n	800349a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d11c      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x26c>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d017      	beq.n	8003432 <HAL_SPI_TransmitReceive+0x26c>
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d114      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d119      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x2ae>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d014      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003470:	2301      	movs	r3, #1
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003474:	f7fe fe52 	bl	800211c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003480:	429a      	cmp	r2, r3
 8003482:	d803      	bhi.n	800348c <HAL_SPI_TransmitReceive+0x2c6>
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d102      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x2cc>
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003498:	e029      	b.n	80034ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1a2      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x224>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d19d      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f8a0 	bl	80035f8 <SPI_EndRxTxTransaction>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034ca:	e010      	b.n	80034ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	e000      	b.n	80034ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003502:	4618      	mov	r0, r3
 8003504:	3730      	adds	r7, #48	; 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003518:	b2db      	uxtb	r3, r3
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003534:	e04c      	b.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d048      	beq.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800353e:	f7fe fded 	bl	800211c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d902      	bls.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x30>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13d      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003562:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356c:	d111      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003576:	d004      	beq.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d107      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	d10f      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e00f      	b.n	80035f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d1a3      	bne.n	8003536 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2200      	movs	r2, #0
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff ff88 	bl	8003524 <SPI_WaitFlagStateUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e000      	b.n	800362c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e01d      	b.n	8003682 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe fbc4 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fa32 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d007      	beq.n	800370a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d122      	bne.n	8003772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d11b      	bne.n	8003772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0202 	mvn.w	r2, #2
 8003742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f9a4 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 800375e:	e005      	b.n	800376c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f997 	bl	8003a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f9a6 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d122      	bne.n	80037c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d11b      	bne.n	80037c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0204 	mvn.w	r2, #4
 8003796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f97a 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 80037b2:	e005      	b.n	80037c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f96d 	bl	8003a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f97c 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d122      	bne.n	800381a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d11b      	bne.n	800381a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0208 	mvn.w	r2, #8
 80037ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2204      	movs	r2, #4
 80037f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f950 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 8003806:	e005      	b.n	8003814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f943 	bl	8003a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f952 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	d122      	bne.n	800386e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d11b      	bne.n	800386e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0210 	mvn.w	r2, #16
 800383e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2208      	movs	r2, #8
 8003844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f926 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 800385a:	e005      	b.n	8003868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f919 	bl	8003a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f928 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0201 	mvn.w	r2, #1
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fe fa0d 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b80      	cmp	r3, #128	; 0x80
 80038a6:	d10e      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d107      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa50 	bl	8003d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d10e      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8ec 	bl	8003aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d10e      	bne.n	800391e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b20      	cmp	r3, #32
 800390c:	d107      	bne.n	800391e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f06f 0220 	mvn.w	r2, #32
 8003916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa1b 	bl	8003d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_TIM_ConfigClockSource+0x18>
 800393a:	2302      	movs	r3, #2
 800393c:	e0a6      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x166>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800395c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003964:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d067      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x120>
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d80b      	bhi.n	8003992 <HAL_TIM_ConfigClockSource+0x6c>
 800397a:	2b10      	cmp	r3, #16
 800397c:	d073      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x140>
 800397e:	2b10      	cmp	r3, #16
 8003980:	d802      	bhi.n	8003988 <HAL_TIM_ConfigClockSource+0x62>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06f      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003986:	e078      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003988:	2b20      	cmp	r3, #32
 800398a:	d06c      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x140>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d06a      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003990:	e073      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003992:	2b70      	cmp	r3, #112	; 0x70
 8003994:	d00d      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x8c>
 8003996:	2b70      	cmp	r3, #112	; 0x70
 8003998:	d804      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x7e>
 800399a:	2b50      	cmp	r3, #80	; 0x50
 800399c:	d033      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0xe0>
 800399e:	2b60      	cmp	r3, #96	; 0x60
 80039a0:	d041      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80039a2:	e06a      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d066      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0x152>
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	d017      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80039b0:	e063      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f000 f964 	bl	8003c8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	609a      	str	r2, [r3, #8]
      break;
 80039de:	e04c      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f000 f94d 	bl	8003c8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a02:	609a      	str	r2, [r3, #8]
      break;
 8003a04:	e039      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f000 f8c4 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2150      	movs	r1, #80	; 0x50
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f91b 	bl	8003c5a <TIM_ITRx_SetConfig>
      break;
 8003a24:	e029      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 f8e2 	bl	8003bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2160      	movs	r1, #96	; 0x60
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f90b 	bl	8003c5a <TIM_ITRx_SetConfig>
      break;
 8003a44:	e019      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 f8a4 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f8fb 	bl	8003c5a <TIM_ITRx_SetConfig>
      break;
 8003a64:	e009      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f000 f8f2 	bl	8003c5a <TIM_ITRx_SetConfig>
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a29      	ldr	r2, [pc, #164]	; (8003b94 <TIM_Base_SetConfig+0xb8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <TIM_Base_SetConfig+0x30>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0x30>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <TIM_Base_SetConfig+0xbc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0x30>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <TIM_Base_SetConfig+0xc0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <TIM_Base_SetConfig+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0x62>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <TIM_Base_SetConfig+0xbc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <TIM_Base_SetConfig+0xc0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <TIM_Base_SetConfig+0xb8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800

08003ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 030a 	bic.w	r3, r3, #10
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f023 0210 	bic.w	r2, r3, #16
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	031b      	lsls	r3, r3, #12
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f043 0307 	orr.w	r3, r3, #7
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b087      	sub	sp, #28
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	609a      	str	r2, [r3, #8]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e032      	b.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e03f      	b.n	8003e0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe f840 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f90b 	bl	8003fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b088      	sub	sp, #32
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 8083 	bne.w	8003f3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Transmit+0x2e>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e07b      	b.n	8003f3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Transmit+0x40>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e074      	b.n	8003f3c <HAL_UART_Transmit+0x12a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2221      	movs	r2, #33	; 0x21
 8003e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e68:	f7fe f958 	bl	800211c <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e7a:	e042      	b.n	8003f02 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d122      	bne.n	8003eda <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f850 	bl	8003f44 <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e046      	b.n	8003f3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	e017      	b.n	8003f02 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	e013      	b.n	8003f02 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f82d 	bl	8003f44 <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e023      	b.n	8003f3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	60ba      	str	r2, [r7, #8]
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1b7      	bne.n	8003e7c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f814 	bl	8003f44 <UART_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e00a      	b.n	8003f3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f54:	e02c      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d028      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f64:	f7fe f8da 	bl	800211c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d21d      	bcs.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e00f      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d0c3      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004012:	f023 030c 	bic.w	r3, r3, #12
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	430b      	orrs	r3, r1
 800401e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a52      	ldr	r2, [pc, #328]	; (8004184 <UART_SetConfig+0x1ac>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d14e      	bne.n	80040de <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7fe feca 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 8004044:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <UART_SetConfig+0x1b0>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	0119      	lsls	r1, r3, #4
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <UART_SetConfig+0x1b0>)
 800407e:	fba3 0302 	umull	r0, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2064      	movs	r0, #100	; 0x64
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <UART_SetConfig+0x1b0>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409c:	4419      	add	r1, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <UART_SetConfig+0x1b0>)
 80040b6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2064      	movs	r0, #100	; 0x64
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	; 0x32
 80040c8:	4a2f      	ldr	r2, [pc, #188]	; (8004188 <UART_SetConfig+0x1b0>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	440a      	add	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80040dc:	e04d      	b.n	800417a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80040de:	f7fe fe67 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 80040e2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009a      	lsls	r2, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	4a23      	ldr	r2, [pc, #140]	; (8004188 <UART_SetConfig+0x1b0>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	0119      	lsls	r1, r3, #4
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009a      	lsls	r2, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	fbb2 f2f3 	udiv	r2, r2, r3
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <UART_SetConfig+0x1b0>)
 800411c:	fba3 0302 	umull	r0, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2064      	movs	r0, #100	; 0x64
 8004124:	fb00 f303 	mul.w	r3, r0, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <UART_SetConfig+0x1b0>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413a:	4419      	add	r1, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009a      	lsls	r2, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <UART_SetConfig+0x1b0>)
 8004154:	fba3 0302 	umull	r0, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2064      	movs	r0, #100	; 0x64
 800415c:	fb00 f303 	mul.w	r3, r0, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	3332      	adds	r3, #50	; 0x32
 8004166:	4a08      	ldr	r2, [pc, #32]	; (8004188 <UART_SetConfig+0x1b0>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	440a      	add	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40013800 	.word	0x40013800
 8004188:	51eb851f 	.word	0x51eb851f

0800418c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004190:	4904      	ldr	r1, [pc, #16]	; (80041a4 <MX_FATFS_Init+0x18>)
 8004192:	4805      	ldr	r0, [pc, #20]	; (80041a8 <MX_FATFS_Init+0x1c>)
 8004194:	f003 f820 	bl	80071d8 <FATFS_LinkDriver>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <MX_FATFS_Init+0x20>)
 800419e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200017bc 	.word	0x200017bc
 80041a8:	20000010 	.word	0x20000010
 80041ac:	200017c0 	.word	0x200017c0

080041b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80041b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd f83a 	bl	8001244 <SD_disk_initialize>
 80041d0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	4603      	mov	r3, r0
 80041e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd f916 	bl	8001418 <SD_disk_status>
 80041ec:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	4603      	mov	r3, r0
 8004204:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8004206:	7bf8      	ldrb	r0, [r7, #15]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	f7fd f917 	bl	8001440 <SD_disk_read>
 8004212:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800422c:	7bf8      	ldrb	r0, [r7, #15]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	f7fd f96e 	bl	8001514 <SD_disk_write>
 8004238:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	4603      	mov	r3, r0
 800424a:	603a      	str	r2, [r7, #0]
 800424c:	71fb      	strb	r3, [r7, #7]
 800424e:	460b      	mov	r3, r1
 8004250:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004252:	79b9      	ldrb	r1, [r7, #6]
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd f9df 	bl	800161c <SD_disk_ioctl>
 800425e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <disk_status+0x30>)
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	79fa      	ldrb	r2, [r7, #7]
 8004280:	4905      	ldr	r1, [pc, #20]	; (8004298 <disk_status+0x30>)
 8004282:	440a      	add	r2, r1
 8004284:	7a12      	ldrb	r2, [r2, #8]
 8004286:	4610      	mov	r0, r2
 8004288:	4798      	blx	r3
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000490 	.word	0x20000490

0800429c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4a0d      	ldr	r2, [pc, #52]	; (80042e4 <disk_initialize+0x48>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <disk_initialize+0x48>)
 80042b8:	2101      	movs	r1, #1
 80042ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <disk_initialize+0x48>)
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	79fa      	ldrb	r2, [r7, #7]
 80042ca:	4906      	ldr	r1, [pc, #24]	; (80042e4 <disk_initialize+0x48>)
 80042cc:	440a      	add	r2, r1
 80042ce:	7a12      	ldrb	r2, [r2, #8]
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000490 	.word	0x20000490

080042e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <disk_read+0x3c>)
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	689c      	ldr	r4, [r3, #8]
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <disk_read+0x3c>)
 8004308:	4413      	add	r3, r2
 800430a:	7a18      	ldrb	r0, [r3, #8]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	47a0      	blx	r4
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]
  return res;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
}
 800431a:	4618      	mov	r0, r3
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd90      	pop	{r4, r7, pc}
 8004322:	bf00      	nop
 8004324:	20000490 	.word	0x20000490

08004328 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <disk_write+0x3c>)
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68dc      	ldr	r4, [r3, #12]
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <disk_write+0x3c>)
 8004348:	4413      	add	r3, r2
 800434a:	7a18      	ldrb	r0, [r3, #8]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	47a0      	blx	r4
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]
  return res;
 8004358:	7dfb      	ldrb	r3, [r7, #23]
}
 800435a:	4618      	mov	r0, r3
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd90      	pop	{r4, r7, pc}
 8004362:	bf00      	nop
 8004364:	20000490 	.word	0x20000490

08004368 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	603a      	str	r2, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
 8004374:	460b      	mov	r3, r1
 8004376:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <disk_ioctl+0x38>)
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	4906      	ldr	r1, [pc, #24]	; (80043a0 <disk_ioctl+0x38>)
 8004388:	440a      	add	r2, r1
 800438a:	7a10      	ldrb	r0, [r2, #8]
 800438c:	79b9      	ldrb	r1, [r7, #6]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4798      	blx	r3
 8004392:	4603      	mov	r3, r0
 8004394:	73fb      	strb	r3, [r7, #15]
  return res;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000490 	.word	0x20000490

080043a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80043b8:	e007      	b.n	80043ca <mem_cpy+0x26>
		*d++ = *s++;
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	1c53      	adds	r3, r2, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	6179      	str	r1, [r7, #20]
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	1e5a      	subs	r2, r3, #1
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f2      	bne.n	80043ba <mem_cpy+0x16>
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80043de:	b480      	push	{r7}
 80043e0:	b087      	sub	sp, #28
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80043ee:	e005      	b.n	80043fc <mem_set+0x1e>
		*d++ = (BYTE)val;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	617a      	str	r2, [r7, #20]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f4      	bne.n	80043f0 <mem_set+0x12>
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004428:	bf00      	nop
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <mem_cmp+0x40>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	61fa      	str	r2, [r7, #28]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	61ba      	str	r2, [r7, #24]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	1acb      	subs	r3, r1, r3
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ec      	beq.n	800442a <mem_cmp+0x1a>
	return r;
 8004450:	697b      	ldr	r3, [r7, #20]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004466:	e002      	b.n	800446e <chk_chr+0x12>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3301      	adds	r3, #1
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <chk_chr+0x26>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4293      	cmp	r3, r2
 8004480:	d1f2      	bne.n	8004468 <chk_chr+0xc>
	return *str;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	781b      	ldrb	r3, [r3, #0]
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800449e:	4618      	mov	r0, r3
 80044a0:	f002 fed5 	bl	800724e <ff_req_grant>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <unlock_fs+0x36>
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d00e      	beq.n	80044e4 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	2b0b      	cmp	r3, #11
 80044ca:	d00b      	beq.n	80044e4 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d008      	beq.n	80044e4 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	2b0f      	cmp	r3, #15
 80044d6:	d005      	beq.n	80044e4 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80044de:	4618      	mov	r0, r3
 80044e0:	f002 feca 	bl	8007278 <ff_rel_grant>
	}
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e038      	b.n	8004572 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004500:	492f      	ldr	r1, [pc, #188]	; (80045c0 <chk_lock+0xd4>)
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d029      	beq.n	8004568 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004514:	492a      	ldr	r1, [pc, #168]	; (80045c0 <chk_lock+0xd4>)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800452a:	429a      	cmp	r2, r3
 800452c:	d11e      	bne.n	800456c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800452e:	4924      	ldr	r1, [pc, #144]	; (80045c0 <chk_lock+0xd4>)
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3304      	adds	r3, #4
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004546:	429a      	cmp	r2, r3
 8004548:	d110      	bne.n	800456c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800454a:	491d      	ldr	r1, [pc, #116]	; (80045c0 <chk_lock+0xd4>)
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	3308      	adds	r3, #8
 800455a:	881a      	ldrh	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004562:	429a      	cmp	r2, r3
 8004564:	d102      	bne.n	800456c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004566:	e007      	b.n	8004578 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004568:	2301      	movs	r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d9c3      	bls.n	8004500 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d109      	bne.n	8004592 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <chk_lock+0x9e>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d101      	bne.n	800458e <chk_lock+0xa2>
 800458a:	2300      	movs	r3, #0
 800458c:	e013      	b.n	80045b6 <chk_lock+0xca>
 800458e:	2312      	movs	r3, #18
 8004590:	e011      	b.n	80045b6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <chk_lock+0xc4>
 8004598:	4909      	ldr	r1, [pc, #36]	; (80045c0 <chk_lock+0xd4>)
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4613      	mov	r3, r2
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	330a      	adds	r3, #10
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d101      	bne.n	80045b4 <chk_lock+0xc8>
 80045b0:	2310      	movs	r3, #16
 80045b2:	e000      	b.n	80045b6 <chk_lock+0xca>
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	20000478 	.word	0x20000478

080045c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	e002      	b.n	80045d6 <enq_lock+0x12>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d809      	bhi.n	80045f0 <enq_lock+0x2c>
 80045dc:	490a      	ldr	r1, [pc, #40]	; (8004608 <enq_lock+0x44>)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ef      	bne.n	80045d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000478 	.word	0x20000478

0800460c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e02b      	b.n	8004674 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800461c:	4955      	ldr	r1, [pc, #340]	; (8004774 <inc_lock+0x168>)
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004632:	429a      	cmp	r2, r3
 8004634:	d11b      	bne.n	800466e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004636:	494f      	ldr	r1, [pc, #316]	; (8004774 <inc_lock+0x168>)
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3304      	adds	r3, #4
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800464e:	429a      	cmp	r2, r3
 8004650:	d10d      	bne.n	800466e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004652:	4948      	ldr	r1, [pc, #288]	; (8004774 <inc_lock+0x168>)
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3308      	adds	r3, #8
 8004662:	881a      	ldrh	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800466a:	429a      	cmp	r2, r3
 800466c:	d006      	beq.n	800467c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d9d0      	bls.n	800461c <inc_lock+0x10>
 800467a:	e000      	b.n	800467e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800467c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d145      	bne.n	8004710 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e002      	b.n	8004690 <inc_lock+0x84>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d809      	bhi.n	80046aa <inc_lock+0x9e>
 8004696:	4937      	ldr	r1, [pc, #220]	; (8004774 <inc_lock+0x168>)
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ef      	bne.n	800468a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d101      	bne.n	80046b4 <inc_lock+0xa8>
 80046b0:	2300      	movs	r3, #0
 80046b2:	e05a      	b.n	800476a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80046ba:	482e      	ldr	r0, [pc, #184]	; (8004774 <inc_lock+0x168>)
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4403      	add	r3, r0
 80046c8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80046d0:	4828      	ldr	r0, [pc, #160]	; (8004774 <inc_lock+0x168>)
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4403      	add	r3, r0
 80046de:	3304      	adds	r3, #4
 80046e0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80046e8:	4922      	ldr	r1, [pc, #136]	; (8004774 <inc_lock+0x168>)
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3308      	adds	r3, #8
 80046f8:	4602      	mov	r2, r0
 80046fa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80046fc:	491d      	ldr	r1, [pc, #116]	; (8004774 <inc_lock+0x168>)
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	330a      	adds	r3, #10
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <inc_lock+0x124>
 8004716:	4917      	ldr	r1, [pc, #92]	; (8004774 <inc_lock+0x168>)
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	330a      	adds	r3, #10
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <inc_lock+0x124>
 800472c:	2300      	movs	r3, #0
 800472e:	e01c      	b.n	800476a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <inc_lock+0x142>
 8004736:	490f      	ldr	r1, [pc, #60]	; (8004774 <inc_lock+0x168>)
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	330a      	adds	r3, #10
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	b299      	uxth	r1, r3
 800474c:	e001      	b.n	8004752 <inc_lock+0x146>
 800474e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004752:	4808      	ldr	r0, [pc, #32]	; (8004774 <inc_lock+0x168>)
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4403      	add	r3, r0
 8004760:	330a      	adds	r3, #10
 8004762:	460a      	mov	r2, r1
 8004764:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	20000478 	.word	0x20000478

08004778 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d82e      	bhi.n	80047ea <dec_lock+0x72>
		n = Files[i].ctr;
 800478c:	491b      	ldr	r1, [pc, #108]	; (80047fc <dec_lock+0x84>)
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	330a      	adds	r3, #10
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a6:	d101      	bne.n	80047ac <dec_lock+0x34>
 80047a8:	2300      	movs	r3, #0
 80047aa:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <dec_lock+0x40>
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80047b8:	4910      	ldr	r1, [pc, #64]	; (80047fc <dec_lock+0x84>)
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	330a      	adds	r3, #10
 80047c8:	89fa      	ldrh	r2, [r7, #14]
 80047ca:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <dec_lock+0x6c>
 80047d2:	490a      	ldr	r1, [pc, #40]	; (80047fc <dec_lock+0x84>)
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	737b      	strb	r3, [r7, #13]
 80047e8:	e001      	b.n	80047ee <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047ea:	2302      	movs	r3, #2
 80047ec:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80047ee:	7b7b      	ldrb	r3, [r7, #13]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000478 	.word	0x20000478

08004800 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e016      	b.n	800483c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800480e:	490f      	ldr	r1, [pc, #60]	; (800484c <clear_lock+0x4c>)
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d108      	bne.n	8004836 <clear_lock+0x36>
 8004824:	4909      	ldr	r1, [pc, #36]	; (800484c <clear_lock+0x4c>)
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d9e5      	bls.n	800480e <clear_lock+0xe>
	}
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	20000478 	.word	0x20000478

08004850 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004862:	2b00      	cmp	r3, #0
 8004864:	d038      	beq.n	80048d8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800486c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	2301      	movs	r3, #1
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	f7ff fd55 	bl	8004328 <disk_write>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e026      	b.n	80048d8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d218      	bcs.n	80048d8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	e010      	b.n	80048d2 <sync_window+0x82>
					wsect += fs->fsize;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4413      	add	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	2301      	movs	r3, #1
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	f7ff fd2e 	bl	8004328 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d8eb      	bhi.n	80048b0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d01b      	beq.n	8004934 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ffa7 	bl	8004850 <sync_window>
 8004902:	4603      	mov	r3, r0
 8004904:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d113      	bne.n	8004934 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	2301      	movs	r3, #1
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	f7ff fce6 	bl	80042e8 <disk_read>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004922:	f04f 33ff 	mov.w	r3, #4294967295
 8004926:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ff82 	bl	8004850 <sync_window>
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 809b 	bne.w	8004a8e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800495e:	2b03      	cmp	r3, #3
 8004960:	f040 8088 	bne.w	8004a74 <sync_fs+0x136>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800496a:	2b01      	cmp	r3, #1
 800496c:	f040 8082 	bne.w	8004a74 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fd30 	bl	80043de <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2255      	movs	r2, #85	; 0x55
 8004982:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	22aa      	movs	r2, #170	; 0xaa
 800498a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2252      	movs	r2, #82	; 0x52
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2252      	movs	r2, #82	; 0x52
 8004998:	705a      	strb	r2, [r3, #1]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2261      	movs	r2, #97	; 0x61
 800499e:	709a      	strb	r2, [r3, #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2241      	movs	r2, #65	; 0x41
 80049a4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2272      	movs	r2, #114	; 0x72
 80049aa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2272      	movs	r2, #114	; 0x72
 80049b2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2241      	movs	r2, #65	; 0x41
 80049ba:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2261      	movs	r2, #97	; 0x61
 80049c2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049da:	b29b      	uxth	r3, r3
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	b29b      	uxth	r3, r3
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049fe:	0e1b      	lsrs	r3, r3, #24
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a40:	0e1b      	lsrs	r3, r3, #24
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8004a66:	2301      	movs	r3, #1
 8004a68:	f7ff fc5e 	bl	8004328 <disk_write>
			fs->fsi_flag = 0;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fc72 	bl	8004368 <disk_ioctl>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3b02      	subs	r3, #2
 8004aa6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004aae:	3b02      	subs	r3, #2
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d301      	bcc.n	8004aba <clust2sect+0x22>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e00a      	b.n	8004ad0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	fb03 f202 	mul.w	r2, r3, r2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004ace:	4413      	add	r3, r2
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d905      	bls.n	8004af6 <get_fat+0x1c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <get_fat+0x22>
		val = 1;	/* Internal error */
 8004af6:	2301      	movs	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e0a0      	b.n	8004c3e <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295
 8004b00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d044      	beq.n	8004b96 <get_fat+0xbc>
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d063      	beq.n	8004bd8 <get_fat+0xfe>
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 808a 	bne.w	8004c2a <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	0a5b      	lsrs	r3, r3, #9
 8004b2e:	4413      	add	r3, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fed5 	bl	80048e2 <move_window>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d178      	bne.n	8004c30 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	60fa      	str	r2, [r7, #12]
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	0a5b      	lsrs	r3, r3, #9
 8004b58:	4413      	add	r3, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fec0 	bl	80048e2 <move_window>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d165      	bne.n	8004c34 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <get_fat+0xb2>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	e002      	b.n	8004b92 <get_fat+0xb8>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	617b      	str	r3, [r7, #20]
			break;
 8004b94:	e053      	b.n	8004c3e <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fe9c 	bl	80048e2 <move_window>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d143      	bne.n	8004c38 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4413      	add	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	b21a      	sxth	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b21b      	sxth	r3, r3
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	b21b      	sxth	r3, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	617b      	str	r3, [r7, #20]
			break;
 8004bd6:	e032      	b.n	8004c3e <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	09db      	lsrs	r3, r3, #7
 8004be2:	4413      	add	r3, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fe7b 	bl	80048e2 <move_window>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d124      	bne.n	8004c3c <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	3303      	adds	r3, #3
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	061a      	lsls	r2, r3, #24
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3302      	adds	r3, #2
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	4313      	orrs	r3, r2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	3201      	adds	r2, #1
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	0212      	lsls	r2, r2, #8
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c26:	617b      	str	r3, [r7, #20]
			break;
 8004c28:	e009      	b.n	8004c3e <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e006      	b.n	8004c3e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c30:	bf00      	nop
 8004c32:	e004      	b.n	8004c3e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c34:	bf00      	nop
 8004c36:	e002      	b.n	8004c3e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c38:	bf00      	nop
 8004c3a:	e000      	b.n	8004c3e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c3c:	bf00      	nop
		}
	}

	return val;
 8004c3e:	697b      	ldr	r3, [r7, #20]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d905      	bls.n	8004c66 <put_fat+0x1e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <put_fat+0x24>
		res = FR_INT_ERR;
 8004c66:	2302      	movs	r3, #2
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e0f3      	b.n	8004e54 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d074      	beq.n	8004d60 <put_fat+0x118>
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	f000 8099 	beq.w	8004dae <put_fat+0x166>
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	f040 80df 	bne.w	8004e40 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fe1f 	bl	80048e2 <move_window>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ca8:	7ffb      	ldrb	r3, [r7, #31]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 80cb 	bne.w	8004e46 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	617a      	str	r2, [r7, #20]
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <put_fat+0x9e>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	b25a      	sxtb	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	e001      	b.n	8004cea <put_fat+0xa2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	0a5b      	lsrs	r3, r3, #9
 8004d00:	4413      	add	r3, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fdec 	bl	80048e2 <move_window>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 809a 	bne.w	8004e4a <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <put_fat+0xec>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e00e      	b.n	8004d52 <put_fat+0x10a>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b25b      	sxtb	r3, r3
 8004d3a:	f023 030f 	bic.w	r3, r3, #15
 8004d3e:	b25a      	sxtb	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	b25b      	sxtb	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004d5e:	e079      	b.n	8004e54 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	4413      	add	r3, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff fdb7 	bl	80048e2 <move_window>
 8004d74:	4603      	mov	r3, r0
 8004d76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d167      	bne.n	8004e4e <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004dac:	e052      	b.n	8004e54 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	09db      	lsrs	r3, r3, #7
 8004db8:	4413      	add	r3, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fd90 	bl	80048e2 <move_window>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d142      	bne.n	8004e52 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3303      	adds	r3, #3
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	061a      	lsls	r2, r3, #24
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3302      	adds	r3, #2
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	4313      	orrs	r3, r2
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	3201      	adds	r2, #1
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	0212      	lsls	r2, r2, #8
 8004df4:	4313      	orrs	r3, r2
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0c1a      	lsrs	r2, r3, #16
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3302      	adds	r3, #2
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0e1a      	lsrs	r2, r3, #24
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3303      	adds	r3, #3
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004e3e:	e009      	b.n	8004e54 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8004e40:	2302      	movs	r3, #2
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e006      	b.n	8004e54 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004e46:	bf00      	nop
 8004e48:	e004      	b.n	8004e54 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004e52:	bf00      	nop
		}
	}

	return res;
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d905      	bls.n	8004e7a <remove_chain+0x1c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <remove_chain+0x22>
		res = FR_INT_ERR;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	e043      	b.n	8004f08 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e84:	e036      	b.n	8004ef4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fe26 	bl	8004ada <get_fat>
 8004e8e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d035      	beq.n	8004f02 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d102      	bne.n	8004ea2 <remove_chain+0x44>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e032      	b.n	8004f08 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d102      	bne.n	8004eb0 <remove_chain+0x52>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
 8004eae:	e02b      	b.n	8004f08 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fec7 	bl	8004c48 <put_fat>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d120      	bne.n	8004f06 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d00f      	beq.n	8004ef0 <remove_chain+0x92>
				fs->free_clust++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3c2      	bcc.n	8004e86 <remove_chain+0x28>
 8004f00:	e002      	b.n	8004f08 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004f06:	bf00      	nop
		}
	}

	return res;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f28:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <create_chain+0x2a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d31c      	bcc.n	8004f76 <create_chain+0x64>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	e019      	b.n	8004f76 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fdc8 	bl	8004ada <get_fat>
 8004f4a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d801      	bhi.n	8004f56 <create_chain+0x44>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e076      	b.n	8005044 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d101      	bne.n	8004f62 <create_chain+0x50>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	e070      	b.n	8005044 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d201      	bcs.n	8004f72 <create_chain+0x60>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	e068      	b.n	8005044 <create_chain+0x132>
		scl = clst;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d307      	bcc.n	8004f9c <create_chain+0x8a>
			ncl = 2;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d901      	bls.n	8004f9c <create_chain+0x8a>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e053      	b.n	8005044 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fd9b 	bl	8004ada <get_fat>
 8004fa4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d002      	beq.n	8004fba <create_chain+0xa8>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <create_chain+0xac>
			return cs;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	e042      	b.n	8005044 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d1d9      	bne.n	8004f7a <create_chain+0x68>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e03c      	b.n	8005044 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004fca:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004fcc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004fd0:	6979      	ldr	r1, [r7, #20]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fe38 	bl	8004c48 <put_fat>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <create_chain+0xe4>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fe2b 	bl	8004c48 <put_fat>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d11a      	bne.n	8005032 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d018      	beq.n	8005042 <create_chain+0x130>
			fs->free_clust--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	b2da      	uxtb	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005030:	e007      	b.n	8005042 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <create_chain+0x12c>
 8005038:	f04f 33ff 	mov.w	r3, #4294967295
 800503c:	e000      	b.n	8005040 <create_chain+0x12e>
 800503e:	2301      	movs	r3, #1
 8005040:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005042:	697b      	ldr	r3, [r7, #20]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800505c:	3304      	adds	r3, #4
 800505e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800506a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800506e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005072:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1d1a      	adds	r2, r3, #4
 8005078:	613a      	str	r2, [r7, #16]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <clmt_clust+0x3c>
 8005084:	2300      	movs	r3, #0
 8005086:	e010      	b.n	80050aa <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	d307      	bcc.n	80050a0 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3304      	adds	r3, #4
 800509c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800509e:	e7e9      	b.n	8005074 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80050a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80050ce:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d007      	beq.n	80050e6 <dir_sdi+0x32>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d301      	bcc.n	80050ea <dir_sdi+0x36>
		return FR_INT_ERR;
 80050e6:	2302      	movs	r3, #2
 80050e8:	e074      	b.n	80051d4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <dir_sdi+0x56>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d105      	bne.n	800510a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005104:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005108:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d111      	bne.n	8005134 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005116:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800511a:	461a      	mov	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	4293      	cmp	r3, r2
 8005120:	d301      	bcc.n	8005126 <dir_sdi+0x72>
			return FR_INT_ERR;
 8005122:	2302      	movs	r3, #2
 8005124:	e056      	b.n	80051d4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800512c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e032      	b.n	800519a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800513a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005142:	e01e      	b.n	8005182 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800514a:	6979      	ldr	r1, [r7, #20]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fcc4 	bl	8004ada <get_fat>
 8005152:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d101      	bne.n	8005160 <dir_sdi+0xac>
 800515c:	2301      	movs	r3, #1
 800515e:	e039      	b.n	80051d4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d907      	bls.n	8005176 <dir_sdi+0xc2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800516c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	429a      	cmp	r2, r3
 8005174:	d301      	bcc.n	800517a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005176:	2302      	movs	r3, #2
 8005178:	e02c      	b.n	80051d4 <dir_sdi+0x120>
			idx -= ic;
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d2dc      	bcs.n	8005144 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fc80 	bl	8004a98 <clust2sect>
 8005198:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <dir_sdi+0xf8>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e013      	b.n	80051d4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	091a      	lsrs	r2, r3, #4
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	441a      	add	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051c0:	461a      	mov	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	015b      	lsls	r3, r3, #5
 80051ca:	441a      	add	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <dir_next+0x26>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <dir_next+0x2a>
		return FR_NO_FILE;
 8005202:	2304      	movs	r3, #4
 8005204:	e0dd      	b.n	80053c2 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 80c6 	bne.w	800539e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005230:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005234:	461a      	mov	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4293      	cmp	r3, r2
 800523a:	f0c0 80b0 	bcc.w	800539e <dir_next+0x1c2>
				return FR_NO_FILE;
 800523e:	2304      	movs	r3, #4
 8005240:	e0bf      	b.n	80053c2 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800524c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005250:	3a01      	subs	r2, #1
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 80a2 	bne.w	800539e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7ff fc36 	bl	8004ada <get_fat>
 800526e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d801      	bhi.n	800527a <dir_next+0x9e>
 8005276:	2302      	movs	r3, #2
 8005278:	e0a3      	b.n	80053c2 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d101      	bne.n	8005286 <dir_next+0xaa>
 8005282:	2301      	movs	r3, #1
 8005284:	e09d      	b.n	80053c2 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800528c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	429a      	cmp	r2, r3
 8005294:	d374      	bcc.n	8005380 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <dir_next+0xc4>
 800529c:	2304      	movs	r3, #4
 800529e:	e090      	b.n	80053c2 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7ff fe2f 	bl	8004f12 <create_chain>
 80052b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <dir_next+0xe4>
 80052bc:	2307      	movs	r3, #7
 80052be:	e080      	b.n	80053c2 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <dir_next+0xee>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e07b      	b.n	80053c2 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d101      	bne.n	80052d6 <dir_next+0xfa>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e075      	b.n	80053c2 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fab7 	bl	8004850 <sync_window>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <dir_next+0x110>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e06a      	b.n	80053c2 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff f870 	bl	80043de <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	4610      	mov	r0, r2
 800530e:	f7ff fbc3 	bl	8004a98 <clust2sect>
 8005312:	4603      	mov	r3, r0
 8005314:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	e01b      	b.n	8005356 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fa8d 	bl	8004850 <sync_window>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <dir_next+0x164>
 800533c:	2301      	movs	r3, #1
 800533e:	e040      	b.n	80053c2 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005346:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800534a:	3201      	adds	r2, #1
 800534c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	3301      	adds	r3, #1
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800535c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005360:	461a      	mov	r2, r3
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4293      	cmp	r3, r2
 8005366:	d3da      	bcc.n	800531e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800536e:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	1a8a      	subs	r2, r1, r2
 800537c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fb81 	bl	8004a98 <clust2sect>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	015b      	lsls	r3, r3, #5
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd90      	pop	{r4, r7, pc}

080053ca <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80053d4:	2100      	movs	r1, #0
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fe6c 	bl	80050b4 <dir_sdi>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d131      	bne.n	800544a <dir_alloc+0x80>
		n = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053f6:	4619      	mov	r1, r3
 80053f8:	4610      	mov	r0, r2
 80053fa:	f7ff fa72 	bl	80048e2 <move_window>
 80053fe:	4603      	mov	r3, r0
 8005400:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d11f      	bne.n	8005448 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2be5      	cmp	r3, #229	; 0xe5
 8005412:	d005      	beq.n	8005420 <dir_alloc+0x56>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d107      	bne.n	8005430 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	3301      	adds	r3, #1
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d102      	bne.n	8005434 <dir_alloc+0x6a>
 800542e:	e00c      	b.n	800544a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005434:	2101      	movs	r1, #1
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fed0 	bl	80051dc <dir_next>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0d1      	beq.n	80053ea <dir_alloc+0x20>
 8005446:	e000      	b.n	800544a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005448:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b04      	cmp	r3, #4
 800544e:	d101      	bne.n	8005454 <dir_alloc+0x8a>
 8005450:	2307      	movs	r3, #7
 8005452:	73fb      	strb	r3, [r7, #15]
	return res;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	331b      	adds	r3, #27
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	b21a      	sxth	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	331a      	adds	r3, #26
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	b21b      	sxth	r3, r3
 800547a:	4313      	orrs	r3, r2
 800547c:	b21b      	sxth	r3, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005488:	2b03      	cmp	r3, #3
 800548a:	d10f      	bne.n	80054ac <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	3315      	adds	r3, #21
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	b21a      	sxth	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b21b      	sxth	r3, r3
 800549e:	4313      	orrs	r3, r2
 80054a0:	b21b      	sxth	r3, r3
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

	return cl;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	331a      	adds	r3, #26
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	331b      	adds	r3, #27
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	0c1a      	lsrs	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3314      	adds	r3, #20
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3315      	adds	r3, #21
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800550c:	2100      	movs	r1, #0
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fdd0 	bl	80050b4 <dir_sdi>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <dir_find+0x1e>
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	e03b      	b.n	800559a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7ff f9d6 	bl	80048e2 <move_window>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d128      	bne.n	8005592 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005546:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <dir_find+0x56>
 8005554:	2304      	movs	r3, #4
 8005556:	75fb      	strb	r3, [r7, #23]
 8005558:	e01e      	b.n	8005598 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	330b      	adds	r3, #11
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <dir_find+0x7a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800556e:	220b      	movs	r2, #11
 8005570:	4619      	mov	r1, r3
 8005572:	6938      	ldr	r0, [r7, #16]
 8005574:	f7fe ff4c 	bl	8004410 <mem_cmp>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800557e:	2100      	movs	r1, #0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff fe2b 	bl	80051dc <dir_next>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0c8      	beq.n	8005522 <dir_find+0x1e>
 8005590:	e002      	b.n	8005598 <dir_find+0x94>
		if (res != FR_OK) break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <dir_find+0x94>
			break;
 8005596:	bf00      	nop

	return res;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80055ac:	2304      	movs	r3, #4
 80055ae:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80055b0:	e03f      	b.n	8005632 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff f98e 	bl	80048e2 <move_window>
 80055c6:	4603      	mov	r3, r0
 80055c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d136      	bne.n	800563e <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055d6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <dir_read+0x48>
 80055e4:	2304      	movs	r3, #4
 80055e6:	75fb      	strb	r3, [r7, #23]
 80055e8:	e02e      	b.n	8005648 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	330b      	adds	r3, #11
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f4:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2be5      	cmp	r3, #229	; 0xe5
 80055fa:	d011      	beq.n	8005620 <dir_read+0x7e>
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005600:	d00e      	beq.n	8005620 <dir_read+0x7e>
 8005602:	7bbb      	ldrb	r3, [r7, #14]
 8005604:	2b0f      	cmp	r3, #15
 8005606:	d00b      	beq.n	8005620 <dir_read+0x7e>
 8005608:	7bbb      	ldrb	r3, [r7, #14]
 800560a:	f023 0320 	bic.w	r3, r3, #32
 800560e:	2b08      	cmp	r3, #8
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	4293      	cmp	r3, r2
 800561e:	d010      	beq.n	8005642 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fdda 	bl	80051dc <dir_next>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <dir_read+0xa4>
	while (dp->sect) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1ba      	bne.n	80055b2 <dir_read+0x10>
 800563c:	e004      	b.n	8005648 <dir_read+0xa6>
		if (res != FR_OK) break;
 800563e:	bf00      	nop
 8005640:	e002      	b.n	8005648 <dir_read+0xa6>
			break;
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <dir_read+0xa6>
		if (res != FR_OK) break;
 8005646:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <dir_read+0xb4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005668:	2101      	movs	r1, #1
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fead 	bl	80053ca <dir_alloc>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d126      	bne.n	80056c8 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7ff f92a 	bl	80048e2 <move_window>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d117      	bne.n	80056c8 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800569e:	2220      	movs	r2, #32
 80056a0:	2100      	movs	r1, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fe9b 	bl	80043de <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056b4:	220b      	movs	r2, #11
 80056b6:	4619      	mov	r1, r3
 80056b8:	f7fe fe74 	bl	80043a4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fce6 	bl	80050b4 <dir_sdi>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d121      	bne.n	8005736 <dir_remove+0x64>
		res = move_window(dp->fs, dp->sect);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7ff f8ee 	bl	80048e2 <move_window>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d112      	bne.n	8005736 <dir_remove+0x64>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005716:	2220      	movs	r2, #32
 8005718:	2100      	movs	r1, #0
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fe5f 	bl	80043de <mem_set>
			*dp->dir = DDEM;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005726:	22e5      	movs	r2, #229	; 0xe5
 8005728:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}
#endif

	return res;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3309      	adds	r3, #9
 800574e:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005756:	2b00      	cmp	r3, #0
 8005758:	d05a      	beq.n	8005810 <get_fileinfo+0xd0>
		dir = dp->dir;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005760:	60bb      	str	r3, [r7, #8]
		i = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8005766:	e01c      	b.n	80057a2 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	617a      	str	r2, [r7, #20]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b20      	cmp	r3, #32
 800577a:	d100      	bne.n	800577e <get_fileinfo+0x3e>
 800577c:	e011      	b.n	80057a2 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b05      	cmp	r3, #5
 8005782:	d101      	bne.n	8005788 <get_fileinfo+0x48>
 8005784:	23e5      	movs	r3, #229	; 0xe5
 8005786:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b09      	cmp	r3, #9
 800578c:	d104      	bne.n	8005798 <get_fileinfo+0x58>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	613a      	str	r2, [r7, #16]
 8005794:	222e      	movs	r2, #46	; 0x2e
 8005796:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	613a      	str	r2, [r7, #16]
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b0a      	cmp	r3, #10
 80057a6:	d9df      	bls.n	8005768 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	7ada      	ldrb	r2, [r3, #11]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	331f      	adds	r3, #31
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	061a      	lsls	r2, r3, #24
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	331e      	adds	r3, #30
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	4313      	orrs	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	321d      	adds	r2, #29
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	0212      	lsls	r2, r2, #8
 80057ca:	4313      	orrs	r3, r2
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	321c      	adds	r2, #28
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3319      	adds	r3, #25
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	3318      	adds	r3, #24
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3317      	adds	r3, #23
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	b21a      	sxth	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3316      	adds	r3, #22
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b21b      	sxth	r3, r3
 8005806:	4313      	orrs	r3, r2
 8005808:	b21b      	sxth	r3, r3
 800580a:	b29a      	uxth	r2, r3
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e002      	b.n	8005838 <create_name+0x18>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b2f      	cmp	r3, #47	; 0x2f
 800583e:	d0f8      	beq.n	8005832 <create_name+0x12>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b5c      	cmp	r3, #92	; 0x5c
 8005846:	d0f4      	beq.n	8005832 <create_name+0x12>
	sfn = dp->fn;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800584e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005850:	220b      	movs	r2, #11
 8005852:	2120      	movs	r1, #32
 8005854:	68b8      	ldr	r0, [r7, #8]
 8005856:	f7fe fdc2 	bl	80043de <mem_set>
	si = i = b = 0; ni = 8;
 800585a:	2300      	movs	r3, #0
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	2308      	movs	r3, #8
 8005868:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	617a      	str	r2, [r7, #20]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005878:	7fbb      	ldrb	r3, [r7, #30]
 800587a:	2b20      	cmp	r3, #32
 800587c:	d953      	bls.n	8005926 <create_name+0x106>
 800587e:	7fbb      	ldrb	r3, [r7, #30]
 8005880:	2b2f      	cmp	r3, #47	; 0x2f
 8005882:	d050      	beq.n	8005926 <create_name+0x106>
 8005884:	7fbb      	ldrb	r3, [r7, #30]
 8005886:	2b5c      	cmp	r3, #92	; 0x5c
 8005888:	d04d      	beq.n	8005926 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800588a:	7fbb      	ldrb	r3, [r7, #30]
 800588c:	2b2e      	cmp	r3, #46	; 0x2e
 800588e:	d003      	beq.n	8005898 <create_name+0x78>
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	429a      	cmp	r2, r3
 8005896:	d30f      	bcc.n	80058b8 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d102      	bne.n	80058a4 <create_name+0x84>
 800589e:	7fbb      	ldrb	r3, [r7, #30]
 80058a0:	2b2e      	cmp	r3, #46	; 0x2e
 80058a2:	d001      	beq.n	80058a8 <create_name+0x88>
 80058a4:	2306      	movs	r3, #6
 80058a6:	e073      	b.n	8005990 <create_name+0x170>
			i = 8; ni = 11;
 80058a8:	2308      	movs	r3, #8
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	230b      	movs	r3, #11
 80058ae:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80058b0:	7ffb      	ldrb	r3, [r7, #31]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	77fb      	strb	r3, [r7, #31]
 80058b6:	e035      	b.n	8005924 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80058b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da08      	bge.n	80058d2 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80058c0:	7ffb      	ldrb	r3, [r7, #31]
 80058c2:	f043 0303 	orr.w	r3, r3, #3
 80058c6:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80058c8:	7fbb      	ldrb	r3, [r7, #30]
 80058ca:	3b80      	subs	r3, #128	; 0x80
 80058cc:	4a32      	ldr	r2, [pc, #200]	; (8005998 <create_name+0x178>)
 80058ce:	5cd3      	ldrb	r3, [r2, r3]
 80058d0:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80058d2:	7fbb      	ldrb	r3, [r7, #30]
 80058d4:	4619      	mov	r1, r3
 80058d6:	4831      	ldr	r0, [pc, #196]	; (800599c <create_name+0x17c>)
 80058d8:	f7fe fdc0 	bl	800445c <chk_chr>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <create_name+0xc6>
				return FR_INVALID_NAME;
 80058e2:	2306      	movs	r3, #6
 80058e4:	e054      	b.n	8005990 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80058e6:	7fbb      	ldrb	r3, [r7, #30]
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d907      	bls.n	80058fc <create_name+0xdc>
 80058ec:	7fbb      	ldrb	r3, [r7, #30]
 80058ee:	2b5a      	cmp	r3, #90	; 0x5a
 80058f0:	d804      	bhi.n	80058fc <create_name+0xdc>
				b |= 2;
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	f043 0302 	orr.w	r3, r3, #2
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e00c      	b.n	8005916 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80058fc:	7fbb      	ldrb	r3, [r7, #30]
 80058fe:	2b60      	cmp	r3, #96	; 0x60
 8005900:	d909      	bls.n	8005916 <create_name+0xf6>
 8005902:	7fbb      	ldrb	r3, [r7, #30]
 8005904:	2b7a      	cmp	r3, #122	; 0x7a
 8005906:	d806      	bhi.n	8005916 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005908:	7ffb      	ldrb	r3, [r7, #31]
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	7fbb      	ldrb	r3, [r7, #30]
 8005912:	3b20      	subs	r3, #32
 8005914:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	613a      	str	r2, [r7, #16]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	4413      	add	r3, r2
 8005920:	7fba      	ldrb	r2, [r7, #30]
 8005922:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005924:	e7a1      	b.n	800586a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	441a      	add	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005930:	7fbb      	ldrb	r3, [r7, #30]
 8005932:	2b20      	cmp	r3, #32
 8005934:	d801      	bhi.n	800593a <create_name+0x11a>
 8005936:	2304      	movs	r3, #4
 8005938:	e000      	b.n	800593c <create_name+0x11c>
 800593a:	2300      	movs	r3, #0
 800593c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <create_name+0x128>
 8005944:	2306      	movs	r3, #6
 8005946:	e023      	b.n	8005990 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2be5      	cmp	r3, #229	; 0xe5
 800594e:	d102      	bne.n	8005956 <create_name+0x136>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2205      	movs	r2, #5
 8005954:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d102      	bne.n	8005962 <create_name+0x142>
 800595c:	7ffb      	ldrb	r3, [r7, #31]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005962:	7ffb      	ldrb	r3, [r7, #31]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d103      	bne.n	8005974 <create_name+0x154>
 800596c:	7fbb      	ldrb	r3, [r7, #30]
 800596e:	f043 0310 	orr.w	r3, r3, #16
 8005972:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005974:	7ffb      	ldrb	r3, [r7, #31]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b04      	cmp	r3, #4
 800597c:	d103      	bne.n	8005986 <create_name+0x166>
 800597e:	7fbb      	ldrb	r3, [r7, #30]
 8005980:	f043 0308 	orr.w	r3, r3, #8
 8005984:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	330b      	adds	r3, #11
 800598a:	7fba      	ldrb	r2, [r7, #30]
 800598c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800598e:	2300      	movs	r3, #0
#endif
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	0800be0c 	.word	0x0800be0c
 800599c:	0800bda8 	.word	0x0800bda8

080059a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b2f      	cmp	r3, #47	; 0x2f
 80059b0:	d003      	beq.n	80059ba <follow_path+0x1a>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b5c      	cmp	r3, #92	; 0x5c
 80059b8:	d102      	bne.n	80059c0 <follow_path+0x20>
		path++;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b1f      	cmp	r3, #31
 80059ce:	d80a      	bhi.n	80059e6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80059d0:	2100      	movs	r1, #0
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fb6e 	bl	80050b4 <dir_sdi>
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80059e4:	e045      	b.n	8005a72 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059e6:	463b      	mov	r3, r7
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff ff18 	bl	8005820 <create_name>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d136      	bne.n	8005a68 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fd82 	bl	8005504 <dir_find>
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a0a:	7adb      	ldrb	r3, [r3, #11]
 8005a0c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d128      	bne.n	8005a6c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d123      	bne.n	8005a6c <follow_path+0xcc>
 8005a24:	2305      	movs	r3, #5
 8005a26:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005a28:	e020      	b.n	8005a6c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11d      	bne.n	8005a70 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a3a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	330b      	adds	r3, #11
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e010      	b.n	8005a72 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fd00 	bl	800545e <ld_clust>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a66:	e7be      	b.n	80059e6 <follow_path+0x46>
			if (res != FR_OK) break;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <follow_path+0xd2>
				break;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a70:	bf00      	nop
		}
	}

	return res;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d031      	beq.n	8005af6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e002      	b.n	8005aa0 <get_ldnumber+0x24>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d903      	bls.n	8005ab0 <get_ldnumber+0x34>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b3a      	cmp	r3, #58	; 0x3a
 8005aae:	d1f4      	bne.n	8005a9a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b3a      	cmp	r3, #58	; 0x3a
 8005ab6:	d11c      	bne.n	8005af2 <get_ldnumber+0x76>
			tp = *path;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	3b30      	subs	r3, #48	; 0x30
 8005ac8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d80e      	bhi.n	8005aee <get_ldnumber+0x72>
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d10a      	bne.n	8005aee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <get_ldnumber+0x72>
					vol = (int)i;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	e002      	b.n	8005af8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005af6:	693b      	ldr	r3, [r7, #16]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
	...

08005b04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fe fedd 	bl	80048e2 <move_window>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <check_fs+0x2e>
		return 3;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e04a      	b.n	8005bc8 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b38:	3301      	adds	r3, #1
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	b21a      	sxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <check_fs+0xcc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d001      	beq.n	8005b56 <check_fs+0x52>
		return 2;
 8005b52:	2302      	movs	r3, #2
 8005b54:	e038      	b.n	8005bc8 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3336      	adds	r3, #54	; 0x36
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	061a      	lsls	r2, r3, #24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3336      	adds	r3, #54	; 0x36
 8005b64:	3302      	adds	r3, #2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	3236      	adds	r2, #54	; 0x36
 8005b70:	3201      	adds	r2, #1
 8005b72:	7812      	ldrb	r2, [r2, #0]
 8005b74:	0212      	lsls	r2, r2, #8
 8005b76:	4313      	orrs	r3, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b84:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <check_fs+0xd0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d101      	bne.n	8005b8e <check_fs+0x8a>
		return 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e01c      	b.n	8005bc8 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3352      	adds	r3, #82	; 0x52
 8005b92:	3303      	adds	r3, #3
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	061a      	lsls	r2, r3, #24
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3352      	adds	r3, #82	; 0x52
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	041b      	lsls	r3, r3, #16
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	3252      	adds	r2, #82	; 0x52
 8005ba8:	3201      	adds	r2, #1
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	0212      	lsls	r2, r2, #8
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005bbc:	4a05      	ldr	r2, [pc, #20]	; (8005bd4 <check_fs+0xd0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <check_fs+0xc2>
		return 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e000      	b.n	8005bc8 <check_fs+0xc4>

	return 1;
 8005bc6:	2301      	movs	r3, #1
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	ffffaa55 	.word	0xffffaa55
 8005bd4:	00544146 	.word	0x00544146

08005bd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b096      	sub	sp, #88	; 0x58
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f7ff ff45 	bl	8005a7c <get_ldnumber>
 8005bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da01      	bge.n	8005bfe <find_volume+0x26>
 8005bfa:	230b      	movs	r3, #11
 8005bfc:	e2b2      	b.n	8006164 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005bfe:	4aa2      	ldr	r2, [pc, #648]	; (8005e88 <find_volume+0x2b0>)
 8005c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <find_volume+0x3a>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	e2a8      	b.n	8006164 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 8005c12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c14:	f7fe fc3c 	bl	8004490 <lock_fs>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <find_volume+0x4a>
 8005c1e:	230f      	movs	r3, #15
 8005c20:	e2a0      	b.n	8006164 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c26:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01b      	beq.n	8005c6a <find_volume+0x92>
		stat = disk_status(fs->drv);
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fb15 	bl	8004268 <disk_status>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10c      	bne.n	8005c6a <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <find_volume+0x8e>
 8005c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8005c62:	230a      	movs	r3, #10
 8005c64:	e27e      	b.n	8006164 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 8005c66:	2300      	movs	r3, #0
 8005c68:	e27c      	b.n	8006164 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fb0a 	bl	800429c <disk_initialize>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e262      	b.n	8006164 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <find_volume+0xdc>
 8005ca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005cb0:	230a      	movs	r3, #10
 8005cb2:	e257      	b.n	8006164 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005cb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cbc:	f7ff ff22 	bl	8005b04 <check_fs>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d155      	bne.n	8005d7a <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005cce:	2300      	movs	r3, #0
 8005cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd2:	e029      	b.n	8005d28 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005cde:	4413      	add	r3, r2
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d012      	beq.n	8005d12 <find_volume+0x13a>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	330b      	adds	r3, #11
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	061a      	lsls	r2, r3, #24
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	330a      	adds	r3, #10
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d00:	3209      	adds	r2, #9
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	0212      	lsls	r2, r2, #8
 8005d06:	4313      	orrs	r3, r2
 8005d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0a:	3208      	adds	r2, #8
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	e000      	b.n	8005d14 <find_volume+0x13c>
 8005d12:	2200      	movs	r2, #0
 8005d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d24:	3301      	adds	r3, #1
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40
 8005d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d9d2      	bls.n	8005cd4 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005d2e:	2300      	movs	r3, #0
 8005d30:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <find_volume+0x166>
 8005d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005d46:	4413      	add	r3, r2
 8005d48:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005d4c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <find_volume+0x188>
 8005d54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d58:	f7ff fed4 	bl	8005b04 <check_fs>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	e000      	b.n	8005d62 <find_volume+0x18a>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005d66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <find_volume+0x1a2>
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	3301      	adds	r3, #1
 8005d72:	643b      	str	r3, [r7, #64]	; 0x40
 8005d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d9e1      	bls.n	8005d3e <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d101      	bne.n	8005d86 <find_volume+0x1ae>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e1ee      	b.n	8006164 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <find_volume+0x1ba>
 8005d8e:	230d      	movs	r3, #13
 8005d90:	e1e8      	b.n	8006164 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	7b1b      	ldrb	r3, [r3, #12]
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	b21a      	sxth	r2, r3
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	7adb      	ldrb	r3, [r3, #11]
 8005d9e:	b21b      	sxth	r3, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b21b      	sxth	r3, r3
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d001      	beq.n	8005dae <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8005daa:	230d      	movs	r3, #13
 8005dac:	e1da      	b.n	8006164 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	7ddb      	ldrb	r3, [r3, #23]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	b21a      	sxth	r2, r3
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	7d9b      	ldrb	r3, [r3, #22]
 8005dba:	b21b      	sxth	r3, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d112      	bne.n	8005df0 <find_volume+0x218>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005dd0:	061a      	lsls	r2, r3, #24
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005dd8:	041b      	lsls	r3, r3, #16
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dde:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005de2:	0212      	lsls	r2, r2, #8
 8005de4:	4313      	orrs	r3, r2
 8005de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005dec:	4313      	orrs	r3, r2
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005df4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	7c1a      	ldrb	r2, [r3, #16]
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d006      	beq.n	8005e1a <find_volume+0x242>
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d001      	beq.n	8005e1a <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 8005e16:	230d      	movs	r3, #13
 8005e18:	e1a4      	b.n	8006164 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005e20:	461a      	mov	r2, r3
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	7b5a      	ldrb	r2, [r3, #13]
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <find_volume+0x27c>
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005e44:	461a      	mov	r2, r3
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 8005e54:	230d      	movs	r3, #13
 8005e56:	e185      	b.n	8006164 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	7c9b      	ldrb	r3, [r3, #18]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	7c5b      	ldrb	r3, [r3, #17]
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	4313      	orrs	r3, r2
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 8005e82:	230d      	movs	r3, #13
 8005e84:	e16e      	b.n	8006164 <find_volume+0x58c>
 8005e86:	bf00      	nop
 8005e88:	20000470 	.word	0x20000470

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	7d1b      	ldrb	r3, [r3, #20]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	b21a      	sxth	r2, r3
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	7cdb      	ldrb	r3, [r3, #19]
 8005e98:	b21b      	sxth	r3, r3
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	b21b      	sxth	r3, r3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d112      	bne.n	8005ece <find_volume+0x2f6>
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005eae:	061a      	lsls	r2, r3, #24
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ebc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005ec0:	0212      	lsls	r2, r2, #8
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ec6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	7bdb      	ldrb	r3, [r3, #15]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	b21a      	sxth	r2, r3
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	7b9b      	ldrb	r3, [r3, #14]
 8005eda:	b21b      	sxth	r3, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005ee2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <find_volume+0x314>
 8005ee8:	230d      	movs	r3, #13
 8005eea:	e13b      	b.n	8006164 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005eec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef0:	4413      	add	r3, r2
 8005ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005ef8:	0912      	lsrs	r2, r2, #4
 8005efa:	b292      	uxth	r2, r2
 8005efc:	4413      	add	r3, r2
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d201      	bcs.n	8005f0c <find_volume+0x334>
 8005f08:	230d      	movs	r3, #13
 8005f0a:	e12b      	b.n	8006164 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f14:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <find_volume+0x350>
 8005f24:	230d      	movs	r3, #13
 8005f26:	e11d      	b.n	8006164 <find_volume+0x58c>
	fmt = FS_FAT12;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d902      	bls.n	8005f3e <find_volume+0x366>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d902      	bls.n	8005f4e <find_volume+0x376>
 8005f48:	2303      	movs	r3, #3
 8005f4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f5c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005f60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f64:	441a      	add	r2, r3
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8005f6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	441a      	add	r2, r3
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8005f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d121      	bne.n	8005fc4 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <find_volume+0x3b6>
 8005f8a:	230d      	movs	r3, #13
 8005f8c:	e0ea      	b.n	8006164 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f94:	061a      	lsls	r2, r3, #24
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005fa6:	0212      	lsls	r2, r2, #8
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fac:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc2:	e025      	b.n	8006010 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <find_volume+0x3fa>
 8005fce:	230d      	movs	r3, #13
 8005fd0:	e0c8      	b.n	8006164 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fda:	441a      	add	r2, r3
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005fe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d104      	bne.n	8005ff4 <find_volume+0x41c>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	e00c      	b.n	800600e <find_volume+0x436>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	085a      	lsrs	r2, r3, #1
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800600e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006018:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800601c:	0a5b      	lsrs	r3, r3, #9
 800601e:	429a      	cmp	r2, r3
 8006020:	d201      	bcs.n	8006026 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 8006022:	230d      	movs	r3, #13
 8006024:	e09e      	b.n	8006164 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	f04f 32ff 	mov.w	r2, #4294967295
 800602c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	2280      	movs	r2, #128	; 0x80
 8006040:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006048:	2b03      	cmp	r3, #3
 800604a:	d177      	bne.n	800613c <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	b21a      	sxth	r2, r3
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800605c:	b21b      	sxth	r3, r3
 800605e:	4313      	orrs	r3, r2
 8006060:	b21b      	sxth	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d16a      	bne.n	800613c <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	3301      	adds	r3, #1
 800606a:	4619      	mov	r1, r3
 800606c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800606e:	f7fe fc38 	bl	80048e2 <move_window>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d161      	bne.n	800613c <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	b21a      	sxth	r2, r3
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006090:	b21b      	sxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b21b      	sxth	r3, r3
 8006096:	4a35      	ldr	r2, [pc, #212]	; (800616c <find_volume+0x594>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d14f      	bne.n	800613c <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	061a      	lsls	r2, r3, #24
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	789b      	ldrb	r3, [r3, #2]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	4313      	orrs	r3, r2
 80060aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ac:	7852      	ldrb	r2, [r2, #1]
 80060ae:	0212      	lsls	r2, r2, #8
 80060b0:	4313      	orrs	r3, r2
 80060b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	4a2d      	ldr	r2, [pc, #180]	; (8006170 <find_volume+0x598>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d13e      	bne.n	800613c <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80060c4:	061a      	lsls	r2, r3, #24
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	4313      	orrs	r3, r2
 80060d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d2:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80060d6:	0212      	lsls	r2, r2, #8
 80060d8:	4313      	orrs	r3, r2
 80060da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060dc:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80060e0:	4313      	orrs	r3, r2
 80060e2:	4a24      	ldr	r2, [pc, #144]	; (8006174 <find_volume+0x59c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d129      	bne.n	800613c <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80060ee:	061a      	lsls	r2, r3, #24
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	4313      	orrs	r3, r2
 80060fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060fc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006100:	0212      	lsls	r2, r2, #8
 8006102:	4313      	orrs	r3, r2
 8006104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006106:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800610a:	431a      	orrs	r2, r3
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006118:	061a      	lsls	r2, r3, #24
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	4313      	orrs	r3, r2
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800612a:	0212      	lsls	r2, r2, #8
 800612c:	4313      	orrs	r3, r2
 800612e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006130:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006134:	431a      	orrs	r2, r3
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006142:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <find_volume+0x5a0>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <find_volume+0x5a0>)
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <find_volume+0x5a0>)
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800615c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800615e:	f7fe fb4f 	bl	8004800 <clear_lock>
#endif

	return FR_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3758      	adds	r7, #88	; 0x58
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	ffffaa55 	.word	0xffffaa55
 8006170:	41615252 	.word	0x41615252
 8006174:	61417272 	.word	0x61417272
 8006178:	20000474 	.word	0x20000474

0800617c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d022      	beq.n	80061d4 <validate+0x58>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01d      	beq.n	80061d4 <validate+0x58>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800619e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d016      	beq.n	80061d4 <validate+0x58>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061ac:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d10c      	bne.n	80061d4 <validate+0x58>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061c0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe f84f 	bl	8004268 <disk_status>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80061d4:	2309      	movs	r3, #9
 80061d6:	e00b      	b.n	80061f0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe f956 	bl	8004490 <lock_fs>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <validate+0x72>
 80061ea:	230f      	movs	r3, #15
 80061ec:	e000      	b.n	80061f0 <validate+0x74>

	return FR_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800620a:	f107 0310 	add.w	r3, r7, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fc34 	bl	8005a7c <get_ldnumber>
 8006214:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	da01      	bge.n	8006220 <f_mount+0x28>
 800621c:	230b      	movs	r3, #11
 800621e:	e04c      	b.n	80062ba <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006220:	4a28      	ldr	r2, [pc, #160]	; (80062c4 <f_mount+0xcc>)
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006228:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8006230:	69b8      	ldr	r0, [r7, #24]
 8006232:	f7fe fae5 	bl	8004800 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fffa 	bl	8007236 <ff_del_syncobj>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <f_mount+0x54>
 8006248:	2302      	movs	r3, #2
 800624a:	e036      	b.n	80062ba <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d011      	beq.n	800627e <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f000 ffc1 	bl	80071f6 <ff_cre_syncobj>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <f_mount+0x86>
 800627a:	2302      	movs	r3, #2
 800627c:	e01d      	b.n	80062ba <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4910      	ldr	r1, [pc, #64]	; (80062c4 <f_mount+0xcc>)
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <f_mount+0x9c>
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d001      	beq.n	8006298 <f_mount+0xa0>
 8006294:	2300      	movs	r3, #0
 8006296:	e010      	b.n	80062ba <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006298:	f107 0108 	add.w	r1, r7, #8
 800629c:	f107 030c 	add.w	r3, r7, #12
 80062a0:	2200      	movs	r2, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fc98 	bl	8005bd8 <find_volume>
 80062a8:	4603      	mov	r3, r0
 80062aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	7dfa      	ldrb	r2, [r7, #23]
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe f8fb 	bl	80044ae <unlock_fs>
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000470 	.word	0x20000470

080062c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	f107 030c 	add.w	r3, r7, #12
 80062d4:	6018      	str	r0, [r3, #0]
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	6019      	str	r1, [r3, #0]
 80062dc:	1dfb      	adds	r3, r7, #7
 80062de:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80062e0:	f107 030c 	add.w	r3, r7, #12
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <f_open+0x26>
 80062ea:	2309      	movs	r3, #9
 80062ec:	e1fc      	b.n	80066e8 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 80062ee:	f107 030c 	add.w	r3, r7, #12
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80062fa:	1dfb      	adds	r3, r7, #7
 80062fc:	1dfa      	adds	r2, r7, #7
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	f002 021f 	and.w	r2, r2, #31
 8006304:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006306:	1dfb      	adds	r3, r7, #7
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	f107 0320 	add.w	r3, r7, #32
 8006318:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fc5b 	bl	8005bd8 <find_volume>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006328:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 81cf 	bne.w	80066d0 <f_open+0x408>
		INIT_BUF(dj);
 8006332:	f107 0320 	add.w	r3, r7, #32
 8006336:	f107 0214 	add.w	r2, r7, #20
 800633a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800633e:	f107 0308 	add.w	r3, r7, #8
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f107 0320 	add.w	r3, r7, #32
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fb28 	bl	80059a0 <follow_path>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8006356:	f107 0320 	add.w	r3, r7, #32
 800635a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800635e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006362:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006366:	2b00      	cmp	r3, #0
 8006368:	d11a      	bne.n	80063a0 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800636a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <f_open+0xb2>
				res = FR_INVALID_NAME;
 8006372:	2306      	movs	r3, #6
 8006374:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006378:	e012      	b.n	80063a0 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800637a:	1dfb      	adds	r3, r7, #7
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf14      	ite	ne
 8006386:	2301      	movne	r3, #1
 8006388:	2300      	moveq	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	f107 0320 	add.w	r3, r7, #32
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe f8a9 	bl	80044ec <chk_lock>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80063a0:	1dfb      	adds	r3, r7, #7
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f003 031c 	and.w	r3, r3, #28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80cc 	beq.w	8006546 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80063ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01f      	beq.n	80063f6 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80063b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d10e      	bne.n	80063dc <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80063be:	f7fe f901 	bl	80045c4 <enq_lock>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d006      	beq.n	80063d6 <f_open+0x10e>
 80063c8:	f107 0320 	add.w	r3, r7, #32
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff f947 	bl	8005660 <dir_register>
 80063d2:	4603      	mov	r3, r0
 80063d4:	e000      	b.n	80063d8 <f_open+0x110>
 80063d6:	2312      	movs	r3, #18
 80063d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80063dc:	1dfb      	adds	r3, r7, #7
 80063de:	1dfa      	adds	r2, r7, #7
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	f042 0208 	orr.w	r2, r2, #8
 80063e6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80063e8:	f107 0320 	add.w	r3, r7, #32
 80063ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063f0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80063f4:	e014      	b.n	8006420 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80063f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80063fa:	330b      	adds	r3, #11
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 0311 	and.w	r3, r3, #17
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <f_open+0x146>
					res = FR_DENIED;
 8006406:	2307      	movs	r3, #7
 8006408:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800640c:	e008      	b.n	8006420 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800640e:	1dfb      	adds	r3, r7, #7
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <f_open+0x158>
						res = FR_EXIST;
 800641a:	2308      	movs	r3, #8
 800641c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006420:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 80af 	bne.w	8006588 <f_open+0x2c0>
 800642a:	1dfb      	adds	r3, r7, #7
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80a8 	beq.w	8006588 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8006438:	f7fd feba 	bl	80041b0 <get_fattime>
 800643c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006440:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006444:	330e      	adds	r3, #14
 8006446:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006452:	b29b      	uxth	r3, r3
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	b29a      	uxth	r2, r3
 8006458:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800645c:	330f      	adds	r3, #15
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006466:	0c1a      	lsrs	r2, r3, #16
 8006468:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800646c:	3310      	adds	r3, #16
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006476:	0e1a      	lsrs	r2, r3, #24
 8006478:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800647c:	3311      	adds	r3, #17
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006482:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006486:	330b      	adds	r3, #11
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800648c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006490:	331c      	adds	r3, #28
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800649a:	331d      	adds	r3, #29
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80064a4:	331e      	adds	r3, #30
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80064ae:	331f      	adds	r3, #31
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80064b4:	f107 0320 	add.w	r3, r7, #32
 80064b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064bc:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe ffcc 	bl	800545e <ld_clust>
 80064c6:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80064ca:	2100      	movs	r1, #0
 80064cc:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80064d0:	f7fe fff2 	bl	80054b8 <st_clust>
				dj.fs->wflag = 1;
 80064d4:	f107 0320 	add.w	r3, r7, #32
 80064d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80064e2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d04e      	beq.n	8006588 <f_open+0x2c0>
					dw = dj.fs->winsect;
 80064ea:	f107 0320 	add.w	r3, r7, #32
 80064ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80064f6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80064fa:	f107 0320 	add.w	r3, r7, #32
 80064fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006502:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fca9 	bl	8004e5e <remove_chain>
 800650c:	4603      	mov	r3, r0
 800650e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8006512:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006516:	2b00      	cmp	r3, #0
 8006518:	d136      	bne.n	8006588 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800651a:	f107 0320 	add.w	r3, r7, #32
 800651e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006522:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006526:	3a01      	subs	r2, #1
 8006528:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 800652c:	f107 0320 	add.w	r3, r7, #32
 8006530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006534:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe f9d2 	bl	80048e2 <move_window>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006544:	e020      	b.n	8006588 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006546:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800654a:	2b00      	cmp	r3, #0
 800654c:	d11c      	bne.n	8006588 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800654e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006552:	330b      	adds	r3, #11
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <f_open+0x29e>
					res = FR_NO_FILE;
 800655e:	2304      	movs	r3, #4
 8006560:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006564:	e010      	b.n	8006588 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006566:	1dfb      	adds	r3, r7, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <f_open+0x2c0>
 8006572:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006576:	330b      	adds	r3, #11
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <f_open+0x2c0>
						res = FR_DENIED;
 8006582:	2307      	movs	r3, #7
 8006584:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006588:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800658c:	2b00      	cmp	r3, #0
 800658e:	d13d      	bne.n	800660c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006590:	1dfb      	adds	r3, r7, #7
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800659c:	1dfb      	adds	r3, r7, #7
 800659e:	1dfa      	adds	r2, r7, #7
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	f042 0220 	orr.w	r2, r2, #32
 80065a6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80065a8:	f107 0320 	add.w	r3, r7, #32
 80065ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065b0:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80065b4:	f107 030c 	add.w	r3, r7, #12
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80065c8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80065cc:	1dfb      	adds	r3, r7, #7
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	f107 0320 	add.w	r3, r7, #32
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe f810 	bl	800460c <inc_lock>
 80065ec:	4602      	mov	r2, r0
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80065f8:	f107 030c 	add.w	r3, r7, #12
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <f_open+0x344>
 8006606:	2302      	movs	r3, #2
 8006608:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800660c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006610:	2b00      	cmp	r3, #0
 8006612:	d15d      	bne.n	80066d0 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	1dfa      	adds	r2, r7, #7
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800662e:	f107 0320 	add.w	r3, r7, #32
 8006632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006636:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe ff0f 	bl	800545e <ld_clust>
 8006640:	4602      	mov	r2, r0
 8006642:	f107 030c 	add.w	r3, r7, #12
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800664c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006650:	331f      	adds	r3, #31
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	061a      	lsls	r2, r3, #24
 8006656:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800665a:	331e      	adds	r3, #30
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	4313      	orrs	r3, r2
 8006662:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006666:	321d      	adds	r2, #29
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	0212      	lsls	r2, r2, #8
 800666c:	4313      	orrs	r3, r2
 800666e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006672:	321c      	adds	r2, #28
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	431a      	orrs	r2, r3
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8006682:	f107 030c 	add.w	r3, r7, #12
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80066a6:	f107 0320 	add.w	r3, r7, #32
 80066aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80066ae:	f107 030c 	add.w	r3, r7, #12
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066c2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80066c6:	f107 030c 	add.w	r3, r7, #12
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80066d0:	f107 0320 	add.w	r3, r7, #32
 80066d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066d8:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fd fee5 	bl	80044ae <unlock_fs>
 80066e4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b08a      	sub	sp, #40	; 0x28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fd36 	bl	800617c <validate>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <f_write+0x3c>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006720:	7dfa      	ldrb	r2, [r7, #23]
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7fd fec2 	bl	80044ae <unlock_fs>
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	e1d4      	b.n	8006ad8 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00d      	beq.n	8006754 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f7fd feb1 	bl	80044ae <unlock_fs>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006752:	e1c1      	b.n	8006ad8 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d108      	bne.n	8006774 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006768:	2107      	movs	r1, #7
 800676a:	4618      	mov	r0, r3
 800676c:	f7fd fe9f 	bl	80044ae <unlock_fs>
 8006770:	2307      	movs	r3, #7
 8006772:	e1b1      	b.n	8006ad8 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006784:	429a      	cmp	r2, r3
 8006786:	f080 8182 	bcs.w	8006a8e <f_write+0x39c>
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800678e:	e17e      	b.n	8006a8e <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 813e 	bne.w	8006a1c <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80067a6:	0a5b      	lsrs	r3, r3, #9
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067b0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	4013      	ands	r3, r2
 80067ba:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80067bc:	7dbb      	ldrb	r3, [r7, #22]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d15f      	bne.n	8006882 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10f      	bne.n	80067ec <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d121      	bne.n	800681e <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fb95 	bl	8004f12 <create_chain>
 80067e8:	6278      	str	r0, [r7, #36]	; 0x24
 80067ea:	e018      	b.n	800681e <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80067fc:	4619      	mov	r1, r3
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7fe fc24 	bl	800504c <clmt_clust>
 8006804:	6278      	str	r0, [r7, #36]	; 0x24
 8006806:	e00a      	b.n	800681e <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fe fb7b 	bl	8004f12 <create_chain>
 800681c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8139 	beq.w	8006a98 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10c      	bne.n	8006846 <f_write+0x154>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800683a:	2102      	movs	r1, #2
 800683c:	4618      	mov	r0, r3
 800683e:	f7fd fe36 	bl	80044ae <unlock_fs>
 8006842:	2302      	movs	r3, #2
 8006844:	e148      	b.n	8006ad8 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d10c      	bne.n	8006868 <f_write+0x176>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800685c:	2101      	movs	r1, #1
 800685e:	4618      	mov	r0, r3
 8006860:	f7fd fe25 	bl	80044ae <unlock_fs>
 8006864:	2301      	movs	r3, #1
 8006866:	e137      	b.n	8006ad8 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <f_write+0x190>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d024      	beq.n	80068da <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006896:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80068a2:	2301      	movs	r3, #1
 80068a4:	f7fd fd40 	bl	8004328 <disk_write>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068bc:	2101      	movs	r1, #1
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fd fdf5 	bl	80044ae <unlock_fs>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e107      	b.n	8006ad8 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80068ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe f8d5 	bl	8004a98 <clust2sect>
 80068ee:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <f_write+0x21e>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006904:	2102      	movs	r1, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd fdd1 	bl	80044ae <unlock_fs>
 800690c:	2302      	movs	r3, #2
 800690e:	e0e3      	b.n	8006ad8 <f_write+0x3e6>
			sect += csect;
 8006910:	7dbb      	ldrb	r3, [r7, #22]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	0a5b      	lsrs	r3, r3, #9
 800691c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d04f      	beq.n	80069c4 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006924:	7dba      	ldrb	r2, [r7, #22]
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006930:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006934:	4293      	cmp	r3, r2
 8006936:	d908      	bls.n	800694a <f_write+0x258>
					cc = fp->fs->csize - csect;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800693e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006942:	461a      	mov	r2, r3
 8006944:	7dbb      	ldrb	r3, [r7, #22]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006950:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	f7fd fce5 	bl	8004328 <disk_write>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00c      	beq.n	800697e <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006972:	2101      	movs	r1, #1
 8006974:	4618      	mov	r0, r3
 8006976:	f7fd fd9a 	bl	80044ae <unlock_fs>
 800697a:	2301      	movs	r3, #1
 800697c:	e0ac      	b.n	8006ad8 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	429a      	cmp	r2, r3
 800698c:	d916      	bls.n	80069bc <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	025b      	lsls	r3, r3, #9
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4413      	add	r3, r2
 80069a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fd fcfd 	bl	80043a4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	025b      	lsls	r3, r3, #9
 80069c0:	623b      	str	r3, [r7, #32]
				continue;
 80069c2:	e04e      	b.n	8006a62 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d021      	beq.n	8006a14 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80069dc:	429a      	cmp	r2, r3
 80069de:	d219      	bcs.n	8006a14 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069e6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	2301      	movs	r3, #1
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	f7fd fc7a 	bl	80042e8 <disk_read>
 80069f4:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd fd4f 	bl	80044ae <unlock_fs>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e061      	b.n	8006ad8 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a26:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006a2a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006a2c:	6a3a      	ldr	r2, [r7, #32]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d901      	bls.n	8006a38 <f_write+0x346>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	69b9      	ldr	r1, [r7, #24]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fd fcaa 	bl	80043a4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	4413      	add	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	441a      	add	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	441a      	add	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f47f ae7d 	bne.w	8006790 <f_write+0x9e>
 8006a96:	e000      	b.n	8006a9a <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a98:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d905      	bls.n	8006ab6 <f_write+0x3c4>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006abc:	f043 0320 	orr.w	r3, r3, #32
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fd fcec 	bl	80044ae <unlock_fs>
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3728      	adds	r7, #40	; 0x28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fb47 	bl	800617c <validate>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 80af 	bne.w	8006c58 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80a7 	beq.w	8006c58 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d020      	beq.n	8006b5a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b1e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f7fd fbfc 	bl	8004328 <disk_write>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd fcb5 	bl	80044ae <unlock_fs>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e090      	b.n	8006c6a <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f7fd feba 	bl	80048e2 <move_window>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d16f      	bne.n	8006c58 <f_sync+0x178>
				dir = fp->dir_ptr;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006b7e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	330b      	adds	r3, #11
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	330b      	adds	r3, #11
 8006b8a:	f042 0220 	orr.w	r2, r2, #32
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	331c      	adds	r3, #28
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	0a1b      	lsrs	r3, r3, #8
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	331d      	adds	r3, #29
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006bba:	0c1a      	lsrs	r2, r3, #16
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	331e      	adds	r3, #30
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006bca:	0e1a      	lsrs	r2, r3, #24
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	331f      	adds	r3, #31
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6938      	ldr	r0, [r7, #16]
 8006bde:	f7fe fc6b 	bl	80054b8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006be2:	f7fd fae5 	bl	80041b0 <get_fattime>
 8006be6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	3316      	adds	r3, #22
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3317      	adds	r3, #23
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	0c1a      	lsrs	r2, r3, #16
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	3318      	adds	r3, #24
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	0e1a      	lsrs	r2, r3, #24
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3319      	adds	r3, #25
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3312      	adds	r3, #18
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	3313      	adds	r3, #19
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006c30:	f023 0320 	bic.w	r3, r3, #32
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fd fe75 	bl	800493e <sync_fs>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c5e:	7dfa      	ldrb	r2, [r7, #23]
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd fc23 	bl	80044ae <unlock_fs>
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff ff30 	bl	8006ae0 <f_sync>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11e      	bne.n	8006cc8 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fa76 	bl	800617c <validate>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d116      	bne.n	8006cc8 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ca0:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fd fd65 	bl	8004778 <dec_lock>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	f7fd fbf3 	bl	80044ae <unlock_fs>
#endif
		}
	}
	return res;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b088      	sub	sp, #32
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <f_opendir+0x14>
 8006ce2:	2309      	movs	r3, #9
 8006ce4:	e079      	b.n	8006dda <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f107 0318 	add.w	r3, r7, #24
 8006cec:	2200      	movs	r2, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe ff72 	bl	8005bd8 <find_volume>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8006cf8:	7ffb      	ldrb	r3, [r7, #31]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d15f      	bne.n	8006dbe <f_opendir+0xec>
		dp->fs = fs;
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f107 020c 	add.w	r2, r7, #12
 8006d0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fe fe43 	bl	80059a0 <follow_path>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8006d1e:	7ffb      	ldrb	r3, [r7, #31]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d147      	bne.n	8006db4 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d017      	beq.n	8006d5e <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d34:	330b      	adds	r3, #11
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f7fe fb87 	bl	800545e <ld_clust>
 8006d50:	4602      	mov	r2, r0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006d58:	e001      	b.n	8006d5e <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8006d5a:	2305      	movs	r3, #5
 8006d5c:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8006d5e:	7ffb      	ldrb	r3, [r7, #31]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d127      	bne.n	8006db4 <f_opendir+0xe2>
				dp->id = fs->id;
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006d70:	2100      	movs	r1, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe f99e 	bl	80050b4 <dir_sdi>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8006d7c:	7ffb      	ldrb	r3, [r7, #31]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d118      	bne.n	8006db4 <f_opendir+0xe2>
					if (dp->sclust) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00f      	beq.n	8006dac <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fd fc3c 	bl	800460c <inc_lock>
 8006d94:	4602      	mov	r2, r0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8006da6:	2312      	movs	r3, #18
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e003      	b.n	8006db4 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006db4:	7ffb      	ldrb	r3, [r7, #31]
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d101      	bne.n	8006dbe <f_opendir+0xec>
 8006dba:	2305      	movs	r3, #5
 8006dbc:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8006dbe:	7ffb      	ldrb	r3, [r7, #31]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <f_opendir+0xfa>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	7ffa      	ldrb	r2, [r7, #31]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fd fb6b 	bl	80044ae <unlock_fs>
 8006dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff f9c6 	bl	800617c <validate>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11b      	bne.n	8006e32 <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e00:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd fcb0 	bl	8004778 <dec_lock>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	68b8      	ldr	r0, [r7, #8]
 8006e2e:	f7fd fb3e 	bl	80044ae <unlock_fs>
#endif
	}
	return res;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff f998 	bl	800617c <validate>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d133      	bne.n	8006ebe <f_readdir+0x82>
		if (!fno) {
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fe f928 	bl	80050b4 <dir_sdi>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]
 8006e68:	e029      	b.n	8006ebe <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f107 0208 	add.w	r2, r7, #8
 8006e70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8006e74:	2100      	movs	r1, #0
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fe fb93 	bl	80055a2 <dir_read>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d105      	bne.n	8006e92 <f_readdir+0x56>
				dp->sect = 0;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d112      	bne.n	8006ebe <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fe fc50 	bl	8005740 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fe f99a 	bl	80051dc <dir_next>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d105      	bne.n	8006ebe <f_readdir+0x82>
					dp->sect = 0;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ec4:	7dfa      	ldrb	r2, [r7, #23]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fd faf0 	bl	80044ae <unlock_fs>
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	1d3b      	adds	r3, r7, #4
 8006ee2:	6018      	str	r0, [r3, #0]
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8006ee8:	1d39      	adds	r1, r7, #4
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fe6f 	bl	8005bd8 <find_volume>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8006f00:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d129      	bne.n	8006f5c <f_stat+0x84>
		INIT_BUF(dj);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	f107 0208 	add.w	r2, r7, #8
 8006f10:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f14:	1d3b      	adds	r3, r7, #4
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	f107 0314 	add.w	r3, r7, #20
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fd3e 	bl	80059a0 <follow_path>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 8006f2a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d114      	bne.n	8006f5c <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <f_stat+0x84>
 8006f46:	463b      	mov	r3, r7
 8006f48:	f107 0214 	add.w	r2, r7, #20
 8006f4c:	6819      	ldr	r1, [r3, #0]
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fe fbf6 	bl	8005740 <get_fileinfo>
 8006f54:	e002      	b.n	8006f5c <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8006f56:	2306      	movs	r3, #6
 8006f58:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8006f5c:	f107 0314 	add.w	r3, r7, #20
 8006f60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f64:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd fa9f 	bl	80044ae <unlock_fs>
 8006f70:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8006f90:	1d39      	adds	r1, r7, #4
 8006f92:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006f96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fe1b 	bl	8005bd8 <find_volume>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	if (res == FR_OK) {
 8006fa8:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f040 80b8 	bne.w	8007122 <f_unlink+0x1a4>
		INIT_BUF(dj);
 8006fb2:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006fb6:	f107 0208 	add.w	r2, r7, #8
 8006fba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);		/* Follow the file path */
 8006fbe:	1d3b      	adds	r3, r7, #4
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe fce9 	bl	80059a0 <follow_path>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 8006fd4:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d108      	bne.n	8006fee <f_unlink+0x70>
 8006fdc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006fe0:	2102      	movs	r1, #2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fd fa82 	bl	80044ec <chk_lock>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006fee:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f040 8095 	bne.w	8007122 <f_unlink+0x1a4>
			dir = dj.dir;
 8006ff8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006ffc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007000:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (!dir) {
 8007004:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <f_unlink+0x96>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800700c:	2306      	movs	r3, #6
 800700e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8007012:	e00a      	b.n	800702a <f_unlink+0xac>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 8007014:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007018:	330b      	adds	r3, #11
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <f_unlink+0xac>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007024:	2307      	movs	r3, #7
 8007026:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
			if (res == FR_OK) {
 800702a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d149      	bne.n	80070c6 <f_unlink+0x148>
				dclst = ld_clust(dj.fs, dir);
 8007032:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8007036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800703a:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fa0d 	bl	800545e <ld_clust>
 8007044:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8007048:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800704c:	2b00      	cmp	r3, #0
 800704e:	d03a      	beq.n	80070c6 <f_unlink+0x148>
 8007050:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007054:	330b      	adds	r3, #11
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d032      	beq.n	80070c6 <f_unlink+0x148>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 8007060:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8007064:	f107 0314 	add.w	r3, r7, #20
 8007068:	f44f 7208 	mov.w	r2, #544	; 0x220
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd f999 	bl	80043a4 <mem_cpy>
						sdj.sclust = dclst;
 8007072:	f107 0314 	add.w	r3, r7, #20
 8007076:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800707a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
						res = dir_sdi(&sdj, 2);
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	2102      	movs	r1, #2
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe f815 	bl	80050b4 <dir_sdi>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						if (res == FR_OK) {
 8007090:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8007094:	2b00      	cmp	r3, #0
 8007096:	d116      	bne.n	80070c6 <f_unlink+0x148>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8007098:	f107 0314 	add.w	r3, r7, #20
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fa7f 	bl	80055a2 <dir_read>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 80070aa:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <f_unlink+0x13a>
 80070b2:	2307      	movs	r3, #7
 80070b4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 80070b8:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d102      	bne.n	80070c6 <f_unlink+0x148>
 80070c0:	2300      	movs	r3, #0
 80070c2:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						}
					}
				}
			}
			if (res == FR_OK) {
 80070c6:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d129      	bne.n	8007122 <f_unlink+0x1a4>
				res = dir_remove(&dj);		/* Remove the directory entry */
 80070ce:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fafd 	bl	80056d2 <dir_remove>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 80070de:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10f      	bne.n	8007106 <f_unlink+0x188>
 80070e6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <f_unlink+0x188>
					res = remove_chain(dj.fs, dclst);
 80070ee:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80070f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070f6:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd feaf 	bl	8004e5e <remove_chain>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK) res = sync_fs(dj.fs);
 8007106:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <f_unlink+0x1a4>
 800710e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8007112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd fc11 	bl	800493e <sync_fs>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8007122:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8007126:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800712a:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fd f9bc 	bl	80044ae <unlock_fs>
 8007136:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
}
 800713a:	4618      	mov	r0, r3
 800713c:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 800715c:	7a5b      	ldrb	r3, [r3, #9]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	d831      	bhi.n	80071c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007164:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 8007166:	7a5b      	ldrb	r3, [r3, #9]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 800716e:	2100      	movs	r1, #0
 8007170:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 8007174:	7a5b      	ldrb	r3, [r3, #9]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007182:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 8007184:	7a5b      	ldrb	r3, [r3, #9]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 800718c:	4413      	add	r3, r2
 800718e:	79fa      	ldrb	r2, [r7, #7]
 8007190:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007192:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 8007194:	7a5b      	ldrb	r3, [r3, #9]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	b2d1      	uxtb	r1, r2
 800719c:	4a0d      	ldr	r2, [pc, #52]	; (80071d4 <FATFS_LinkDriverEx+0x90>)
 800719e:	7251      	strb	r1, [r2, #9]
 80071a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80071a2:	7dbb      	ldrb	r3, [r7, #22]
 80071a4:	3330      	adds	r3, #48	; 0x30
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	3301      	adds	r3, #1
 80071b0:	223a      	movs	r2, #58	; 0x3a
 80071b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3302      	adds	r3, #2
 80071b8:	222f      	movs	r2, #47	; 0x2f
 80071ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3303      	adds	r3, #3
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr
 80071d4:	20000490 	.word	0x20000490

080071d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071e2:	2200      	movs	r2, #0
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff ffac 	bl	8007144 <FATFS_LinkDriverEx>
 80071ec:	4603      	mov	r3, r0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	4603      	mov	r3, r0
 80071fe:	6039      	str	r1, [r7, #0]
 8007200:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800720a:	f107 030c 	add.w	r3, r7, #12
 800720e:	2101      	movs	r1, #1
 8007210:	4618      	mov	r0, r3
 8007212:	f000 f84d 	bl	80072b0 <osSemaphoreCreate>
 8007216:	4602      	mov	r2, r0
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	617b      	str	r3, [r7, #20]
  
  return ret;
 800722c:	697b      	ldr	r3, [r7, #20]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8ee 	bl	8007420 <osSemaphoreDelete>
  return 1;
 8007244:	2301      	movs	r3, #1
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800725a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f85a 	bl	8007318 <osSemaphoreWait>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <ff_req_grant+0x20>
  {
    ret = 1;
 800726a:	2301      	movs	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800726e:	68fb      	ldr	r3, [r7, #12]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f897 	bl	80073b4 <osSemaphoreRelease>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007294:	f3ef 8305 	mrs	r3, IPSR
 8007298:	607b      	str	r3, [r7, #4]
  return(result);
 800729a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf14      	ite	ne
 80072a0:	2301      	movne	r3, #1
 80072a2:	2300      	moveq	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d10b      	bne.n	80072e0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	2303      	movs	r3, #3
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	2001      	movs	r0, #1
 80072d8:	f000 f9cc 	bl	8007674 <xQueueGenericCreateStatic>
 80072dc:	4603      	mov	r3, r0
 80072de:	e016      	b.n	800730e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e014      	b.n	800730e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d110      	bne.n	800730c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80072ea:	2203      	movs	r2, #3
 80072ec:	2100      	movs	r1, #0
 80072ee:	2001      	movs	r0, #1
 80072f0:	f000 fa32 	bl	8007758 <xQueueGenericCreate>
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <osSemaphoreCreate+0x58>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fa84 	bl	8007810 <xQueueGenericSend>
      return sema;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	e000      	b.n	800730e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800730c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800732c:	2380      	movs	r3, #128	; 0x80
 800732e:	e03a      	b.n	80073a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d103      	bne.n	8007344 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800733c:	f04f 33ff 	mov.w	r3, #4294967295
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e009      	b.n	8007358 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <osSemaphoreWait+0x40>
      ticks = 1;
 8007354:	2301      	movs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007358:	f7ff ff99 	bl	800728e <inHandlerMode>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d017      	beq.n	8007392 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	461a      	mov	r2, r3
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fcdc 	bl	8007d28 <xQueueReceiveFromISR>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d001      	beq.n	800737a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007376:	23ff      	movs	r3, #255	; 0xff
 8007378:	e015      	b.n	80073a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d011      	beq.n	80073a4 <osSemaphoreWait+0x8c>
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <osSemaphoreWait+0x98>)
 8007382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	e008      	b.n	80073a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fbbf 	bl	8007b18 <xQueueSemaphoreTake>
 800739a:	4603      	mov	r3, r0
 800739c:	2b01      	cmp	r3, #1
 800739e:	d001      	beq.n	80073a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80073a0:	23ff      	movs	r3, #255	; 0xff
 80073a2:	e000      	b.n	80073a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80073c4:	f7ff ff63 	bl	800728e <inHandlerMode>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb15 	bl	8007a04 <xQueueGiveFromISR>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d001      	beq.n	80073e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80073e0:	23ff      	movs	r3, #255	; 0xff
 80073e2:	e017      	b.n	8007414 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d013      	beq.n	8007412 <osSemaphoreRelease+0x5e>
 80073ea:	4b0c      	ldr	r3, [pc, #48]	; (800741c <osSemaphoreRelease+0x68>)
 80073ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	e00a      	b.n	8007412 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80073fc:	2300      	movs	r3, #0
 80073fe:	2200      	movs	r2, #0
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa04 	bl	8007810 <xQueueGenericSend>
 8007408:	4603      	mov	r3, r0
 800740a:	2b01      	cmp	r3, #1
 800740c:	d001      	beq.n	8007412 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800740e:	23ff      	movs	r3, #255	; 0xff
 8007410:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007412:	68fb      	ldr	r3, [r7, #12]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	e000ed04 	.word	0xe000ed04

08007420 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007428:	f7ff ff31 	bl	800728e <inHandlerMode>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007432:	2382      	movs	r3, #130	; 0x82
 8007434:	e003      	b.n	800743e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fcf3 	bl	8007e22 <vQueueDelete>

  return osOK; 
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f103 0208 	add.w	r2, r3, #8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f04f 32ff 	mov.w	r2, #4294967295
 800745e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f103 0208 	add.w	r2, r3, #8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f103 0208 	add.w	r2, r3, #8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d103      	bne.n	8007502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e00c      	b.n	800751c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3308      	adds	r3, #8
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e002      	b.n	8007510 <vListInsert+0x2e>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	d2f6      	bcs.n	800750a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6892      	ldr	r2, [r2, #8]
 8007568:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6852      	ldr	r2, [r2, #4]
 8007572:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	429a      	cmp	r2, r3
 800757c:	d103      	bne.n	8007586 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	1e5a      	subs	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d109      	bne.n	80075cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	e7fe      	b.n	80075ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80075cc:	f001 fe7c 	bl	80092c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fc:	3b01      	subs	r3, #1
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	441a      	add	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	22ff      	movs	r2, #255	; 0xff
 8007610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	22ff      	movs	r2, #255	; 0xff
 8007618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d114      	bne.n	800764c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01a      	beq.n	8007660 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3310      	adds	r3, #16
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f964 	bl	80088fc <xTaskRemoveFromEventList>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d012      	beq.n	8007660 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <xQueueGenericReset+0xcc>)
 800763c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	e009      	b.n	8007660 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3310      	adds	r3, #16
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fef8 	bl	8007446 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3324      	adds	r3, #36	; 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fef3 	bl	8007446 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007660:	f001 fe60 	bl	8009324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007664:	2301      	movs	r3, #1
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08e      	sub	sp, #56	; 0x38
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d109      	bne.n	800769c <xQueueGenericCreateStatic+0x28>
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
 800769a:	e7fe      	b.n	800769a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <xQueueGenericCreateStatic+0x42>
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
 80076b4:	e7fe      	b.n	80076b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <xQueueGenericCreateStatic+0x4e>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <xQueueGenericCreateStatic+0x52>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <xQueueGenericCreateStatic+0x54>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <xQueueGenericCreateStatic+0x6c>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	623b      	str	r3, [r7, #32]
 80076de:	e7fe      	b.n	80076de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <xQueueGenericCreateStatic+0x78>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <xQueueGenericCreateStatic+0x7c>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <xQueueGenericCreateStatic+0x7e>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <xQueueGenericCreateStatic+0x96>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800770a:	2348      	movs	r3, #72	; 0x48
 800770c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b48      	cmp	r3, #72	; 0x48
 8007712:	d009      	beq.n	8007728 <xQueueGenericCreateStatic+0xb4>
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	e7fe      	b.n	8007726 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00d      	beq.n	800774e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800773a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f842 	bl	80077d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007750:	4618      	mov	r0, r3
 8007752:	3730      	adds	r7, #48	; 0x30
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <xQueueGenericCreate+0x28>
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	e7fe      	b.n	800777e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e004      	b.n	8007796 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3348      	adds	r3, #72	; 0x48
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fe8a 	bl	80094b4 <pvPortMalloc>
 80077a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	3348      	adds	r3, #72	; 0x48
 80077ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077b6:	79fa      	ldrb	r2, [r7, #7]
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f805 	bl	80077d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077c8:	69bb      	ldr	r3, [r7, #24]
	}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e002      	b.n	80077f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007800:	2101      	movs	r1, #1
 8007802:	69b8      	ldr	r0, [r7, #24]
 8007804:	f7ff fece 	bl	80075a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	; 0x38
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800781e:	2300      	movs	r3, #0
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <xQueueGenericSend+0x30>
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
 800783e:	e7fe      	b.n	800783e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <xQueueGenericSend+0x3e>
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <xQueueGenericSend+0x42>
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <xQueueGenericSend+0x44>
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <xQueueGenericSend+0x5c>
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
 800786a:	e7fe      	b.n	800786a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d103      	bne.n	800787a <xQueueGenericSend+0x6a>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <xQueueGenericSend+0x6e>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <xQueueGenericSend+0x70>
 800787e:	2300      	movs	r3, #0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <xQueueGenericSend+0x88>
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	623b      	str	r3, [r7, #32]
 8007896:	e7fe      	b.n	8007896 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007898:	f001 f9ea 	bl	8008c70 <xTaskGetSchedulerState>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d102      	bne.n	80078a8 <xQueueGenericSend+0x98>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <xQueueGenericSend+0x9c>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <xQueueGenericSend+0x9e>
 80078ac:	2300      	movs	r3, #0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <xQueueGenericSend+0xb6>
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e7fe      	b.n	80078c4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078c6:	f001 fcff 	bl	80092c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d302      	bcc.n	80078dc <xQueueGenericSend+0xcc>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d129      	bne.n	8007930 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078e2:	f000 fad7 	bl	8007e94 <prvCopyDataToQueue>
 80078e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f801 	bl	80088fc <xTaskRemoveFromEventList>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d013      	beq.n	8007928 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007900:	4b3f      	ldr	r3, [pc, #252]	; (8007a00 <xQueueGenericSend+0x1f0>)
 8007902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	e00a      	b.n	8007928 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007918:	4b39      	ldr	r3, [pc, #228]	; (8007a00 <xQueueGenericSend+0x1f0>)
 800791a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007928:	f001 fcfc 	bl	8009324 <vPortExitCritical>
				return pdPASS;
 800792c:	2301      	movs	r3, #1
 800792e:	e063      	b.n	80079f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007936:	f001 fcf5 	bl	8009324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800793a:	2300      	movs	r3, #0
 800793c:	e05c      	b.n	80079f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	2b00      	cmp	r3, #0
 8007942:	d106      	bne.n	8007952 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4618      	mov	r0, r3
 800794a:	f001 f839 	bl	80089c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800794e:	2301      	movs	r3, #1
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007952:	f001 fce7 	bl	8009324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007956:	f000 fded 	bl	8008534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800795a:	f001 fcb5 	bl	80092c8 <vPortEnterCritical>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007964:	b25b      	sxtb	r3, r3
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d103      	bne.n	8007974 <xQueueGenericSend+0x164>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797a:	b25b      	sxtb	r3, r3
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d103      	bne.n	800798a <xQueueGenericSend+0x17a>
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800798a:	f001 fccb 	bl	8009324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800798e:	1d3a      	adds	r2, r7, #4
 8007990:	f107 0314 	add.w	r3, r7, #20
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f828 	bl	80089ec <xTaskCheckForTimeOut>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d124      	bne.n	80079ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a4:	f000 fb6e 	bl	8008084 <prvIsQueueFull>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d018      	beq.n	80079e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	3310      	adds	r3, #16
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 ff7c 	bl	80088b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079be:	f000 faf9 	bl	8007fb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079c2:	f000 fdc5 	bl	8008550 <xTaskResumeAll>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f af7c 	bne.w	80078c6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80079ce:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <xQueueGenericSend+0x1f0>)
 80079d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	e772      	b.n	80078c6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e2:	f000 fae7 	bl	8007fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079e6:	f000 fdb3 	bl	8008550 <xTaskResumeAll>
 80079ea:	e76c      	b.n	80078c6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ee:	f000 fae1 	bl	8007fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079f2:	f000 fdad 	bl	8008550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079f6:	2300      	movs	r3, #0
		}
	}
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3738      	adds	r7, #56	; 0x38
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08e      	sub	sp, #56	; 0x38
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d109      	bne.n	8007a2c <xQueueGiveFromISR+0x28>
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	623b      	str	r3, [r7, #32]
 8007a2a:	e7fe      	b.n	8007a2a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <xQueueGiveFromISR+0x44>
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	e7fe      	b.n	8007a46 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <xQueueGiveFromISR+0x54>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <xQueueGiveFromISR+0x58>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <xQueueGiveFromISR+0x5a>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <xQueueGiveFromISR+0x72>
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61bb      	str	r3, [r7, #24]
 8007a74:	e7fe      	b.n	8007a74 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a76:	f001 fce1 	bl	800943c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	617a      	str	r2, [r7, #20]
 8007a90:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d22b      	bcs.n	8007afe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d112      	bne.n	8007ae8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	3324      	adds	r3, #36	; 0x24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 ff14 	bl	80088fc <xTaskRemoveFromEventList>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e007      	b.n	8007af8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aec:	3301      	adds	r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	b25a      	sxtb	r2, r3
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007af8:	2301      	movs	r3, #1
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
 8007afc:	e001      	b.n	8007b02 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3738      	adds	r7, #56	; 0x38
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08e      	sub	sp, #56	; 0x38
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	623b      	str	r3, [r7, #32]
 8007b46:	e7fe      	b.n	8007b46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <xQueueSemaphoreTake+0x4c>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	e7fe      	b.n	8007b62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b64:	f001 f884 	bl	8008c70 <xTaskGetSchedulerState>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d102      	bne.n	8007b74 <xQueueSemaphoreTake+0x5c>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <xQueueSemaphoreTake+0x60>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <xQueueSemaphoreTake+0x62>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <xQueueSemaphoreTake+0x7a>
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e7fe      	b.n	8007b90 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b92:	f001 fb99 	bl	80092c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d024      	beq.n	8007bec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	1e5a      	subs	r2, r3, #1
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007bb2:	f001 fa23 	bl	8008ffc <pvTaskIncrementMutexHeldCount>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00f      	beq.n	8007be4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	3310      	adds	r3, #16
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fe97 	bl	80088fc <xTaskRemoveFromEventList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d007      	beq.n	8007be4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b53      	ldr	r3, [pc, #332]	; (8007d24 <xQueueSemaphoreTake+0x20c>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007be4:	f001 fb9e 	bl	8009324 <vPortExitCritical>
				return pdPASS;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e096      	b.n	8007d1a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d110      	bne.n	8007c14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <xQueueSemaphoreTake+0xf4>
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e7fe      	b.n	8007c0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c0c:	f001 fb8a 	bl	8009324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e082      	b.n	8007d1a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c1a:	f107 030c 	add.w	r3, r7, #12
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fece 	bl	80089c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c28:	f001 fb7c 	bl	8009324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c2c:	f000 fc82 	bl	8008534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c30:	f001 fb4a 	bl	80092c8 <vPortEnterCritical>
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d103      	bne.n	8007c4a <xQueueSemaphoreTake+0x132>
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c50:	b25b      	sxtb	r3, r3
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d103      	bne.n	8007c60 <xQueueSemaphoreTake+0x148>
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c60:	f001 fb60 	bl	8009324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c64:	463a      	mov	r2, r7
 8007c66:	f107 030c 	add.w	r3, r7, #12
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 febd 	bl	80089ec <xTaskCheckForTimeOut>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d132      	bne.n	8007cde <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7a:	f000 f9ed 	bl	8008058 <prvIsQueueEmpty>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d026      	beq.n	8007cd2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007c8c:	f001 fb1c 	bl	80092c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f809 	bl	8008cac <xTaskPriorityInherit>
 8007c9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007c9c:	f001 fb42 	bl	8009324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	3324      	adds	r3, #36	; 0x24
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fe03 	bl	80088b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cb0:	f000 f980 	bl	8007fb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb4:	f000 fc4c 	bl	8008550 <xTaskResumeAll>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f47f af69 	bne.w	8007b92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007cc0:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <xQueueSemaphoreTake+0x20c>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	e75f      	b.n	8007b92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cd4:	f000 f96e 	bl	8007fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd8:	f000 fc3a 	bl	8008550 <xTaskResumeAll>
 8007cdc:	e759      	b.n	8007b92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ce0:	f000 f968 	bl	8007fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce4:	f000 fc34 	bl	8008550 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cea:	f000 f9b5 	bl	8008058 <prvIsQueueEmpty>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f43f af4e 	beq.w	8007b92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00d      	beq.n	8007d18 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007cfc:	f001 fae4 	bl	80092c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d02:	f000 f8b0 	bl	8007e66 <prvGetDisinheritPriorityAfterTimeout>
 8007d06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f8d6 	bl	8008ec0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d14:	f001 fb06 	bl	8009324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3738      	adds	r7, #56	; 0x38
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08e      	sub	sp, #56	; 0x38
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <xQueueReceiveFromISR+0x2a>
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	623b      	str	r3, [r7, #32]
 8007d50:	e7fe      	b.n	8007d50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <xQueueReceiveFromISR+0x38>
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <xQueueReceiveFromISR+0x3c>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <xQueueReceiveFromISR+0x3e>
 8007d64:	2300      	movs	r3, #0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <xQueueReceiveFromISR+0x56>
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	e7fe      	b.n	8007d7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d7e:	f001 fb5d 	bl	800943c <vPortValidateInterruptPriority>
	__asm volatile
 8007d82:	f3ef 8211 	mrs	r2, BASEPRI
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	61ba      	str	r2, [r7, #24]
 8007d98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02f      	beq.n	8007e0a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007db8:	f000 f8d6 	bl	8007f68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	1e5a      	subs	r2, r3, #1
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dcc:	d112      	bne.n	8007df4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d016      	beq.n	8007e04 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	3310      	adds	r3, #16
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fd8e 	bl	80088fc <xTaskRemoveFromEventList>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00e      	beq.n	8007e04 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	e007      	b.n	8007e04 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df8:	3301      	adds	r3, #1
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	b25a      	sxtb	r2, r3
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e04:	2301      	movs	r3, #1
 8007e06:	637b      	str	r3, [r7, #52]	; 0x34
 8007e08:	e001      	b.n	8007e0e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3738      	adds	r7, #56	; 0x38
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <vQueueDelete+0x26>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	60bb      	str	r3, [r7, #8]
 8007e46:	e7fe      	b.n	8007e46 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f933 	bl	80080b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d102      	bne.n	8007e5e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fbed 	bl	8009638 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1c3 0307 	rsb	r3, r3, #7
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	e001      	b.n	8007e88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e88:	68fb      	ldr	r3, [r7, #12]
	}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10d      	bne.n	8007ece <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d14d      	bne.n	8007f56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 ff7a 	bl	8008db8 <xTaskPriorityDisinherit>
 8007ec4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	e043      	b.n	8007f56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d119      	bne.n	8007f08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6898      	ldr	r0, [r3, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	461a      	mov	r2, r3
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	f001 fce6 	bl	80098b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	441a      	add	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d32b      	bcc.n	8007f56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	609a      	str	r2, [r3, #8]
 8007f06:	e026      	b.n	8007f56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	68d8      	ldr	r0, [r3, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	461a      	mov	r2, r3
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	f001 fccc 	bl	80098b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	425b      	negs	r3, r3
 8007f22:	441a      	add	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d207      	bcs.n	8007f44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	425b      	negs	r3, r3
 8007f3e:	441a      	add	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d105      	bne.n	8007f56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f5e:	697b      	ldr	r3, [r7, #20]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d018      	beq.n	8007fac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	441a      	add	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d303      	bcc.n	8007f9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68d9      	ldr	r1, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6838      	ldr	r0, [r7, #0]
 8007fa8:	f001 fc82 	bl	80098b0 <memcpy>
	}
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fbc:	f001 f984 	bl	80092c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fc8:	e011      	b.n	8007fee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d012      	beq.n	8007ff8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fc90 	bl	80088fc <xTaskRemoveFromEventList>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fe2:	f000 fd63 	bl	8008aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	dce9      	bgt.n	8007fca <prvUnlockQueue+0x16>
 8007ff6:	e000      	b.n	8007ffa <prvUnlockQueue+0x46>
					break;
 8007ff8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008002:	f001 f98f 	bl	8009324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008006:	f001 f95f 	bl	80092c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008010:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008012:	e011      	b.n	8008038 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d012      	beq.n	8008042 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3310      	adds	r3, #16
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fc6b 	bl	80088fc <xTaskRemoveFromEventList>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800802c:	f000 fd3e 	bl	8008aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	3b01      	subs	r3, #1
 8008034:	b2db      	uxtb	r3, r3
 8008036:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dce9      	bgt.n	8008014 <prvUnlockQueue+0x60>
 8008040:	e000      	b.n	8008044 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008042:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	22ff      	movs	r2, #255	; 0xff
 8008048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800804c:	f001 f96a 	bl	8009324 <vPortExitCritical>
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008060:	f001 f932 	bl	80092c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800806c:	2301      	movs	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e001      	b.n	8008076 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008076:	f001 f955 	bl	8009324 <vPortExitCritical>

	return xReturn;
 800807a:	68fb      	ldr	r3, [r7, #12]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800808c:	f001 f91c 	bl	80092c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	429a      	cmp	r2, r3
 800809a:	d102      	bne.n	80080a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800809c:	2301      	movs	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e001      	b.n	80080a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080a6:	f001 f93d 	bl	8009324 <vPortExitCritical>

	return xReturn;
 80080aa:	68fb      	ldr	r3, [r7, #12]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e016      	b.n	80080f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80080c2:	4a0f      	ldr	r2, [pc, #60]	; (8008100 <vQueueUnregisterQueue+0x4c>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4413      	add	r3, r2
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d10b      	bne.n	80080ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80080d2:	4a0b      	ldr	r2, [pc, #44]	; (8008100 <vQueueUnregisterQueue+0x4c>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2100      	movs	r1, #0
 80080d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <vQueueUnregisterQueue+0x4c>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4413      	add	r3, r2
 80080e4:	2200      	movs	r2, #0
 80080e6:	605a      	str	r2, [r3, #4]
				break;
 80080e8:	e005      	b.n	80080f6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	d9e5      	bls.n	80080c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr
 8008100:	20001c24 	.word	0x20001c24

08008104 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08e      	sub	sp, #56	; 0x38
 8008108:	af04      	add	r7, sp, #16
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008114:	2b00      	cmp	r3, #0
 8008116:	d109      	bne.n	800812c <xTaskCreateStatic+0x28>
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	623b      	str	r3, [r7, #32]
 800812a:	e7fe      	b.n	800812a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <xTaskCreateStatic+0x42>
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e7fe      	b.n	8008144 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008146:	2354      	movs	r3, #84	; 0x54
 8008148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b54      	cmp	r3, #84	; 0x54
 800814e:	d009      	beq.n	8008164 <xTaskCreateStatic+0x60>
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	e7fe      	b.n	8008162 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01e      	beq.n	80081a8 <xTaskCreateStatic+0xa4>
 800816a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01b      	beq.n	80081a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008178:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	2202      	movs	r2, #2
 800817e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008182:	2300      	movs	r3, #0
 8008184:	9303      	str	r3, [sp, #12]
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	9302      	str	r3, [sp, #8]
 800818a:	f107 0314 	add.w	r3, r7, #20
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f850 	bl	8008240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081a2:	f000 f8cb 	bl	800833c <prvAddNewTaskToReadyList>
 80081a6:	e001      	b.n	80081ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081ac:	697b      	ldr	r3, [r7, #20]
	}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b08c      	sub	sp, #48	; 0x30
 80081ba:	af04      	add	r7, sp, #16
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	603b      	str	r3, [r7, #0]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 f972 	bl	80094b4 <pvPortMalloc>
 80081d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00e      	beq.n	80081f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80081d8:	2054      	movs	r0, #84	; 0x54
 80081da:	f001 f96b 	bl	80094b4 <pvPortMalloc>
 80081de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30
 80081ec:	e005      	b.n	80081fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	f001 fa22 	bl	8009638 <vPortFree>
 80081f4:	e001      	b.n	80081fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d017      	beq.n	8008230 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008208:	88fa      	ldrh	r2, [r7, #6]
 800820a:	2300      	movs	r3, #0
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f80e 	bl	8008240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008224:	69f8      	ldr	r0, [r7, #28]
 8008226:	f000 f889 	bl	800833c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800822a:	2301      	movs	r3, #1
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	e002      	b.n	8008236 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008230:	f04f 33ff 	mov.w	r3, #4294967295
 8008234:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008236:	69bb      	ldr	r3, [r7, #24]
	}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008258:	3b01      	subs	r3, #1
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <prvInitialiseNewTask+0x46>
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e7fe      	b.n	8008284 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008286:	2300      	movs	r3, #0
 8008288:	61fb      	str	r3, [r7, #28]
 800828a:	e012      	b.n	80082b2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	7819      	ldrb	r1, [r3, #0]
 8008294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	3334      	adds	r3, #52	; 0x34
 800829c:	460a      	mov	r2, r1
 800829e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d006      	beq.n	80082ba <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	3301      	adds	r3, #1
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	2b0f      	cmp	r3, #15
 80082b6:	d9e9      	bls.n	800828c <prvInitialiseNewTask+0x4c>
 80082b8:	e000      	b.n	80082bc <prvInitialiseNewTask+0x7c>
		{
			break;
 80082ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	2b06      	cmp	r3, #6
 80082c8:	d901      	bls.n	80082ce <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082ca:	2306      	movs	r3, #6
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	2200      	movs	r2, #0
 80082de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	3304      	adds	r3, #4
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff f8cd 	bl	8007484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	3318      	adds	r3, #24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff f8c8 	bl	8007484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	f1c3 0207 	rsb	r2, r3, #7
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008308:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	2200      	movs	r2, #0
 800830e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	69b8      	ldr	r0, [r7, #24]
 800831e:	f000 fee7 	bl	80090f0 <pxPortInitialiseStack>
 8008322:	4602      	mov	r2, r0
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008332:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008334:	bf00      	nop
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008344:	f000 ffc0 	bl	80092c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008348:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <prvAddNewTaskToReadyList+0xb8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	4a29      	ldr	r2, [pc, #164]	; (80083f4 <prvAddNewTaskToReadyList+0xb8>)
 8008350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008352:	4b29      	ldr	r3, [pc, #164]	; (80083f8 <prvAddNewTaskToReadyList+0xbc>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800835a:	4a27      	ldr	r2, [pc, #156]	; (80083f8 <prvAddNewTaskToReadyList+0xbc>)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008360:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <prvAddNewTaskToReadyList+0xb8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d110      	bne.n	800838a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008368:	f000 fbc4 	bl	8008af4 <prvInitialiseTaskLists>
 800836c:	e00d      	b.n	800838a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800836e:	4b23      	ldr	r3, [pc, #140]	; (80083fc <prvAddNewTaskToReadyList+0xc0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008376:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <prvAddNewTaskToReadyList+0xbc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	429a      	cmp	r2, r3
 8008382:	d802      	bhi.n	800838a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008384:	4a1c      	ldr	r2, [pc, #112]	; (80083f8 <prvAddNewTaskToReadyList+0xbc>)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800838a:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <prvAddNewTaskToReadyList+0xc4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3301      	adds	r3, #1
 8008390:	4a1b      	ldr	r2, [pc, #108]	; (8008400 <prvAddNewTaskToReadyList+0xc4>)
 8008392:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	2201      	movs	r2, #1
 800839a:	409a      	lsls	r2, r3
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	4a18      	ldr	r2, [pc, #96]	; (8008404 <prvAddNewTaskToReadyList+0xc8>)
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a15      	ldr	r2, [pc, #84]	; (8008408 <prvAddNewTaskToReadyList+0xcc>)
 80083b4:	441a      	add	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f7ff f86d 	bl	800749c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083c2:	f000 ffaf 	bl	8009324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083c6:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <prvAddNewTaskToReadyList+0xc0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00e      	beq.n	80083ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083ce:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <prvAddNewTaskToReadyList+0xbc>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	429a      	cmp	r2, r3
 80083da:	d207      	bcs.n	80083ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <prvAddNewTaskToReadyList+0xd0>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	2000059c 	.word	0x2000059c
 80083f8:	2000049c 	.word	0x2000049c
 80083fc:	200005a8 	.word	0x200005a8
 8008400:	200005b8 	.word	0x200005b8
 8008404:	200005a4 	.word	0x200005a4
 8008408:	200004a0 	.word	0x200004a0
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d016      	beq.n	8008450 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008422:	4b13      	ldr	r3, [pc, #76]	; (8008470 <vTaskDelay+0x60>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <vTaskDelay+0x2e>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	60bb      	str	r3, [r7, #8]
 800843c:	e7fe      	b.n	800843c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800843e:	f000 f879 	bl	8008534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008442:	2100      	movs	r1, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fded 	bl	8009024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800844a:	f000 f881 	bl	8008550 <xTaskResumeAll>
 800844e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d107      	bne.n	8008466 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008456:	4b07      	ldr	r3, [pc, #28]	; (8008474 <vTaskDelay+0x64>)
 8008458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	200005c4 	.word	0x200005c4
 8008474:	e000ed04 	.word	0xe000ed04

08008478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008486:	463a      	mov	r2, r7
 8008488:	1d39      	adds	r1, r7, #4
 800848a:	f107 0308 	add.w	r3, r7, #8
 800848e:	4618      	mov	r0, r3
 8008490:	f7f9 f9f2 	bl	8001878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	9202      	str	r2, [sp, #8]
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	2300      	movs	r3, #0
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	460a      	mov	r2, r1
 80084a6:	491d      	ldr	r1, [pc, #116]	; (800851c <vTaskStartScheduler+0xa4>)
 80084a8:	481d      	ldr	r0, [pc, #116]	; (8008520 <vTaskStartScheduler+0xa8>)
 80084aa:	f7ff fe2b 	bl	8008104 <xTaskCreateStatic>
 80084ae:	4602      	mov	r2, r0
 80084b0:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <vTaskStartScheduler+0xac>)
 80084b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084b4:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <vTaskStartScheduler+0xac>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084bc:	2301      	movs	r3, #1
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e001      	b.n	80084c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d115      	bne.n	80084f8 <vTaskStartScheduler+0x80>
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <vTaskStartScheduler+0xb0>)
 80084e0:	f04f 32ff 	mov.w	r2, #4294967295
 80084e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <vTaskStartScheduler+0xb4>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80084ec:	4b10      	ldr	r3, [pc, #64]	; (8008530 <vTaskStartScheduler+0xb8>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084f2:	f000 fe79 	bl	80091e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084f6:	e00d      	b.n	8008514 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d109      	bne.n	8008514 <vTaskStartScheduler+0x9c>
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e7fe      	b.n	8008512 <vTaskStartScheduler+0x9a>
}
 8008514:	bf00      	nop
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	0800bdec 	.word	0x0800bdec
 8008520:	08008ac5 	.word	0x08008ac5
 8008524:	200005c0 	.word	0x200005c0
 8008528:	200005bc 	.word	0x200005bc
 800852c:	200005a8 	.word	0x200005a8
 8008530:	200005a0 	.word	0x200005a0

08008534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008538:	4b04      	ldr	r3, [pc, #16]	; (800854c <vTaskSuspendAll+0x18>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3301      	adds	r3, #1
 800853e:	4a03      	ldr	r2, [pc, #12]	; (800854c <vTaskSuspendAll+0x18>)
 8008540:	6013      	str	r3, [r2, #0]
}
 8008542:	bf00      	nop
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	200005c4 	.word	0x200005c4

08008550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800855a:	2300      	movs	r3, #0
 800855c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800855e:	4b41      	ldr	r3, [pc, #260]	; (8008664 <xTaskResumeAll+0x114>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <xTaskResumeAll+0x2a>
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	e7fe      	b.n	8008578 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800857a:	f000 fea5 	bl	80092c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800857e:	4b39      	ldr	r3, [pc, #228]	; (8008664 <xTaskResumeAll+0x114>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3b01      	subs	r3, #1
 8008584:	4a37      	ldr	r2, [pc, #220]	; (8008664 <xTaskResumeAll+0x114>)
 8008586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008588:	4b36      	ldr	r3, [pc, #216]	; (8008664 <xTaskResumeAll+0x114>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d161      	bne.n	8008654 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008590:	4b35      	ldr	r3, [pc, #212]	; (8008668 <xTaskResumeAll+0x118>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05d      	beq.n	8008654 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008598:	e02e      	b.n	80085f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800859a:	4b34      	ldr	r3, [pc, #208]	; (800866c <xTaskResumeAll+0x11c>)
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3318      	adds	r3, #24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe ffd3 	bl	8007552 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe ffce 	bl	8007552 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	2201      	movs	r2, #1
 80085bc:	409a      	lsls	r2, r3
 80085be:	4b2c      	ldr	r3, [pc, #176]	; (8008670 <xTaskResumeAll+0x120>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	4a2a      	ldr	r2, [pc, #168]	; (8008670 <xTaskResumeAll+0x120>)
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4a27      	ldr	r2, [pc, #156]	; (8008674 <xTaskResumeAll+0x124>)
 80085d6:	441a      	add	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fe ff5c 	bl	800749c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4b23      	ldr	r3, [pc, #140]	; (8008678 <xTaskResumeAll+0x128>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d302      	bcc.n	80085f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80085f2:	4b22      	ldr	r3, [pc, #136]	; (800867c <xTaskResumeAll+0x12c>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085f8:	4b1c      	ldr	r3, [pc, #112]	; (800866c <xTaskResumeAll+0x11c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1cc      	bne.n	800859a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008606:	f000 fb0f 	bl	8008c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800860a:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <xTaskResumeAll+0x130>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d010      	beq.n	8008638 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008616:	f000 f837 	bl	8008688 <xTaskIncrementTick>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008620:	4b16      	ldr	r3, [pc, #88]	; (800867c <xTaskResumeAll+0x12c>)
 8008622:	2201      	movs	r2, #1
 8008624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3b01      	subs	r3, #1
 800862a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f1      	bne.n	8008616 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008632:	4b13      	ldr	r3, [pc, #76]	; (8008680 <xTaskResumeAll+0x130>)
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008638:	4b10      	ldr	r3, [pc, #64]	; (800867c <xTaskResumeAll+0x12c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d009      	beq.n	8008654 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <xTaskResumeAll+0x134>)
 8008646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008654:	f000 fe66 	bl	8009324 <vPortExitCritical>

	return xAlreadyYielded;
 8008658:	68bb      	ldr	r3, [r7, #8]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200005c4 	.word	0x200005c4
 8008668:	2000059c 	.word	0x2000059c
 800866c:	2000055c 	.word	0x2000055c
 8008670:	200005a4 	.word	0x200005a4
 8008674:	200004a0 	.word	0x200004a0
 8008678:	2000049c 	.word	0x2000049c
 800867c:	200005b0 	.word	0x200005b0
 8008680:	200005ac 	.word	0x200005ac
 8008684:	e000ed04 	.word	0xe000ed04

08008688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008692:	4b50      	ldr	r3, [pc, #320]	; (80087d4 <xTaskIncrementTick+0x14c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 808c 	bne.w	80087b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800869c:	4b4e      	ldr	r3, [pc, #312]	; (80087d8 <xTaskIncrementTick+0x150>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086a4:	4a4c      	ldr	r2, [pc, #304]	; (80087d8 <xTaskIncrementTick+0x150>)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11f      	bne.n	80086f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80086b0:	4b4a      	ldr	r3, [pc, #296]	; (80087dc <xTaskIncrementTick+0x154>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <xTaskIncrementTick+0x46>
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	e7fe      	b.n	80086cc <xTaskIncrementTick+0x44>
 80086ce:	4b43      	ldr	r3, [pc, #268]	; (80087dc <xTaskIncrementTick+0x154>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	4b42      	ldr	r3, [pc, #264]	; (80087e0 <xTaskIncrementTick+0x158>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a40      	ldr	r2, [pc, #256]	; (80087dc <xTaskIncrementTick+0x154>)
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	4a40      	ldr	r2, [pc, #256]	; (80087e0 <xTaskIncrementTick+0x158>)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	4b40      	ldr	r3, [pc, #256]	; (80087e4 <xTaskIncrementTick+0x15c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3301      	adds	r3, #1
 80086e8:	4a3e      	ldr	r2, [pc, #248]	; (80087e4 <xTaskIncrementTick+0x15c>)
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	f000 fa9c 	bl	8008c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086f0:	4b3d      	ldr	r3, [pc, #244]	; (80087e8 <xTaskIncrementTick+0x160>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d34d      	bcc.n	8008796 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086fa:	4b38      	ldr	r3, [pc, #224]	; (80087dc <xTaskIncrementTick+0x154>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <xTaskIncrementTick+0x80>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <xTaskIncrementTick+0x82>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800870e:	4b36      	ldr	r3, [pc, #216]	; (80087e8 <xTaskIncrementTick+0x160>)
 8008710:	f04f 32ff 	mov.w	r2, #4294967295
 8008714:	601a      	str	r2, [r3, #0]
					break;
 8008716:	e03e      	b.n	8008796 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008718:	4b30      	ldr	r3, [pc, #192]	; (80087dc <xTaskIncrementTick+0x154>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d203      	bcs.n	8008738 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008730:	4a2d      	ldr	r2, [pc, #180]	; (80087e8 <xTaskIncrementTick+0x160>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6013      	str	r3, [r2, #0]
						break;
 8008736:	e02e      	b.n	8008796 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe ff08 	bl	8007552 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3318      	adds	r3, #24
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe feff 	bl	8007552 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	2201      	movs	r2, #1
 800875a:	409a      	lsls	r2, r3
 800875c:	4b23      	ldr	r3, [pc, #140]	; (80087ec <xTaskIncrementTick+0x164>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4313      	orrs	r3, r2
 8008762:	4a22      	ldr	r2, [pc, #136]	; (80087ec <xTaskIncrementTick+0x164>)
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <xTaskIncrementTick+0x168>)
 8008774:	441a      	add	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f7fe fe8d 	bl	800749c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008786:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <xTaskIncrementTick+0x16c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d3b4      	bcc.n	80086fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008790:	2301      	movs	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008794:	e7b1      	b.n	80086fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008796:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <xTaskIncrementTick+0x16c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4914      	ldr	r1, [pc, #80]	; (80087f0 <xTaskIncrementTick+0x168>)
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d907      	bls.n	80087be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80087ae:	2301      	movs	r3, #1
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e004      	b.n	80087be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80087b4:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <xTaskIncrementTick+0x170>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3301      	adds	r3, #1
 80087ba:	4a0f      	ldr	r2, [pc, #60]	; (80087f8 <xTaskIncrementTick+0x170>)
 80087bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80087be:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <xTaskIncrementTick+0x174>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80087c6:	2301      	movs	r3, #1
 80087c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80087ca:	697b      	ldr	r3, [r7, #20]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200005c4 	.word	0x200005c4
 80087d8:	200005a0 	.word	0x200005a0
 80087dc:	20000554 	.word	0x20000554
 80087e0:	20000558 	.word	0x20000558
 80087e4:	200005b4 	.word	0x200005b4
 80087e8:	200005bc 	.word	0x200005bc
 80087ec:	200005a4 	.word	0x200005a4
 80087f0:	200004a0 	.word	0x200004a0
 80087f4:	2000049c 	.word	0x2000049c
 80087f8:	200005ac 	.word	0x200005ac
 80087fc:	200005b0 	.word	0x200005b0

08008800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008806:	4b26      	ldr	r3, [pc, #152]	; (80088a0 <vTaskSwitchContext+0xa0>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800880e:	4b25      	ldr	r3, [pc, #148]	; (80088a4 <vTaskSwitchContext+0xa4>)
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008814:	e03e      	b.n	8008894 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008816:	4b23      	ldr	r3, [pc, #140]	; (80088a4 <vTaskSwitchContext+0xa4>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800881c:	4b22      	ldr	r3, [pc, #136]	; (80088a8 <vTaskSwitchContext+0xa8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	fab3 f383 	clz	r3, r3
 8008828:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	f1c3 031f 	rsb	r3, r3, #31
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	491e      	ldr	r1, [pc, #120]	; (80088ac <vTaskSwitchContext+0xac>)
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d109      	bne.n	800885a <vTaskSwitchContext+0x5a>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	e7fe      	b.n	8008858 <vTaskSwitchContext+0x58>
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <vTaskSwitchContext+0xac>)
 8008866:	4413      	add	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	605a      	str	r2, [r3, #4]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3308      	adds	r3, #8
 800887c:	429a      	cmp	r2, r3
 800887e:	d104      	bne.n	800888a <vTaskSwitchContext+0x8a>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	605a      	str	r2, [r3, #4]
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <vTaskSwitchContext+0xb0>)
 8008892:	6013      	str	r3, [r2, #0]
}
 8008894:	bf00      	nop
 8008896:	371c      	adds	r7, #28
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	200005c4 	.word	0x200005c4
 80088a4:	200005b0 	.word	0x200005b0
 80088a8:	200005a4 	.word	0x200005a4
 80088ac:	200004a0 	.word	0x200004a0
 80088b0:	2000049c 	.word	0x2000049c

080088b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <vTaskPlaceOnEventList+0x24>
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e7fe      	b.n	80088d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <vTaskPlaceOnEventList+0x44>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3318      	adds	r3, #24
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fe fdfe 	bl	80074e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088e6:	2101      	movs	r1, #1
 80088e8:	6838      	ldr	r0, [r7, #0]
 80088ea:	f000 fb9b 	bl	8009024 <prvAddCurrentTaskToDelayedList>
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2000049c 	.word	0x2000049c

080088fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <xTaskRemoveFromEventList+0x2a>
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e7fe      	b.n	8008924 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3318      	adds	r3, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fe11 	bl	8007552 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008930:	4b1d      	ldr	r3, [pc, #116]	; (80089a8 <xTaskRemoveFromEventList+0xac>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11c      	bne.n	8008972 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	3304      	adds	r3, #4
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fe08 	bl	8007552 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	2201      	movs	r2, #1
 8008948:	409a      	lsls	r2, r3
 800894a:	4b18      	ldr	r3, [pc, #96]	; (80089ac <xTaskRemoveFromEventList+0xb0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4313      	orrs	r3, r2
 8008950:	4a16      	ldr	r2, [pc, #88]	; (80089ac <xTaskRemoveFromEventList+0xb0>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a13      	ldr	r2, [pc, #76]	; (80089b0 <xTaskRemoveFromEventList+0xb4>)
 8008962:	441a      	add	r2, r3
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fd96 	bl	800749c <vListInsertEnd>
 8008970:	e005      	b.n	800897e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3318      	adds	r3, #24
 8008976:	4619      	mov	r1, r3
 8008978:	480e      	ldr	r0, [pc, #56]	; (80089b4 <xTaskRemoveFromEventList+0xb8>)
 800897a:	f7fe fd8f 	bl	800749c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008982:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <xTaskRemoveFromEventList+0xbc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	429a      	cmp	r2, r3
 800898a:	d905      	bls.n	8008998 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <xTaskRemoveFromEventList+0xc0>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e001      	b.n	800899c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800899c:	697b      	ldr	r3, [r7, #20]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200005c4 	.word	0x200005c4
 80089ac:	200005a4 	.word	0x200005a4
 80089b0:	200004a0 	.word	0x200004a0
 80089b4:	2000055c 	.word	0x2000055c
 80089b8:	2000049c 	.word	0x2000049c
 80089bc:	200005b0 	.word	0x200005b0

080089c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <vTaskInternalSetTimeOutState+0x24>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <vTaskInternalSetTimeOutState+0x28>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	200005b4 	.word	0x200005b4
 80089e8:	200005a0 	.word	0x200005a0

080089ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <xTaskCheckForTimeOut+0x24>
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	e7fe      	b.n	8008a0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <xTaskCheckForTimeOut+0x3e>
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e7fe      	b.n	8008a28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008a2a:	f000 fc4d 	bl	80092c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a2e:	4b1d      	ldr	r3, [pc, #116]	; (8008aa4 <xTaskCheckForTimeOut+0xb8>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a46:	d102      	bne.n	8008a4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]
 8008a4c:	e023      	b.n	8008a96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <xTaskCheckForTimeOut+0xbc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d007      	beq.n	8008a6a <xTaskCheckForTimeOut+0x7e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	e015      	b.n	8008a96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d20b      	bcs.n	8008a8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff ff9d 	bl	80089c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	e004      	b.n	8008a96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a96:	f000 fc45 	bl	8009324 <vPortExitCritical>

	return xReturn;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200005a0 	.word	0x200005a0
 8008aa8:	200005b4 	.word	0x200005b4

08008aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <vTaskMissedYield+0x14>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]
}
 8008ab6:	bf00      	nop
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	200005b0 	.word	0x200005b0

08008ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008acc:	f000 f852 	bl	8008b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ad0:	4b06      	ldr	r3, [pc, #24]	; (8008aec <prvIdleTask+0x28>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d9f9      	bls.n	8008acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <prvIdleTask+0x2c>)
 8008ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ae8:	e7f0      	b.n	8008acc <prvIdleTask+0x8>
 8008aea:	bf00      	nop
 8008aec:	200004a0 	.word	0x200004a0
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008afa:	2300      	movs	r3, #0
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	e00c      	b.n	8008b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4a12      	ldr	r2, [pc, #72]	; (8008b54 <prvInitialiseTaskLists+0x60>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fc99 	bl	8007446 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3301      	adds	r3, #1
 8008b18:	607b      	str	r3, [r7, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b06      	cmp	r3, #6
 8008b1e:	d9ef      	bls.n	8008b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b20:	480d      	ldr	r0, [pc, #52]	; (8008b58 <prvInitialiseTaskLists+0x64>)
 8008b22:	f7fe fc90 	bl	8007446 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b26:	480d      	ldr	r0, [pc, #52]	; (8008b5c <prvInitialiseTaskLists+0x68>)
 8008b28:	f7fe fc8d 	bl	8007446 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b2c:	480c      	ldr	r0, [pc, #48]	; (8008b60 <prvInitialiseTaskLists+0x6c>)
 8008b2e:	f7fe fc8a 	bl	8007446 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b32:	480c      	ldr	r0, [pc, #48]	; (8008b64 <prvInitialiseTaskLists+0x70>)
 8008b34:	f7fe fc87 	bl	8007446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b38:	480b      	ldr	r0, [pc, #44]	; (8008b68 <prvInitialiseTaskLists+0x74>)
 8008b3a:	f7fe fc84 	bl	8007446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <prvInitialiseTaskLists+0x78>)
 8008b40:	4a05      	ldr	r2, [pc, #20]	; (8008b58 <prvInitialiseTaskLists+0x64>)
 8008b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b44:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <prvInitialiseTaskLists+0x7c>)
 8008b46:	4a05      	ldr	r2, [pc, #20]	; (8008b5c <prvInitialiseTaskLists+0x68>)
 8008b48:	601a      	str	r2, [r3, #0]
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200004a0 	.word	0x200004a0
 8008b58:	2000052c 	.word	0x2000052c
 8008b5c:	20000540 	.word	0x20000540
 8008b60:	2000055c 	.word	0x2000055c
 8008b64:	20000570 	.word	0x20000570
 8008b68:	20000588 	.word	0x20000588
 8008b6c:	20000554 	.word	0x20000554
 8008b70:	20000558 	.word	0x20000558

08008b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b7a:	e019      	b.n	8008bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b7c:	f000 fba4 	bl	80092c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b80:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <prvCheckTasksWaitingTermination+0x4c>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fce0 	bl	8007552 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b92:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <prvCheckTasksWaitingTermination+0x50>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	4a0a      	ldr	r2, [pc, #40]	; (8008bc4 <prvCheckTasksWaitingTermination+0x50>)
 8008b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <prvCheckTasksWaitingTermination+0x54>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <prvCheckTasksWaitingTermination+0x54>)
 8008ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ba6:	f000 fbbd 	bl	8009324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f80e 	bl	8008bcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <prvCheckTasksWaitingTermination+0x54>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e1      	bne.n	8008b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20000570 	.word	0x20000570
 8008bc4:	2000059c 	.word	0x2000059c
 8008bc8:	20000584 	.word	0x20000584

08008bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d108      	bne.n	8008bf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fd28 	bl	8009638 <vPortFree>
				vPortFree( pxTCB );
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fd25 	bl	8009638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bee:	e017      	b.n	8008c20 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d103      	bne.n	8008c02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fd1c 	bl	8009638 <vPortFree>
	}
 8008c00:	e00e      	b.n	8008c20 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d009      	beq.n	8008c20 <prvDeleteTCB+0x54>
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e7fe      	b.n	8008c1e <prvDeleteTCB+0x52>
	}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <prvResetNextTaskUnblockTime+0x40>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <prvResetNextTaskUnblockTime+0x14>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e000      	b.n	8008c3e <prvResetNextTaskUnblockTime+0x16>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <prvResetNextTaskUnblockTime+0x44>)
 8008c44:	f04f 32ff 	mov.w	r2, #4294967295
 8008c48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c4a:	e008      	b.n	8008c5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <prvResetNextTaskUnblockTime+0x40>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4a04      	ldr	r2, [pc, #16]	; (8008c6c <prvResetNextTaskUnblockTime+0x44>)
 8008c5c:	6013      	str	r3, [r2, #0]
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr
 8008c68:	20000554 	.word	0x20000554
 8008c6c:	200005bc 	.word	0x200005bc

08008c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c76:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <xTaskGetSchedulerState+0x34>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	e008      	b.n	8008c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c84:	4b08      	ldr	r3, [pc, #32]	; (8008ca8 <xTaskGetSchedulerState+0x38>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	607b      	str	r3, [r7, #4]
 8008c90:	e001      	b.n	8008c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c92:	2300      	movs	r3, #0
 8008c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c96:	687b      	ldr	r3, [r7, #4]
	}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	200005a8 	.word	0x200005a8
 8008ca8:	200005c4 	.word	0x200005c4

08008cac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d06e      	beq.n	8008da0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc6:	4b39      	ldr	r3, [pc, #228]	; (8008dac <xTaskPriorityInherit+0x100>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d25e      	bcs.n	8008d8e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	db06      	blt.n	8008ce6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd8:	4b34      	ldr	r3, [pc, #208]	; (8008dac <xTaskPriorityInherit+0x100>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	f1c3 0207 	rsb	r2, r3, #7
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6959      	ldr	r1, [r3, #20]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4a2e      	ldr	r2, [pc, #184]	; (8008db0 <xTaskPriorityInherit+0x104>)
 8008cf8:	4413      	add	r3, r2
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d101      	bne.n	8008d02 <xTaskPriorityInherit+0x56>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <xTaskPriorityInherit+0x58>
 8008d02:	2300      	movs	r3, #0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d03a      	beq.n	8008d7e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fc20 	bl	8007552 <uxListRemove>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d115      	bne.n	8008d44 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4924      	ldr	r1, [pc, #144]	; (8008db0 <xTaskPriorityInherit+0x104>)
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	440b      	add	r3, r1
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <xTaskPriorityInherit+0x98>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	2201      	movs	r2, #1
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	43da      	mvns	r2, r3
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <xTaskPriorityInherit+0x108>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	4a1c      	ldr	r2, [pc, #112]	; (8008db4 <xTaskPriorityInherit+0x108>)
 8008d42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <xTaskPriorityInherit+0x100>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	2201      	movs	r2, #1
 8008d54:	409a      	lsls	r2, r3
 8008d56:	4b17      	ldr	r3, [pc, #92]	; (8008db4 <xTaskPriorityInherit+0x108>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	4a15      	ldr	r2, [pc, #84]	; (8008db4 <xTaskPriorityInherit+0x108>)
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a10      	ldr	r2, [pc, #64]	; (8008db0 <xTaskPriorityInherit+0x104>)
 8008d6e:	441a      	add	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7fe fb90 	bl	800749c <vListInsertEnd>
 8008d7c:	e004      	b.n	8008d88 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <xTaskPriorityInherit+0x100>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	e008      	b.n	8008da0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d92:	4b06      	ldr	r3, [pc, #24]	; (8008dac <xTaskPriorityInherit+0x100>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d201      	bcs.n	8008da0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008da0:	68fb      	ldr	r3, [r7, #12]
	}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	2000049c 	.word	0x2000049c
 8008db0:	200004a0 	.word	0x200004a0
 8008db4:	200005a4 	.word	0x200005a4

08008db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d06c      	beq.n	8008ea8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dce:	4b39      	ldr	r3, [pc, #228]	; (8008eb4 <xTaskPriorityDisinherit+0xfc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d009      	beq.n	8008dec <xTaskPriorityDisinherit+0x34>
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	e7fe      	b.n	8008dea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d109      	bne.n	8008e08 <xTaskPriorityDisinherit+0x50>
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	e7fe      	b.n	8008e06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d044      	beq.n	8008ea8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d140      	bne.n	8008ea8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fb91 	bl	8007552 <uxListRemove>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d115      	bne.n	8008e62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3a:	491f      	ldr	r1, [pc, #124]	; (8008eb8 <xTaskPriorityDisinherit+0x100>)
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xTaskPriorityDisinherit+0xaa>
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	2201      	movs	r2, #1
 8008e52:	fa02 f303 	lsl.w	r3, r2, r3
 8008e56:	43da      	mvns	r2, r3
 8008e58:	4b18      	ldr	r3, [pc, #96]	; (8008ebc <xTaskPriorityDisinherit+0x104>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	4a17      	ldr	r2, [pc, #92]	; (8008ebc <xTaskPriorityDisinherit+0x104>)
 8008e60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	f1c3 0207 	rsb	r2, r3, #7
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	409a      	lsls	r2, r3
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <xTaskPriorityDisinherit+0x104>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	4a0d      	ldr	r2, [pc, #52]	; (8008ebc <xTaskPriorityDisinherit+0x104>)
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4a08      	ldr	r2, [pc, #32]	; (8008eb8 <xTaskPriorityDisinherit+0x100>)
 8008e96:	441a      	add	r2, r3
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f7fe fafc 	bl	800749c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ea8:	697b      	ldr	r3, [r7, #20]
	}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000049c 	.word	0x2000049c
 8008eb8:	200004a0 	.word	0x200004a0
 8008ebc:	200005a4 	.word	0x200005a4

08008ec0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 8086 	beq.w	8008fe6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	e7fe      	b.n	8008ef4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d902      	bls.n	8008f06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	e002      	b.n	8008f0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d067      	beq.n	8008fe6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d162      	bne.n	8008fe6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008f20:	4b33      	ldr	r3, [pc, #204]	; (8008ff0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d109      	bne.n	8008f3e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	60bb      	str	r3, [r7, #8]
 8008f3c:	e7fe      	b.n	8008f3c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	db04      	blt.n	8008f5c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	f1c3 0207 	rsb	r2, r3, #7
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	6959      	ldr	r1, [r3, #20]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a22      	ldr	r2, [pc, #136]	; (8008ff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008f6c:	4413      	add	r3, r2
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	d101      	bne.n	8008f76 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d034      	beq.n	8008fe6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fae6 	bl	8007552 <uxListRemove>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d115      	bne.n	8008fb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	4918      	ldr	r1, [pc, #96]	; (8008ff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	43da      	mvns	r2, r3
 8008fae:	4b12      	ldr	r3, [pc, #72]	; (8008ff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	4a10      	ldr	r2, [pc, #64]	; (8008ff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fb6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	409a      	lsls	r2, r3
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	4a0c      	ldr	r2, [pc, #48]	; (8008ff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4a07      	ldr	r2, [pc, #28]	; (8008ff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008fd8:	441a      	add	r2, r3
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	f7fe fa5b 	bl	800749c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fe6:	bf00      	nop
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	2000049c 	.word	0x2000049c
 8008ff4:	200004a0 	.word	0x200004a0
 8008ff8:	200005a4 	.word	0x200005a4

08008ffc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <pvTaskIncrementMutexHeldCount+0x24>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <pvTaskIncrementMutexHeldCount+0x24>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800900e:	3201      	adds	r2, #1
 8009010:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009012:	4b03      	ldr	r3, [pc, #12]	; (8009020 <pvTaskIncrementMutexHeldCount+0x24>)
 8009014:	681b      	ldr	r3, [r3, #0]
	}
 8009016:	4618      	mov	r0, r3
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	2000049c 	.word	0x2000049c

08009024 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800902e:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009034:	4b28      	ldr	r3, [pc, #160]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3304      	adds	r3, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fa89 	bl	8007552 <uxListRemove>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10b      	bne.n	800905e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009046:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	2201      	movs	r2, #1
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	43da      	mvns	r2, r3
 8009054:	4b21      	ldr	r3, [pc, #132]	; (80090dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4013      	ands	r3, r2
 800905a:	4a20      	ldr	r2, [pc, #128]	; (80090dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800905c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d10a      	bne.n	800907c <prvAddCurrentTaskToDelayedList+0x58>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800906c:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3304      	adds	r3, #4
 8009072:	4619      	mov	r1, r3
 8009074:	481a      	ldr	r0, [pc, #104]	; (80090e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009076:	f7fe fa11 	bl	800749c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800907a:	e026      	b.n	80090ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4413      	add	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009084:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	429a      	cmp	r2, r3
 8009092:	d209      	bcs.n	80090a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009094:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3304      	adds	r3, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f7fe fa1e 	bl	80074e2 <vListInsert>
}
 80090a6:	e010      	b.n	80090ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a8:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f7fe fa14 	bl	80074e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090ba:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d202      	bcs.n	80090ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80090c4:	4a09      	ldr	r2, [pc, #36]	; (80090ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6013      	str	r3, [r2, #0]
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	200005a0 	.word	0x200005a0
 80090d8:	2000049c 	.word	0x2000049c
 80090dc:	200005a4 	.word	0x200005a4
 80090e0:	20000588 	.word	0x20000588
 80090e4:	20000558 	.word	0x20000558
 80090e8:	20000554 	.word	0x20000554
 80090ec:	200005bc 	.word	0x200005bc

080090f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3b04      	subs	r3, #4
 8009100:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3b04      	subs	r3, #4
 800910e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f023 0201 	bic.w	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3b04      	subs	r3, #4
 800911e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009120:	4a08      	ldr	r2, [pc, #32]	; (8009144 <pxPortInitialiseStack+0x54>)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3b14      	subs	r3, #20
 800912a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3b20      	subs	r3, #32
 8009136:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr
 8009144:	08009149 	.word	0x08009149

08009148 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800914e:	2300      	movs	r3, #0
 8009150:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <prvTaskExitError+0x4c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d009      	beq.n	8009170 <prvTaskExitError+0x28>
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	e7fe      	b.n	800916e <prvTaskExitError+0x26>
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009182:	bf00      	nop
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0fc      	beq.n	8009184 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800918a:	bf00      	nop
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr
 8009194:	20000024 	.word	0x20000024
	...

080091a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <pxCurrentTCBConst2>)
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091aa:	f380 8809 	msr	PSP, r0
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8811 	msr	BASEPRI, r0
 80091ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80091be:	4770      	bx	lr

080091c0 <pxCurrentTCBConst2>:
 80091c0:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80091c8:	4806      	ldr	r0, [pc, #24]	; (80091e4 <prvPortStartFirstTask+0x1c>)
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	f380 8808 	msr	MSP, r0
 80091d2:	b662      	cpsie	i
 80091d4:	b661      	cpsie	f
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	df00      	svc	0
 80091e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091e2:	bf00      	nop
 80091e4:	e000ed08 	.word	0xe000ed08

080091e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091ee:	4b31      	ldr	r3, [pc, #196]	; (80092b4 <xPortStartScheduler+0xcc>)
 80091f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	22ff      	movs	r2, #255	; 0xff
 80091fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009210:	b2da      	uxtb	r2, r3
 8009212:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <xPortStartScheduler+0xd0>)
 8009214:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009216:	4b29      	ldr	r3, [pc, #164]	; (80092bc <xPortStartScheduler+0xd4>)
 8009218:	2207      	movs	r2, #7
 800921a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800921c:	e009      	b.n	8009232 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800921e:	4b27      	ldr	r3, [pc, #156]	; (80092bc <xPortStartScheduler+0xd4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3b01      	subs	r3, #1
 8009224:	4a25      	ldr	r2, [pc, #148]	; (80092bc <xPortStartScheduler+0xd4>)
 8009226:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	b2db      	uxtb	r3, r3
 8009230:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d0ef      	beq.n	800921e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800923e:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <xPortStartScheduler+0xd4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f1c3 0307 	rsb	r3, r3, #7
 8009246:	2b04      	cmp	r3, #4
 8009248:	d009      	beq.n	800925e <xPortStartScheduler+0x76>
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	60bb      	str	r3, [r7, #8]
 800925c:	e7fe      	b.n	800925c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800925e:	4b17      	ldr	r3, [pc, #92]	; (80092bc <xPortStartScheduler+0xd4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	4a15      	ldr	r2, [pc, #84]	; (80092bc <xPortStartScheduler+0xd4>)
 8009266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009268:	4b14      	ldr	r3, [pc, #80]	; (80092bc <xPortStartScheduler+0xd4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009270:	4a12      	ldr	r2, [pc, #72]	; (80092bc <xPortStartScheduler+0xd4>)
 8009272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	b2da      	uxtb	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800927c:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <xPortStartScheduler+0xd8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a0f      	ldr	r2, [pc, #60]	; (80092c0 <xPortStartScheduler+0xd8>)
 8009282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009288:	4b0d      	ldr	r3, [pc, #52]	; (80092c0 <xPortStartScheduler+0xd8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <xPortStartScheduler+0xd8>)
 800928e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009294:	f000 f8b0 	bl	80093f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <xPortStartScheduler+0xdc>)
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800929e:	f7ff ff93 	bl	80091c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092a2:	f7ff faad 	bl	8008800 <vTaskSwitchContext>
	prvTaskExitError();
 80092a6:	f7ff ff4f 	bl	8009148 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000e400 	.word	0xe000e400
 80092b8:	200005c8 	.word	0x200005c8
 80092bc:	200005cc 	.word	0x200005cc
 80092c0:	e000ed20 	.word	0xe000ed20
 80092c4:	20000024 	.word	0x20000024

080092c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092e0:	4b0e      	ldr	r3, [pc, #56]	; (800931c <vPortEnterCritical+0x54>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a0d      	ldr	r2, [pc, #52]	; (800931c <vPortEnterCritical+0x54>)
 80092e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <vPortEnterCritical+0x54>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d10e      	bne.n	8009310 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092f2:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <vPortEnterCritical+0x58>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <vPortEnterCritical+0x48>
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	e7fe      	b.n	800930e <vPortEnterCritical+0x46>
	}
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	20000024 	.word	0x20000024
 8009320:	e000ed04 	.word	0xe000ed04

08009324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800932a:	4b10      	ldr	r3, [pc, #64]	; (800936c <vPortExitCritical+0x48>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d109      	bne.n	8009346 <vPortExitCritical+0x22>
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	607b      	str	r3, [r7, #4]
 8009344:	e7fe      	b.n	8009344 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <vPortExitCritical+0x48>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3b01      	subs	r3, #1
 800934c:	4a07      	ldr	r2, [pc, #28]	; (800936c <vPortExitCritical+0x48>)
 800934e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <vPortExitCritical+0x48>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d104      	bne.n	8009362 <vPortExitCritical+0x3e>
 8009358:	2300      	movs	r3, #0
 800935a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	20000024 	.word	0x20000024

08009370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009370:	f3ef 8009 	mrs	r0, PSP
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <pxCurrentTCBConst>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009380:	6010      	str	r0, [r2, #0]
 8009382:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009386:	f04f 0050 	mov.w	r0, #80	; 0x50
 800938a:	f380 8811 	msr	BASEPRI, r0
 800938e:	f7ff fa37 	bl	8008800 <vTaskSwitchContext>
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f380 8811 	msr	BASEPRI, r0
 800939a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	6808      	ldr	r0, [r1, #0]
 80093a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093a6:	f380 8809 	msr	PSP, r0
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	4770      	bx	lr

080093b0 <pxCurrentTCBConst>:
 80093b0:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093d0:	f7ff f95a 	bl	8008688 <xTaskIncrementTick>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <SysTick_Handler+0x3c>)
 80093dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <vPortSetupTimerInterrupt+0x30>)
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009402:	4b0a      	ldr	r3, [pc, #40]	; (800942c <vPortSetupTimerInterrupt+0x34>)
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009408:	4b09      	ldr	r3, [pc, #36]	; (8009430 <vPortSetupTimerInterrupt+0x38>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a09      	ldr	r2, [pc, #36]	; (8009434 <vPortSetupTimerInterrupt+0x3c>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	099b      	lsrs	r3, r3, #6
 8009414:	4a08      	ldr	r2, [pc, #32]	; (8009438 <vPortSetupTimerInterrupt+0x40>)
 8009416:	3b01      	subs	r3, #1
 8009418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800941a:	4b03      	ldr	r3, [pc, #12]	; (8009428 <vPortSetupTimerInterrupt+0x30>)
 800941c:	2207      	movs	r2, #7
 800941e:	601a      	str	r2, [r3, #0]
}
 8009420:	bf00      	nop
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr
 8009428:	e000e010 	.word	0xe000e010
 800942c:	e000e018 	.word	0xe000e018
 8009430:	20000004 	.word	0x20000004
 8009434:	10624dd3 	.word	0x10624dd3
 8009438:	e000e014 	.word	0xe000e014

0800943c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009442:	f3ef 8305 	mrs	r3, IPSR
 8009446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b0f      	cmp	r3, #15
 800944c:	d913      	bls.n	8009476 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800944e:	4a15      	ldr	r2, [pc, #84]	; (80094a4 <vPortValidateInterruptPriority+0x68>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009458:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <vPortValidateInterruptPriority+0x6c>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	7afa      	ldrb	r2, [r7, #11]
 800945e:	429a      	cmp	r2, r3
 8009460:	d209      	bcs.n	8009476 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	607b      	str	r3, [r7, #4]
 8009474:	e7fe      	b.n	8009474 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009476:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <vPortValidateInterruptPriority+0x70>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800947e:	4b0c      	ldr	r3, [pc, #48]	; (80094b0 <vPortValidateInterruptPriority+0x74>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d909      	bls.n	800949a <vPortValidateInterruptPriority+0x5e>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	e7fe      	b.n	8009498 <vPortValidateInterruptPriority+0x5c>
	}
 800949a:	bf00      	nop
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr
 80094a4:	e000e3f0 	.word	0xe000e3f0
 80094a8:	200005c8 	.word	0x200005c8
 80094ac:	e000ed0c 	.word	0xe000ed0c
 80094b0:	200005cc 	.word	0x200005cc

080094b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	; 0x28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094c0:	f7ff f838 	bl	8008534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094c4:	4b57      	ldr	r3, [pc, #348]	; (8009624 <pvPortMalloc+0x170>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094cc:	f000 f90c 	bl	80096e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094d0:	4b55      	ldr	r3, [pc, #340]	; (8009628 <pvPortMalloc+0x174>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f040 808c 	bne.w	80095f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d01c      	beq.n	800951e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80094e4:	2208      	movs	r2, #8
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4413      	add	r3, r2
 80094ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d013      	beq.n	800951e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f023 0307 	bic.w	r3, r3, #7
 80094fc:	3308      	adds	r3, #8
 80094fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <pvPortMalloc+0x6a>
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	e7fe      	b.n	800951c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d068      	beq.n	80095f6 <pvPortMalloc+0x142>
 8009524:	4b41      	ldr	r3, [pc, #260]	; (800962c <pvPortMalloc+0x178>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d863      	bhi.n	80095f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800952e:	4b40      	ldr	r3, [pc, #256]	; (8009630 <pvPortMalloc+0x17c>)
 8009530:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009532:	4b3f      	ldr	r3, [pc, #252]	; (8009630 <pvPortMalloc+0x17c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009538:	e004      	b.n	8009544 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	429a      	cmp	r2, r3
 800954c:	d903      	bls.n	8009556 <pvPortMalloc+0xa2>
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1f1      	bne.n	800953a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009556:	4b33      	ldr	r3, [pc, #204]	; (8009624 <pvPortMalloc+0x170>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955c:	429a      	cmp	r2, r3
 800955e:	d04a      	beq.n	80095f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2208      	movs	r2, #8
 8009566:	4413      	add	r3, r2
 8009568:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	1ad2      	subs	r2, r2, r3
 800957a:	2308      	movs	r3, #8
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	429a      	cmp	r2, r3
 8009580:	d91e      	bls.n	80095c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <pvPortMalloc+0xf4>
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	e7fe      	b.n	80095a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095ba:	69b8      	ldr	r0, [r7, #24]
 80095bc:	f000 f8f6 	bl	80097ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095c0:	4b1a      	ldr	r3, [pc, #104]	; (800962c <pvPortMalloc+0x178>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	4a18      	ldr	r2, [pc, #96]	; (800962c <pvPortMalloc+0x178>)
 80095cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095ce:	4b17      	ldr	r3, [pc, #92]	; (800962c <pvPortMalloc+0x178>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b18      	ldr	r3, [pc, #96]	; (8009634 <pvPortMalloc+0x180>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d203      	bcs.n	80095e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095da:	4b14      	ldr	r3, [pc, #80]	; (800962c <pvPortMalloc+0x178>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a15      	ldr	r2, [pc, #84]	; (8009634 <pvPortMalloc+0x180>)
 80095e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4b10      	ldr	r3, [pc, #64]	; (8009628 <pvPortMalloc+0x174>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095f6:	f7fe ffab 	bl	8008550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	2b00      	cmp	r3, #0
 8009602:	d009      	beq.n	8009618 <pvPortMalloc+0x164>
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e7fe      	b.n	8009616 <pvPortMalloc+0x162>
	return pvReturn;
 8009618:	69fb      	ldr	r3, [r7, #28]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3728      	adds	r7, #40	; 0x28
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200011d8 	.word	0x200011d8
 8009628:	200011e4 	.word	0x200011e4
 800962c:	200011dc 	.word	0x200011dc
 8009630:	200011d0 	.word	0x200011d0
 8009634:	200011e0 	.word	0x200011e0

08009638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d046      	beq.n	80096d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800964a:	2308      	movs	r3, #8
 800964c:	425b      	negs	r3, r3
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4413      	add	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	4b20      	ldr	r3, [pc, #128]	; (80096e0 <vPortFree+0xa8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4013      	ands	r3, r2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d109      	bne.n	800967a <vPortFree+0x42>
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	e7fe      	b.n	8009678 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <vPortFree+0x5e>
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	60bb      	str	r3, [r7, #8]
 8009694:	e7fe      	b.n	8009694 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	4b11      	ldr	r3, [pc, #68]	; (80096e0 <vPortFree+0xa8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4013      	ands	r3, r2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d019      	beq.n	80096d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d115      	bne.n	80096d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <vPortFree+0xa8>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	43db      	mvns	r3, r3
 80096b6:	401a      	ands	r2, r3
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096bc:	f7fe ff3a 	bl	8008534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <vPortFree+0xac>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4413      	add	r3, r2
 80096ca:	4a06      	ldr	r2, [pc, #24]	; (80096e4 <vPortFree+0xac>)
 80096cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096ce:	6938      	ldr	r0, [r7, #16]
 80096d0:	f000 f86c 	bl	80097ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80096d4:	f7fe ff3c 	bl	8008550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096d8:	bf00      	nop
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	200011e4 	.word	0x200011e4
 80096e4:	200011dc 	.word	0x200011dc

080096e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80096f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096f4:	4b27      	ldr	r3, [pc, #156]	; (8009794 <prvHeapInit+0xac>)
 80096f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00c      	beq.n	800971c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3307      	adds	r3, #7
 8009706:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <prvHeapInit+0xac>)
 8009718:	4413      	add	r3, r2
 800971a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009720:	4a1d      	ldr	r2, [pc, #116]	; (8009798 <prvHeapInit+0xb0>)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009726:	4b1c      	ldr	r3, [pc, #112]	; (8009798 <prvHeapInit+0xb0>)
 8009728:	2200      	movs	r2, #0
 800972a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	4413      	add	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009734:	2208      	movs	r2, #8
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0307 	bic.w	r3, r3, #7
 8009742:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4a15      	ldr	r2, [pc, #84]	; (800979c <prvHeapInit+0xb4>)
 8009748:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800974a:	4b14      	ldr	r3, [pc, #80]	; (800979c <prvHeapInit+0xb4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2200      	movs	r2, #0
 8009750:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009752:	4b12      	ldr	r3, [pc, #72]	; (800979c <prvHeapInit+0xb4>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009768:	4b0c      	ldr	r3, [pc, #48]	; (800979c <prvHeapInit+0xb4>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	4a0a      	ldr	r2, [pc, #40]	; (80097a0 <prvHeapInit+0xb8>)
 8009776:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <prvHeapInit+0xbc>)
 800977e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009780:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <prvHeapInit+0xc0>)
 8009782:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009786:	601a      	str	r2, [r3, #0]
}
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	200005d0 	.word	0x200005d0
 8009798:	200011d0 	.word	0x200011d0
 800979c:	200011d8 	.word	0x200011d8
 80097a0:	200011e0 	.word	0x200011e0
 80097a4:	200011dc 	.word	0x200011dc
 80097a8:	200011e4 	.word	0x200011e4

080097ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097b4:	4b27      	ldr	r3, [pc, #156]	; (8009854 <prvInsertBlockIntoFreeList+0xa8>)
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e002      	b.n	80097c0 <prvInsertBlockIntoFreeList+0x14>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d8f7      	bhi.n	80097ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	4413      	add	r3, r2
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d108      	bne.n	80097ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	441a      	add	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	441a      	add	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d118      	bne.n	8009834 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <prvInsertBlockIntoFreeList+0xac>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d00d      	beq.n	800982a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	441a      	add	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e008      	b.n	800983c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800982a:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <prvInsertBlockIntoFreeList+0xac>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e003      	b.n	800983c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d002      	beq.n	800984a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800984a:	bf00      	nop
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	bc80      	pop	{r7}
 8009852:	4770      	bx	lr
 8009854:	200011d0 	.word	0x200011d0
 8009858:	200011d8 	.word	0x200011d8

0800985c <__errno>:
 800985c:	4b01      	ldr	r3, [pc, #4]	; (8009864 <__errno+0x8>)
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000028 	.word	0x20000028

08009868 <__libc_init_array>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	2500      	movs	r5, #0
 800986c:	4e0c      	ldr	r6, [pc, #48]	; (80098a0 <__libc_init_array+0x38>)
 800986e:	4c0d      	ldr	r4, [pc, #52]	; (80098a4 <__libc_init_array+0x3c>)
 8009870:	1ba4      	subs	r4, r4, r6
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	42a5      	cmp	r5, r4
 8009876:	d109      	bne.n	800988c <__libc_init_array+0x24>
 8009878:	f002 f85c 	bl	800b934 <_init>
 800987c:	2500      	movs	r5, #0
 800987e:	4e0a      	ldr	r6, [pc, #40]	; (80098a8 <__libc_init_array+0x40>)
 8009880:	4c0a      	ldr	r4, [pc, #40]	; (80098ac <__libc_init_array+0x44>)
 8009882:	1ba4      	subs	r4, r4, r6
 8009884:	10a4      	asrs	r4, r4, #2
 8009886:	42a5      	cmp	r5, r4
 8009888:	d105      	bne.n	8009896 <__libc_init_array+0x2e>
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009890:	4798      	blx	r3
 8009892:	3501      	adds	r5, #1
 8009894:	e7ee      	b.n	8009874 <__libc_init_array+0xc>
 8009896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800989a:	4798      	blx	r3
 800989c:	3501      	adds	r5, #1
 800989e:	e7f2      	b.n	8009886 <__libc_init_array+0x1e>
 80098a0:	0800c0e8 	.word	0x0800c0e8
 80098a4:	0800c0e8 	.word	0x0800c0e8
 80098a8:	0800c0e8 	.word	0x0800c0e8
 80098ac:	0800c0ec 	.word	0x0800c0ec

080098b0 <memcpy>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	1e43      	subs	r3, r0, #1
 80098b4:	440a      	add	r2, r1
 80098b6:	4291      	cmp	r1, r2
 80098b8:	d100      	bne.n	80098bc <memcpy+0xc>
 80098ba:	bd10      	pop	{r4, pc}
 80098bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c4:	e7f7      	b.n	80098b6 <memcpy+0x6>

080098c6 <memset>:
 80098c6:	4603      	mov	r3, r0
 80098c8:	4402      	add	r2, r0
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d100      	bne.n	80098d0 <memset+0xa>
 80098ce:	4770      	bx	lr
 80098d0:	f803 1b01 	strb.w	r1, [r3], #1
 80098d4:	e7f9      	b.n	80098ca <memset+0x4>

080098d6 <__cvt>:
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	461e      	mov	r6, r3
 80098de:	bfbb      	ittet	lt
 80098e0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80098e4:	461e      	movlt	r6, r3
 80098e6:	2300      	movge	r3, #0
 80098e8:	232d      	movlt	r3, #45	; 0x2d
 80098ea:	b088      	sub	sp, #32
 80098ec:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80098ee:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80098f2:	f027 0720 	bic.w	r7, r7, #32
 80098f6:	2f46      	cmp	r7, #70	; 0x46
 80098f8:	4614      	mov	r4, r2
 80098fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80098fc:	700b      	strb	r3, [r1, #0]
 80098fe:	d004      	beq.n	800990a <__cvt+0x34>
 8009900:	2f45      	cmp	r7, #69	; 0x45
 8009902:	d100      	bne.n	8009906 <__cvt+0x30>
 8009904:	3501      	adds	r5, #1
 8009906:	2302      	movs	r3, #2
 8009908:	e000      	b.n	800990c <__cvt+0x36>
 800990a:	2303      	movs	r3, #3
 800990c:	aa07      	add	r2, sp, #28
 800990e:	9204      	str	r2, [sp, #16]
 8009910:	aa06      	add	r2, sp, #24
 8009912:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009916:	e9cd 3500 	strd	r3, r5, [sp]
 800991a:	4622      	mov	r2, r4
 800991c:	4633      	mov	r3, r6
 800991e:	f000 fcd7 	bl	800a2d0 <_dtoa_r>
 8009922:	2f47      	cmp	r7, #71	; 0x47
 8009924:	4680      	mov	r8, r0
 8009926:	d102      	bne.n	800992e <__cvt+0x58>
 8009928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800992a:	07db      	lsls	r3, r3, #31
 800992c:	d526      	bpl.n	800997c <__cvt+0xa6>
 800992e:	2f46      	cmp	r7, #70	; 0x46
 8009930:	eb08 0905 	add.w	r9, r8, r5
 8009934:	d111      	bne.n	800995a <__cvt+0x84>
 8009936:	f898 3000 	ldrb.w	r3, [r8]
 800993a:	2b30      	cmp	r3, #48	; 0x30
 800993c:	d10a      	bne.n	8009954 <__cvt+0x7e>
 800993e:	2200      	movs	r2, #0
 8009940:	2300      	movs	r3, #0
 8009942:	4620      	mov	r0, r4
 8009944:	4631      	mov	r1, r6
 8009946:	f7f7 f839 	bl	80009bc <__aeabi_dcmpeq>
 800994a:	b918      	cbnz	r0, 8009954 <__cvt+0x7e>
 800994c:	f1c5 0501 	rsb	r5, r5, #1
 8009950:	f8ca 5000 	str.w	r5, [sl]
 8009954:	f8da 3000 	ldr.w	r3, [sl]
 8009958:	4499      	add	r9, r3
 800995a:	2200      	movs	r2, #0
 800995c:	2300      	movs	r3, #0
 800995e:	4620      	mov	r0, r4
 8009960:	4631      	mov	r1, r6
 8009962:	f7f7 f82b 	bl	80009bc <__aeabi_dcmpeq>
 8009966:	b938      	cbnz	r0, 8009978 <__cvt+0xa2>
 8009968:	2230      	movs	r2, #48	; 0x30
 800996a:	9b07      	ldr	r3, [sp, #28]
 800996c:	454b      	cmp	r3, r9
 800996e:	d205      	bcs.n	800997c <__cvt+0xa6>
 8009970:	1c59      	adds	r1, r3, #1
 8009972:	9107      	str	r1, [sp, #28]
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e7f8      	b.n	800996a <__cvt+0x94>
 8009978:	f8cd 901c 	str.w	r9, [sp, #28]
 800997c:	4640      	mov	r0, r8
 800997e:	9b07      	ldr	r3, [sp, #28]
 8009980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009982:	eba3 0308 	sub.w	r3, r3, r8
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	b008      	add	sp, #32
 800998a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800998e <__exponent>:
 800998e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009990:	2900      	cmp	r1, #0
 8009992:	bfb4      	ite	lt
 8009994:	232d      	movlt	r3, #45	; 0x2d
 8009996:	232b      	movge	r3, #43	; 0x2b
 8009998:	4604      	mov	r4, r0
 800999a:	bfb8      	it	lt
 800999c:	4249      	neglt	r1, r1
 800999e:	2909      	cmp	r1, #9
 80099a0:	f804 2b02 	strb.w	r2, [r4], #2
 80099a4:	7043      	strb	r3, [r0, #1]
 80099a6:	dd21      	ble.n	80099ec <__exponent+0x5e>
 80099a8:	f10d 0307 	add.w	r3, sp, #7
 80099ac:	461f      	mov	r7, r3
 80099ae:	260a      	movs	r6, #10
 80099b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80099b4:	fb06 1115 	mls	r1, r6, r5, r1
 80099b8:	2d09      	cmp	r5, #9
 80099ba:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80099be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099c2:	f103 32ff 	add.w	r2, r3, #4294967295
 80099c6:	4629      	mov	r1, r5
 80099c8:	dc09      	bgt.n	80099de <__exponent+0x50>
 80099ca:	3130      	adds	r1, #48	; 0x30
 80099cc:	3b02      	subs	r3, #2
 80099ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80099d2:	42bb      	cmp	r3, r7
 80099d4:	4622      	mov	r2, r4
 80099d6:	d304      	bcc.n	80099e2 <__exponent+0x54>
 80099d8:	1a10      	subs	r0, r2, r0
 80099da:	b003      	add	sp, #12
 80099dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099de:	4613      	mov	r3, r2
 80099e0:	e7e6      	b.n	80099b0 <__exponent+0x22>
 80099e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e6:	f804 2b01 	strb.w	r2, [r4], #1
 80099ea:	e7f2      	b.n	80099d2 <__exponent+0x44>
 80099ec:	2330      	movs	r3, #48	; 0x30
 80099ee:	4419      	add	r1, r3
 80099f0:	7083      	strb	r3, [r0, #2]
 80099f2:	1d02      	adds	r2, r0, #4
 80099f4:	70c1      	strb	r1, [r0, #3]
 80099f6:	e7ef      	b.n	80099d8 <__exponent+0x4a>

080099f8 <_printf_float>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	b091      	sub	sp, #68	; 0x44
 80099fe:	460c      	mov	r4, r1
 8009a00:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009a02:	4693      	mov	fp, r2
 8009a04:	461e      	mov	r6, r3
 8009a06:	4605      	mov	r5, r0
 8009a08:	f001 fa16 	bl	800ae38 <_localeconv_r>
 8009a0c:	6803      	ldr	r3, [r0, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	9309      	str	r3, [sp, #36]	; 0x24
 8009a12:	f7f6 fba7 	bl	8000164 <strlen>
 8009a16:	2300      	movs	r3, #0
 8009a18:	930e      	str	r3, [sp, #56]	; 0x38
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	900a      	str	r0, [sp, #40]	; 0x28
 8009a1e:	3307      	adds	r3, #7
 8009a20:	f023 0307 	bic.w	r3, r3, #7
 8009a24:	f103 0208 	add.w	r2, r3, #8
 8009a28:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009a2c:	f8d4 a000 	ldr.w	sl, [r4]
 8009a30:	603a      	str	r2, [r7, #0]
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a3a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009a3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a44:	f04f 32ff 	mov.w	r2, #4294967295
 8009a48:	4ba6      	ldr	r3, [pc, #664]	; (8009ce4 <_printf_float+0x2ec>)
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a4e:	f7f6 ffe7 	bl	8000a20 <__aeabi_dcmpun>
 8009a52:	bb68      	cbnz	r0, 8009ab0 <_printf_float+0xb8>
 8009a54:	f04f 32ff 	mov.w	r2, #4294967295
 8009a58:	4ba2      	ldr	r3, [pc, #648]	; (8009ce4 <_printf_float+0x2ec>)
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a5e:	f7f6 ffc1 	bl	80009e4 <__aeabi_dcmple>
 8009a62:	bb28      	cbnz	r0, 8009ab0 <_printf_float+0xb8>
 8009a64:	2200      	movs	r2, #0
 8009a66:	2300      	movs	r3, #0
 8009a68:	4638      	mov	r0, r7
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	f7f6 ffb0 	bl	80009d0 <__aeabi_dcmplt>
 8009a70:	b110      	cbz	r0, 8009a78 <_printf_float+0x80>
 8009a72:	232d      	movs	r3, #45	; 0x2d
 8009a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a78:	4f9b      	ldr	r7, [pc, #620]	; (8009ce8 <_printf_float+0x2f0>)
 8009a7a:	4b9c      	ldr	r3, [pc, #624]	; (8009cec <_printf_float+0x2f4>)
 8009a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a80:	bf98      	it	ls
 8009a82:	461f      	movls	r7, r3
 8009a84:	2303      	movs	r3, #3
 8009a86:	f04f 0900 	mov.w	r9, #0
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	f02a 0304 	bic.w	r3, sl, #4
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	9600      	str	r6, [sp, #0]
 8009a94:	465b      	mov	r3, fp
 8009a96:	aa0f      	add	r2, sp, #60	; 0x3c
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f9e2 	bl	8009e64 <_printf_common>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	f040 8090 	bne.w	8009bc6 <_printf_float+0x1ce>
 8009aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aaa:	b011      	add	sp, #68	; 0x44
 8009aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	463a      	mov	r2, r7
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	f7f6 ffb2 	bl	8000a20 <__aeabi_dcmpun>
 8009abc:	b110      	cbz	r0, 8009ac4 <_printf_float+0xcc>
 8009abe:	4f8c      	ldr	r7, [pc, #560]	; (8009cf0 <_printf_float+0x2f8>)
 8009ac0:	4b8c      	ldr	r3, [pc, #560]	; (8009cf4 <_printf_float+0x2fc>)
 8009ac2:	e7db      	b.n	8009a7c <_printf_float+0x84>
 8009ac4:	6863      	ldr	r3, [r4, #4]
 8009ac6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	a80d      	add	r0, sp, #52	; 0x34
 8009ace:	a90e      	add	r1, sp, #56	; 0x38
 8009ad0:	d140      	bne.n	8009b54 <_printf_float+0x15c>
 8009ad2:	2306      	movs	r3, #6
 8009ad4:	6063      	str	r3, [r4, #4]
 8009ad6:	f04f 0c00 	mov.w	ip, #0
 8009ada:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009ade:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	6022      	str	r2, [r4, #0]
 8009ae6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	463a      	mov	r2, r7
 8009aee:	464b      	mov	r3, r9
 8009af0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009af4:	4628      	mov	r0, r5
 8009af6:	f7ff feee 	bl	80098d6 <__cvt>
 8009afa:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009afe:	2b47      	cmp	r3, #71	; 0x47
 8009b00:	4607      	mov	r7, r0
 8009b02:	d109      	bne.n	8009b18 <_printf_float+0x120>
 8009b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b06:	1cd8      	adds	r0, r3, #3
 8009b08:	db02      	blt.n	8009b10 <_printf_float+0x118>
 8009b0a:	6862      	ldr	r2, [r4, #4]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	dd47      	ble.n	8009ba0 <_printf_float+0x1a8>
 8009b10:	f1a8 0802 	sub.w	r8, r8, #2
 8009b14:	fa5f f888 	uxtb.w	r8, r8
 8009b18:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009b1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009b1e:	d824      	bhi.n	8009b6a <_printf_float+0x172>
 8009b20:	3901      	subs	r1, #1
 8009b22:	4642      	mov	r2, r8
 8009b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b28:	910d      	str	r1, [sp, #52]	; 0x34
 8009b2a:	f7ff ff30 	bl	800998e <__exponent>
 8009b2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b30:	4681      	mov	r9, r0
 8009b32:	1813      	adds	r3, r2, r0
 8009b34:	2a01      	cmp	r2, #1
 8009b36:	6123      	str	r3, [r4, #16]
 8009b38:	dc02      	bgt.n	8009b40 <_printf_float+0x148>
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	07d1      	lsls	r1, r2, #31
 8009b3e:	d501      	bpl.n	8009b44 <_printf_float+0x14c>
 8009b40:	3301      	adds	r3, #1
 8009b42:	6123      	str	r3, [r4, #16]
 8009b44:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d0a2      	beq.n	8009a92 <_printf_float+0x9a>
 8009b4c:	232d      	movs	r3, #45	; 0x2d
 8009b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b52:	e79e      	b.n	8009a92 <_printf_float+0x9a>
 8009b54:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009b58:	f000 816e 	beq.w	8009e38 <_printf_float+0x440>
 8009b5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b60:	d1b9      	bne.n	8009ad6 <_printf_float+0xde>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1b7      	bne.n	8009ad6 <_printf_float+0xde>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e7b4      	b.n	8009ad4 <_printf_float+0xdc>
 8009b6a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009b6e:	d119      	bne.n	8009ba4 <_printf_float+0x1ac>
 8009b70:	2900      	cmp	r1, #0
 8009b72:	6863      	ldr	r3, [r4, #4]
 8009b74:	dd0c      	ble.n	8009b90 <_printf_float+0x198>
 8009b76:	6121      	str	r1, [r4, #16]
 8009b78:	b913      	cbnz	r3, 8009b80 <_printf_float+0x188>
 8009b7a:	6822      	ldr	r2, [r4, #0]
 8009b7c:	07d2      	lsls	r2, r2, #31
 8009b7e:	d502      	bpl.n	8009b86 <_printf_float+0x18e>
 8009b80:	3301      	adds	r3, #1
 8009b82:	440b      	add	r3, r1
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b88:	f04f 0900 	mov.w	r9, #0
 8009b8c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b8e:	e7d9      	b.n	8009b44 <_printf_float+0x14c>
 8009b90:	b913      	cbnz	r3, 8009b98 <_printf_float+0x1a0>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	07d0      	lsls	r0, r2, #31
 8009b96:	d501      	bpl.n	8009b9c <_printf_float+0x1a4>
 8009b98:	3302      	adds	r3, #2
 8009b9a:	e7f3      	b.n	8009b84 <_printf_float+0x18c>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e7f1      	b.n	8009b84 <_printf_float+0x18c>
 8009ba0:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009ba4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	db05      	blt.n	8009bb8 <_printf_float+0x1c0>
 8009bac:	6822      	ldr	r2, [r4, #0]
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	07d1      	lsls	r1, r2, #31
 8009bb2:	d5e8      	bpl.n	8009b86 <_printf_float+0x18e>
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	e7e5      	b.n	8009b84 <_printf_float+0x18c>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bfcc      	ite	gt
 8009bbc:	2301      	movgt	r3, #1
 8009bbe:	f1c3 0302 	rsble	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	e7de      	b.n	8009b84 <_printf_float+0x18c>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	055a      	lsls	r2, r3, #21
 8009bca:	d407      	bmi.n	8009bdc <_printf_float+0x1e4>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	463a      	mov	r2, r7
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b0      	blx	r6
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d129      	bne.n	8009c2e <_printf_float+0x236>
 8009bda:	e764      	b.n	8009aa6 <_printf_float+0xae>
 8009bdc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009be0:	f240 80d7 	bls.w	8009d92 <_printf_float+0x39a>
 8009be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009be8:	2200      	movs	r2, #0
 8009bea:	2300      	movs	r3, #0
 8009bec:	f7f6 fee6 	bl	80009bc <__aeabi_dcmpeq>
 8009bf0:	b388      	cbz	r0, 8009c56 <_printf_float+0x25e>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4a40      	ldr	r2, [pc, #256]	; (8009cf8 <_printf_float+0x300>)
 8009bf6:	4659      	mov	r1, fp
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b0      	blx	r6
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f af52 	beq.w	8009aa6 <_printf_float+0xae>
 8009c02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c06:	429a      	cmp	r2, r3
 8009c08:	db02      	blt.n	8009c10 <_printf_float+0x218>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	07d8      	lsls	r0, r3, #31
 8009c0e:	d50e      	bpl.n	8009c2e <_printf_float+0x236>
 8009c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c14:	4659      	mov	r1, fp
 8009c16:	4628      	mov	r0, r5
 8009c18:	47b0      	blx	r6
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	f43f af43 	beq.w	8009aa6 <_printf_float+0xae>
 8009c20:	2700      	movs	r7, #0
 8009c22:	f104 081a 	add.w	r8, r4, #26
 8009c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	42bb      	cmp	r3, r7
 8009c2c:	dc09      	bgt.n	8009c42 <_printf_float+0x24a>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	079f      	lsls	r7, r3, #30
 8009c32:	f100 80fd 	bmi.w	8009e30 <_printf_float+0x438>
 8009c36:	68e0      	ldr	r0, [r4, #12]
 8009c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3a:	4298      	cmp	r0, r3
 8009c3c:	bfb8      	it	lt
 8009c3e:	4618      	movlt	r0, r3
 8009c40:	e733      	b.n	8009aaa <_printf_float+0xb2>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4642      	mov	r2, r8
 8009c46:	4659      	mov	r1, fp
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b0      	blx	r6
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f43f af2a 	beq.w	8009aa6 <_printf_float+0xae>
 8009c52:	3701      	adds	r7, #1
 8009c54:	e7e7      	b.n	8009c26 <_printf_float+0x22e>
 8009c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	dc2b      	bgt.n	8009cb4 <_printf_float+0x2bc>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4a26      	ldr	r2, [pc, #152]	; (8009cf8 <_printf_float+0x300>)
 8009c60:	4659      	mov	r1, fp
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b0      	blx	r6
 8009c66:	3001      	adds	r0, #1
 8009c68:	f43f af1d 	beq.w	8009aa6 <_printf_float+0xae>
 8009c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c6e:	b923      	cbnz	r3, 8009c7a <_printf_float+0x282>
 8009c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c72:	b913      	cbnz	r3, 8009c7a <_printf_float+0x282>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	07d9      	lsls	r1, r3, #31
 8009c78:	d5d9      	bpl.n	8009c2e <_printf_float+0x236>
 8009c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c7e:	4659      	mov	r1, fp
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b0      	blx	r6
 8009c84:	3001      	adds	r0, #1
 8009c86:	f43f af0e 	beq.w	8009aa6 <_printf_float+0xae>
 8009c8a:	f04f 0800 	mov.w	r8, #0
 8009c8e:	f104 091a 	add.w	r9, r4, #26
 8009c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c94:	425b      	negs	r3, r3
 8009c96:	4543      	cmp	r3, r8
 8009c98:	dc01      	bgt.n	8009c9e <_printf_float+0x2a6>
 8009c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c9c:	e797      	b.n	8009bce <_printf_float+0x1d6>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	464a      	mov	r2, r9
 8009ca2:	4659      	mov	r1, fp
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b0      	blx	r6
 8009ca8:	3001      	adds	r0, #1
 8009caa:	f43f aefc 	beq.w	8009aa6 <_printf_float+0xae>
 8009cae:	f108 0801 	add.w	r8, r8, #1
 8009cb2:	e7ee      	b.n	8009c92 <_printf_float+0x29a>
 8009cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bfa8      	it	ge
 8009cbc:	461a      	movge	r2, r3
 8009cbe:	2a00      	cmp	r2, #0
 8009cc0:	4690      	mov	r8, r2
 8009cc2:	dd07      	ble.n	8009cd4 <_printf_float+0x2dc>
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	4659      	mov	r1, fp
 8009cc8:	463a      	mov	r2, r7
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b0      	blx	r6
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f aee9 	beq.w	8009aa6 <_printf_float+0xae>
 8009cd4:	f104 031a 	add.w	r3, r4, #26
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce2:	e015      	b.n	8009d10 <_printf_float+0x318>
 8009ce4:	7fefffff 	.word	0x7fefffff
 8009ce8:	0800be90 	.word	0x0800be90
 8009cec:	0800be8c 	.word	0x0800be8c
 8009cf0:	0800be98 	.word	0x0800be98
 8009cf4:	0800be94 	.word	0x0800be94
 8009cf8:	0800be9c 	.word	0x0800be9c
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d00:	4659      	mov	r1, fp
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b0      	blx	r6
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f aecd 	beq.w	8009aa6 <_printf_float+0xae>
 8009d0c:	f10a 0a01 	add.w	sl, sl, #1
 8009d10:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009d14:	eba9 0308 	sub.w	r3, r9, r8
 8009d18:	4553      	cmp	r3, sl
 8009d1a:	dcef      	bgt.n	8009cfc <_printf_float+0x304>
 8009d1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d20:	429a      	cmp	r2, r3
 8009d22:	444f      	add	r7, r9
 8009d24:	db14      	blt.n	8009d50 <_printf_float+0x358>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	07da      	lsls	r2, r3, #31
 8009d2a:	d411      	bmi.n	8009d50 <_printf_float+0x358>
 8009d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d30:	eba3 0209 	sub.w	r2, r3, r9
 8009d34:	eba3 0901 	sub.w	r9, r3, r1
 8009d38:	4591      	cmp	r9, r2
 8009d3a:	bfa8      	it	ge
 8009d3c:	4691      	movge	r9, r2
 8009d3e:	f1b9 0f00 	cmp.w	r9, #0
 8009d42:	dc0d      	bgt.n	8009d60 <_printf_float+0x368>
 8009d44:	2700      	movs	r7, #0
 8009d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d4a:	f104 081a 	add.w	r8, r4, #26
 8009d4e:	e018      	b.n	8009d82 <_printf_float+0x38a>
 8009d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d54:	4659      	mov	r1, fp
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b0      	blx	r6
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d1e6      	bne.n	8009d2c <_printf_float+0x334>
 8009d5e:	e6a2      	b.n	8009aa6 <_printf_float+0xae>
 8009d60:	464b      	mov	r3, r9
 8009d62:	463a      	mov	r2, r7
 8009d64:	4659      	mov	r1, fp
 8009d66:	4628      	mov	r0, r5
 8009d68:	47b0      	blx	r6
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	d1ea      	bne.n	8009d44 <_printf_float+0x34c>
 8009d6e:	e69a      	b.n	8009aa6 <_printf_float+0xae>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4642      	mov	r2, r8
 8009d74:	4659      	mov	r1, fp
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b0      	blx	r6
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f ae93 	beq.w	8009aa6 <_printf_float+0xae>
 8009d80:	3701      	adds	r7, #1
 8009d82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	eba3 0309 	sub.w	r3, r3, r9
 8009d8c:	42bb      	cmp	r3, r7
 8009d8e:	dcef      	bgt.n	8009d70 <_printf_float+0x378>
 8009d90:	e74d      	b.n	8009c2e <_printf_float+0x236>
 8009d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d94:	2a01      	cmp	r2, #1
 8009d96:	dc01      	bgt.n	8009d9c <_printf_float+0x3a4>
 8009d98:	07db      	lsls	r3, r3, #31
 8009d9a:	d538      	bpl.n	8009e0e <_printf_float+0x416>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	463a      	mov	r2, r7
 8009da0:	4659      	mov	r1, fp
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b0      	blx	r6
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f ae7d 	beq.w	8009aa6 <_printf_float+0xae>
 8009dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009db0:	4659      	mov	r1, fp
 8009db2:	4628      	mov	r0, r5
 8009db4:	47b0      	blx	r6
 8009db6:	3001      	adds	r0, #1
 8009db8:	f107 0701 	add.w	r7, r7, #1
 8009dbc:	f43f ae73 	beq.w	8009aa6 <_printf_float+0xae>
 8009dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f103 38ff 	add.w	r8, r3, #4294967295
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f7f6 fdf5 	bl	80009bc <__aeabi_dcmpeq>
 8009dd2:	b9c0      	cbnz	r0, 8009e06 <_printf_float+0x40e>
 8009dd4:	4643      	mov	r3, r8
 8009dd6:	463a      	mov	r2, r7
 8009dd8:	4659      	mov	r1, fp
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b0      	blx	r6
 8009dde:	3001      	adds	r0, #1
 8009de0:	d10d      	bne.n	8009dfe <_printf_float+0x406>
 8009de2:	e660      	b.n	8009aa6 <_printf_float+0xae>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4642      	mov	r2, r8
 8009de8:	4659      	mov	r1, fp
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b0      	blx	r6
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f ae59 	beq.w	8009aa6 <_printf_float+0xae>
 8009df4:	3701      	adds	r7, #1
 8009df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	42bb      	cmp	r3, r7
 8009dfc:	dcf2      	bgt.n	8009de4 <_printf_float+0x3ec>
 8009dfe:	464b      	mov	r3, r9
 8009e00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e04:	e6e4      	b.n	8009bd0 <_printf_float+0x1d8>
 8009e06:	2700      	movs	r7, #0
 8009e08:	f104 081a 	add.w	r8, r4, #26
 8009e0c:	e7f3      	b.n	8009df6 <_printf_float+0x3fe>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e7e1      	b.n	8009dd6 <_printf_float+0x3de>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4642      	mov	r2, r8
 8009e16:	4659      	mov	r1, fp
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b0      	blx	r6
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	f43f ae42 	beq.w	8009aa6 <_printf_float+0xae>
 8009e22:	3701      	adds	r7, #1
 8009e24:	68e3      	ldr	r3, [r4, #12]
 8009e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	42bb      	cmp	r3, r7
 8009e2c:	dcf1      	bgt.n	8009e12 <_printf_float+0x41a>
 8009e2e:	e702      	b.n	8009c36 <_printf_float+0x23e>
 8009e30:	2700      	movs	r7, #0
 8009e32:	f104 0819 	add.w	r8, r4, #25
 8009e36:	e7f5      	b.n	8009e24 <_printf_float+0x42c>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f43f ae94 	beq.w	8009b66 <_printf_float+0x16e>
 8009e3e:	f04f 0c00 	mov.w	ip, #0
 8009e42:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009e46:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009e4a:	6022      	str	r2, [r4, #0]
 8009e4c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009e50:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	463a      	mov	r2, r7
 8009e58:	464b      	mov	r3, r9
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f7ff fd3b 	bl	80098d6 <__cvt>
 8009e60:	4607      	mov	r7, r0
 8009e62:	e64f      	b.n	8009b04 <_printf_float+0x10c>

08009e64 <_printf_common>:
 8009e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e68:	4691      	mov	r9, r2
 8009e6a:	461f      	mov	r7, r3
 8009e6c:	688a      	ldr	r2, [r1, #8]
 8009e6e:	690b      	ldr	r3, [r1, #16]
 8009e70:	4606      	mov	r6, r0
 8009e72:	4293      	cmp	r3, r2
 8009e74:	bfb8      	it	lt
 8009e76:	4613      	movlt	r3, r2
 8009e78:	f8c9 3000 	str.w	r3, [r9]
 8009e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e80:	460c      	mov	r4, r1
 8009e82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e86:	b112      	cbz	r2, 8009e8e <_printf_common+0x2a>
 8009e88:	3301      	adds	r3, #1
 8009e8a:	f8c9 3000 	str.w	r3, [r9]
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	0699      	lsls	r1, r3, #26
 8009e92:	bf42      	ittt	mi
 8009e94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e98:	3302      	addmi	r3, #2
 8009e9a:	f8c9 3000 	strmi.w	r3, [r9]
 8009e9e:	6825      	ldr	r5, [r4, #0]
 8009ea0:	f015 0506 	ands.w	r5, r5, #6
 8009ea4:	d107      	bne.n	8009eb6 <_printf_common+0x52>
 8009ea6:	f104 0a19 	add.w	sl, r4, #25
 8009eaa:	68e3      	ldr	r3, [r4, #12]
 8009eac:	f8d9 2000 	ldr.w	r2, [r9]
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	42ab      	cmp	r3, r5
 8009eb4:	dc29      	bgt.n	8009f0a <_printf_common+0xa6>
 8009eb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009eba:	6822      	ldr	r2, [r4, #0]
 8009ebc:	3300      	adds	r3, #0
 8009ebe:	bf18      	it	ne
 8009ec0:	2301      	movne	r3, #1
 8009ec2:	0692      	lsls	r2, r2, #26
 8009ec4:	d42e      	bmi.n	8009f24 <_printf_common+0xc0>
 8009ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009eca:	4639      	mov	r1, r7
 8009ecc:	4630      	mov	r0, r6
 8009ece:	47c0      	blx	r8
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d021      	beq.n	8009f18 <_printf_common+0xb4>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	68e5      	ldr	r5, [r4, #12]
 8009ed8:	f003 0306 	and.w	r3, r3, #6
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	bf18      	it	ne
 8009ee0:	2500      	movne	r5, #0
 8009ee2:	f8d9 2000 	ldr.w	r2, [r9]
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	bf08      	it	eq
 8009eec:	1aad      	subeq	r5, r5, r2
 8009eee:	68a3      	ldr	r3, [r4, #8]
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	bf08      	it	eq
 8009ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	bfc4      	itt	gt
 8009efc:	1a9b      	subgt	r3, r3, r2
 8009efe:	18ed      	addgt	r5, r5, r3
 8009f00:	341a      	adds	r4, #26
 8009f02:	454d      	cmp	r5, r9
 8009f04:	d11a      	bne.n	8009f3c <_printf_common+0xd8>
 8009f06:	2000      	movs	r0, #0
 8009f08:	e008      	b.n	8009f1c <_printf_common+0xb8>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4652      	mov	r2, sl
 8009f0e:	4639      	mov	r1, r7
 8009f10:	4630      	mov	r0, r6
 8009f12:	47c0      	blx	r8
 8009f14:	3001      	adds	r0, #1
 8009f16:	d103      	bne.n	8009f20 <_printf_common+0xbc>
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f20:	3501      	adds	r5, #1
 8009f22:	e7c2      	b.n	8009eaa <_printf_common+0x46>
 8009f24:	2030      	movs	r0, #48	; 0x30
 8009f26:	18e1      	adds	r1, r4, r3
 8009f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f32:	4422      	add	r2, r4
 8009f34:	3302      	adds	r3, #2
 8009f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f3a:	e7c4      	b.n	8009ec6 <_printf_common+0x62>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4622      	mov	r2, r4
 8009f40:	4639      	mov	r1, r7
 8009f42:	4630      	mov	r0, r6
 8009f44:	47c0      	blx	r8
 8009f46:	3001      	adds	r0, #1
 8009f48:	d0e6      	beq.n	8009f18 <_printf_common+0xb4>
 8009f4a:	f109 0901 	add.w	r9, r9, #1
 8009f4e:	e7d8      	b.n	8009f02 <_printf_common+0x9e>

08009f50 <_printf_i>:
 8009f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f58:	460c      	mov	r4, r1
 8009f5a:	7e09      	ldrb	r1, [r1, #24]
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	296e      	cmp	r1, #110	; 0x6e
 8009f60:	4617      	mov	r7, r2
 8009f62:	4606      	mov	r6, r0
 8009f64:	4698      	mov	r8, r3
 8009f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f68:	f000 80b3 	beq.w	800a0d2 <_printf_i+0x182>
 8009f6c:	d822      	bhi.n	8009fb4 <_printf_i+0x64>
 8009f6e:	2963      	cmp	r1, #99	; 0x63
 8009f70:	d036      	beq.n	8009fe0 <_printf_i+0x90>
 8009f72:	d80a      	bhi.n	8009f8a <_printf_i+0x3a>
 8009f74:	2900      	cmp	r1, #0
 8009f76:	f000 80b9 	beq.w	800a0ec <_printf_i+0x19c>
 8009f7a:	2958      	cmp	r1, #88	; 0x58
 8009f7c:	f000 8083 	beq.w	800a086 <_printf_i+0x136>
 8009f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f88:	e032      	b.n	8009ff0 <_printf_i+0xa0>
 8009f8a:	2964      	cmp	r1, #100	; 0x64
 8009f8c:	d001      	beq.n	8009f92 <_printf_i+0x42>
 8009f8e:	2969      	cmp	r1, #105	; 0x69
 8009f90:	d1f6      	bne.n	8009f80 <_printf_i+0x30>
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	6813      	ldr	r3, [r2, #0]
 8009f96:	0605      	lsls	r5, r0, #24
 8009f98:	f103 0104 	add.w	r1, r3, #4
 8009f9c:	d52a      	bpl.n	8009ff4 <_printf_i+0xa4>
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	da03      	bge.n	8009fae <_printf_i+0x5e>
 8009fa6:	222d      	movs	r2, #45	; 0x2d
 8009fa8:	425b      	negs	r3, r3
 8009faa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fae:	486f      	ldr	r0, [pc, #444]	; (800a16c <_printf_i+0x21c>)
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	e039      	b.n	800a028 <_printf_i+0xd8>
 8009fb4:	2973      	cmp	r1, #115	; 0x73
 8009fb6:	f000 809d 	beq.w	800a0f4 <_printf_i+0x1a4>
 8009fba:	d808      	bhi.n	8009fce <_printf_i+0x7e>
 8009fbc:	296f      	cmp	r1, #111	; 0x6f
 8009fbe:	d020      	beq.n	800a002 <_printf_i+0xb2>
 8009fc0:	2970      	cmp	r1, #112	; 0x70
 8009fc2:	d1dd      	bne.n	8009f80 <_printf_i+0x30>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	f043 0320 	orr.w	r3, r3, #32
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	e003      	b.n	8009fd6 <_printf_i+0x86>
 8009fce:	2975      	cmp	r1, #117	; 0x75
 8009fd0:	d017      	beq.n	800a002 <_printf_i+0xb2>
 8009fd2:	2978      	cmp	r1, #120	; 0x78
 8009fd4:	d1d4      	bne.n	8009f80 <_printf_i+0x30>
 8009fd6:	2378      	movs	r3, #120	; 0x78
 8009fd8:	4865      	ldr	r0, [pc, #404]	; (800a170 <_printf_i+0x220>)
 8009fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fde:	e055      	b.n	800a08c <_printf_i+0x13c>
 8009fe0:	6813      	ldr	r3, [r2, #0]
 8009fe2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe6:	1d19      	adds	r1, r3, #4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6011      	str	r1, [r2, #0]
 8009fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e08c      	b.n	800a10e <_printf_i+0x1be>
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ffa:	6011      	str	r1, [r2, #0]
 8009ffc:	bf18      	it	ne
 8009ffe:	b21b      	sxthne	r3, r3
 800a000:	e7cf      	b.n	8009fa2 <_printf_i+0x52>
 800a002:	6813      	ldr	r3, [r2, #0]
 800a004:	6825      	ldr	r5, [r4, #0]
 800a006:	1d18      	adds	r0, r3, #4
 800a008:	6010      	str	r0, [r2, #0]
 800a00a:	0628      	lsls	r0, r5, #24
 800a00c:	d501      	bpl.n	800a012 <_printf_i+0xc2>
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	e002      	b.n	800a018 <_printf_i+0xc8>
 800a012:	0668      	lsls	r0, r5, #25
 800a014:	d5fb      	bpl.n	800a00e <_printf_i+0xbe>
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	296f      	cmp	r1, #111	; 0x6f
 800a01a:	bf14      	ite	ne
 800a01c:	220a      	movne	r2, #10
 800a01e:	2208      	moveq	r2, #8
 800a020:	4852      	ldr	r0, [pc, #328]	; (800a16c <_printf_i+0x21c>)
 800a022:	2100      	movs	r1, #0
 800a024:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a028:	6865      	ldr	r5, [r4, #4]
 800a02a:	2d00      	cmp	r5, #0
 800a02c:	60a5      	str	r5, [r4, #8]
 800a02e:	f2c0 8095 	blt.w	800a15c <_printf_i+0x20c>
 800a032:	6821      	ldr	r1, [r4, #0]
 800a034:	f021 0104 	bic.w	r1, r1, #4
 800a038:	6021      	str	r1, [r4, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d13d      	bne.n	800a0ba <_printf_i+0x16a>
 800a03e:	2d00      	cmp	r5, #0
 800a040:	f040 808e 	bne.w	800a160 <_printf_i+0x210>
 800a044:	4665      	mov	r5, ip
 800a046:	2a08      	cmp	r2, #8
 800a048:	d10b      	bne.n	800a062 <_printf_i+0x112>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	07db      	lsls	r3, r3, #31
 800a04e:	d508      	bpl.n	800a062 <_printf_i+0x112>
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	6862      	ldr	r2, [r4, #4]
 800a054:	429a      	cmp	r2, r3
 800a056:	bfde      	ittt	le
 800a058:	2330      	movle	r3, #48	; 0x30
 800a05a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a05e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a062:	ebac 0305 	sub.w	r3, ip, r5
 800a066:	6123      	str	r3, [r4, #16]
 800a068:	f8cd 8000 	str.w	r8, [sp]
 800a06c:	463b      	mov	r3, r7
 800a06e:	aa03      	add	r2, sp, #12
 800a070:	4621      	mov	r1, r4
 800a072:	4630      	mov	r0, r6
 800a074:	f7ff fef6 	bl	8009e64 <_printf_common>
 800a078:	3001      	adds	r0, #1
 800a07a:	d14d      	bne.n	800a118 <_printf_i+0x1c8>
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	b005      	add	sp, #20
 800a082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a086:	4839      	ldr	r0, [pc, #228]	; (800a16c <_printf_i+0x21c>)
 800a088:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a08c:	6813      	ldr	r3, [r2, #0]
 800a08e:	6821      	ldr	r1, [r4, #0]
 800a090:	1d1d      	adds	r5, r3, #4
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6015      	str	r5, [r2, #0]
 800a096:	060a      	lsls	r2, r1, #24
 800a098:	d50b      	bpl.n	800a0b2 <_printf_i+0x162>
 800a09a:	07ca      	lsls	r2, r1, #31
 800a09c:	bf44      	itt	mi
 800a09e:	f041 0120 	orrmi.w	r1, r1, #32
 800a0a2:	6021      	strmi	r1, [r4, #0]
 800a0a4:	b91b      	cbnz	r3, 800a0ae <_printf_i+0x15e>
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	f022 0220 	bic.w	r2, r2, #32
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	2210      	movs	r2, #16
 800a0b0:	e7b7      	b.n	800a022 <_printf_i+0xd2>
 800a0b2:	064d      	lsls	r5, r1, #25
 800a0b4:	bf48      	it	mi
 800a0b6:	b29b      	uxthmi	r3, r3
 800a0b8:	e7ef      	b.n	800a09a <_printf_i+0x14a>
 800a0ba:	4665      	mov	r5, ip
 800a0bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c0:	fb02 3311 	mls	r3, r2, r1, r3
 800a0c4:	5cc3      	ldrb	r3, [r0, r3]
 800a0c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d1f5      	bne.n	800a0bc <_printf_i+0x16c>
 800a0d0:	e7b9      	b.n	800a046 <_printf_i+0xf6>
 800a0d2:	6813      	ldr	r3, [r2, #0]
 800a0d4:	6825      	ldr	r5, [r4, #0]
 800a0d6:	1d18      	adds	r0, r3, #4
 800a0d8:	6961      	ldr	r1, [r4, #20]
 800a0da:	6010      	str	r0, [r2, #0]
 800a0dc:	0628      	lsls	r0, r5, #24
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	d501      	bpl.n	800a0e6 <_printf_i+0x196>
 800a0e2:	6019      	str	r1, [r3, #0]
 800a0e4:	e002      	b.n	800a0ec <_printf_i+0x19c>
 800a0e6:	066a      	lsls	r2, r5, #25
 800a0e8:	d5fb      	bpl.n	800a0e2 <_printf_i+0x192>
 800a0ea:	8019      	strh	r1, [r3, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4665      	mov	r5, ip
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	e7b9      	b.n	800a068 <_printf_i+0x118>
 800a0f4:	6813      	ldr	r3, [r2, #0]
 800a0f6:	1d19      	adds	r1, r3, #4
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	681d      	ldr	r5, [r3, #0]
 800a0fc:	6862      	ldr	r2, [r4, #4]
 800a0fe:	2100      	movs	r1, #0
 800a100:	4628      	mov	r0, r5
 800a102:	f000 feaf 	bl	800ae64 <memchr>
 800a106:	b108      	cbz	r0, 800a10c <_printf_i+0x1bc>
 800a108:	1b40      	subs	r0, r0, r5
 800a10a:	6060      	str	r0, [r4, #4]
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	2300      	movs	r3, #0
 800a112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a116:	e7a7      	b.n	800a068 <_printf_i+0x118>
 800a118:	6923      	ldr	r3, [r4, #16]
 800a11a:	462a      	mov	r2, r5
 800a11c:	4639      	mov	r1, r7
 800a11e:	4630      	mov	r0, r6
 800a120:	47c0      	blx	r8
 800a122:	3001      	adds	r0, #1
 800a124:	d0aa      	beq.n	800a07c <_printf_i+0x12c>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	079b      	lsls	r3, r3, #30
 800a12a:	d413      	bmi.n	800a154 <_printf_i+0x204>
 800a12c:	68e0      	ldr	r0, [r4, #12]
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	4298      	cmp	r0, r3
 800a132:	bfb8      	it	lt
 800a134:	4618      	movlt	r0, r3
 800a136:	e7a3      	b.n	800a080 <_printf_i+0x130>
 800a138:	2301      	movs	r3, #1
 800a13a:	464a      	mov	r2, r9
 800a13c:	4639      	mov	r1, r7
 800a13e:	4630      	mov	r0, r6
 800a140:	47c0      	blx	r8
 800a142:	3001      	adds	r0, #1
 800a144:	d09a      	beq.n	800a07c <_printf_i+0x12c>
 800a146:	3501      	adds	r5, #1
 800a148:	68e3      	ldr	r3, [r4, #12]
 800a14a:	9a03      	ldr	r2, [sp, #12]
 800a14c:	1a9b      	subs	r3, r3, r2
 800a14e:	42ab      	cmp	r3, r5
 800a150:	dcf2      	bgt.n	800a138 <_printf_i+0x1e8>
 800a152:	e7eb      	b.n	800a12c <_printf_i+0x1dc>
 800a154:	2500      	movs	r5, #0
 800a156:	f104 0919 	add.w	r9, r4, #25
 800a15a:	e7f5      	b.n	800a148 <_printf_i+0x1f8>
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ac      	bne.n	800a0ba <_printf_i+0x16a>
 800a160:	7803      	ldrb	r3, [r0, #0]
 800a162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a16a:	e76c      	b.n	800a046 <_printf_i+0xf6>
 800a16c:	0800be9e 	.word	0x0800be9e
 800a170:	0800beaf 	.word	0x0800beaf

0800a174 <siprintf>:
 800a174:	b40e      	push	{r1, r2, r3}
 800a176:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a17a:	b500      	push	{lr}
 800a17c:	b09c      	sub	sp, #112	; 0x70
 800a17e:	ab1d      	add	r3, sp, #116	; 0x74
 800a180:	9002      	str	r0, [sp, #8]
 800a182:	9006      	str	r0, [sp, #24]
 800a184:	9107      	str	r1, [sp, #28]
 800a186:	9104      	str	r1, [sp, #16]
 800a188:	4808      	ldr	r0, [pc, #32]	; (800a1ac <siprintf+0x38>)
 800a18a:	4909      	ldr	r1, [pc, #36]	; (800a1b0 <siprintf+0x3c>)
 800a18c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a190:	9105      	str	r1, [sp, #20]
 800a192:	6800      	ldr	r0, [r0, #0]
 800a194:	a902      	add	r1, sp, #8
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	f001 fa5c 	bl	800b654 <_svfiprintf_r>
 800a19c:	2200      	movs	r2, #0
 800a19e:	9b02      	ldr	r3, [sp, #8]
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	b01c      	add	sp, #112	; 0x70
 800a1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a8:	b003      	add	sp, #12
 800a1aa:	4770      	bx	lr
 800a1ac:	20000028 	.word	0x20000028
 800a1b0:	ffff0208 	.word	0xffff0208

0800a1b4 <quorem>:
 800a1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	6903      	ldr	r3, [r0, #16]
 800a1ba:	690c      	ldr	r4, [r1, #16]
 800a1bc:	4680      	mov	r8, r0
 800a1be:	42a3      	cmp	r3, r4
 800a1c0:	f2c0 8084 	blt.w	800a2cc <quorem+0x118>
 800a1c4:	3c01      	subs	r4, #1
 800a1c6:	f101 0714 	add.w	r7, r1, #20
 800a1ca:	f100 0614 	add.w	r6, r0, #20
 800a1ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a1d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a1d6:	3501      	adds	r5, #1
 800a1d8:	fbb0 f5f5 	udiv	r5, r0, r5
 800a1dc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a1e0:	eb06 030c 	add.w	r3, r6, ip
 800a1e4:	eb07 090c 	add.w	r9, r7, ip
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	b39d      	cbz	r5, 800a254 <quorem+0xa0>
 800a1ec:	f04f 0a00 	mov.w	sl, #0
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	46b6      	mov	lr, r6
 800a1f4:	46d3      	mov	fp, sl
 800a1f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1fa:	b293      	uxth	r3, r2
 800a1fc:	fb05 a303 	mla	r3, r5, r3, sl
 800a200:	0c12      	lsrs	r2, r2, #16
 800a202:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a206:	fb05 a202 	mla	r2, r5, r2, sl
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ebab 0303 	sub.w	r3, fp, r3
 800a210:	f8de b000 	ldr.w	fp, [lr]
 800a214:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a218:	fa1f fb8b 	uxth.w	fp, fp
 800a21c:	445b      	add	r3, fp
 800a21e:	fa1f fb82 	uxth.w	fp, r2
 800a222:	f8de 2000 	ldr.w	r2, [lr]
 800a226:	4581      	cmp	r9, r0
 800a228:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a22c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a230:	b29b      	uxth	r3, r3
 800a232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a236:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a23a:	f84e 3b04 	str.w	r3, [lr], #4
 800a23e:	d2da      	bcs.n	800a1f6 <quorem+0x42>
 800a240:	f856 300c 	ldr.w	r3, [r6, ip]
 800a244:	b933      	cbnz	r3, 800a254 <quorem+0xa0>
 800a246:	9b01      	ldr	r3, [sp, #4]
 800a248:	3b04      	subs	r3, #4
 800a24a:	429e      	cmp	r6, r3
 800a24c:	461a      	mov	r2, r3
 800a24e:	d331      	bcc.n	800a2b4 <quorem+0x100>
 800a250:	f8c8 4010 	str.w	r4, [r8, #16]
 800a254:	4640      	mov	r0, r8
 800a256:	f001 f827 	bl	800b2a8 <__mcmp>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	db26      	blt.n	800a2ac <quorem+0xf8>
 800a25e:	4630      	mov	r0, r6
 800a260:	f04f 0c00 	mov.w	ip, #0
 800a264:	3501      	adds	r5, #1
 800a266:	f857 1b04 	ldr.w	r1, [r7], #4
 800a26a:	f8d0 e000 	ldr.w	lr, [r0]
 800a26e:	b28b      	uxth	r3, r1
 800a270:	ebac 0303 	sub.w	r3, ip, r3
 800a274:	fa1f f28e 	uxth.w	r2, lr
 800a278:	4413      	add	r3, r2
 800a27a:	0c0a      	lsrs	r2, r1, #16
 800a27c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a284:	b29b      	uxth	r3, r3
 800a286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a28a:	45b9      	cmp	r9, r7
 800a28c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a290:	f840 3b04 	str.w	r3, [r0], #4
 800a294:	d2e7      	bcs.n	800a266 <quorem+0xb2>
 800a296:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a29a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a29e:	b92a      	cbnz	r2, 800a2ac <quorem+0xf8>
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	429e      	cmp	r6, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	d30b      	bcc.n	800a2c0 <quorem+0x10c>
 800a2a8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	b003      	add	sp, #12
 800a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b4:	6812      	ldr	r2, [r2, #0]
 800a2b6:	3b04      	subs	r3, #4
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	d1c9      	bne.n	800a250 <quorem+0x9c>
 800a2bc:	3c01      	subs	r4, #1
 800a2be:	e7c4      	b.n	800a24a <quorem+0x96>
 800a2c0:	6812      	ldr	r2, [r2, #0]
 800a2c2:	3b04      	subs	r3, #4
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	d1ef      	bne.n	800a2a8 <quorem+0xf4>
 800a2c8:	3c01      	subs	r4, #1
 800a2ca:	e7ea      	b.n	800a2a2 <quorem+0xee>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e7ee      	b.n	800a2ae <quorem+0xfa>

0800a2d0 <_dtoa_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	461f      	mov	r7, r3
 800a2d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2da:	b095      	sub	sp, #84	; 0x54
 800a2dc:	4604      	mov	r4, r0
 800a2de:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a2e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2e6:	b93d      	cbnz	r5, 800a2f8 <_dtoa_r+0x28>
 800a2e8:	2010      	movs	r0, #16
 800a2ea:	f000 fdb3 	bl	800ae54 <malloc>
 800a2ee:	6260      	str	r0, [r4, #36]	; 0x24
 800a2f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2f4:	6005      	str	r5, [r0, #0]
 800a2f6:	60c5      	str	r5, [r0, #12]
 800a2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2fa:	6819      	ldr	r1, [r3, #0]
 800a2fc:	b151      	cbz	r1, 800a314 <_dtoa_r+0x44>
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	2301      	movs	r3, #1
 800a302:	4093      	lsls	r3, r2
 800a304:	604a      	str	r2, [r1, #4]
 800a306:	608b      	str	r3, [r1, #8]
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 fded 	bl	800aee8 <_Bfree>
 800a30e:	2200      	movs	r2, #0
 800a310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	1e3b      	subs	r3, r7, #0
 800a316:	bfaf      	iteee	ge
 800a318:	2300      	movge	r3, #0
 800a31a:	2201      	movlt	r2, #1
 800a31c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a320:	9303      	strlt	r3, [sp, #12]
 800a322:	bfac      	ite	ge
 800a324:	f8c8 3000 	strge.w	r3, [r8]
 800a328:	f8c8 2000 	strlt.w	r2, [r8]
 800a32c:	4bae      	ldr	r3, [pc, #696]	; (800a5e8 <_dtoa_r+0x318>)
 800a32e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a332:	ea33 0308 	bics.w	r3, r3, r8
 800a336:	d11b      	bne.n	800a370 <_dtoa_r+0xa0>
 800a338:	f242 730f 	movw	r3, #9999	; 0x270f
 800a33c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	b923      	cbnz	r3, 800a34e <_dtoa_r+0x7e>
 800a344:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a348:	2800      	cmp	r0, #0
 800a34a:	f000 8545 	beq.w	800add8 <_dtoa_r+0xb08>
 800a34e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a350:	b953      	cbnz	r3, 800a368 <_dtoa_r+0x98>
 800a352:	4ba6      	ldr	r3, [pc, #664]	; (800a5ec <_dtoa_r+0x31c>)
 800a354:	e021      	b.n	800a39a <_dtoa_r+0xca>
 800a356:	4ba6      	ldr	r3, [pc, #664]	; (800a5f0 <_dtoa_r+0x320>)
 800a358:	9306      	str	r3, [sp, #24]
 800a35a:	3308      	adds	r3, #8
 800a35c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	9806      	ldr	r0, [sp, #24]
 800a362:	b015      	add	sp, #84	; 0x54
 800a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a368:	4ba0      	ldr	r3, [pc, #640]	; (800a5ec <_dtoa_r+0x31c>)
 800a36a:	9306      	str	r3, [sp, #24]
 800a36c:	3303      	adds	r3, #3
 800a36e:	e7f5      	b.n	800a35c <_dtoa_r+0x8c>
 800a370:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a374:	2200      	movs	r2, #0
 800a376:	2300      	movs	r3, #0
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f6 fb1e 	bl	80009bc <__aeabi_dcmpeq>
 800a380:	4682      	mov	sl, r0
 800a382:	b160      	cbz	r0, 800a39e <_dtoa_r+0xce>
 800a384:	2301      	movs	r3, #1
 800a386:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 8520 	beq.w	800add2 <_dtoa_r+0xb02>
 800a392:	4b98      	ldr	r3, [pc, #608]	; (800a5f4 <_dtoa_r+0x324>)
 800a394:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	3b01      	subs	r3, #1
 800a39a:	9306      	str	r3, [sp, #24]
 800a39c:	e7e0      	b.n	800a360 <_dtoa_r+0x90>
 800a39e:	ab12      	add	r3, sp, #72	; 0x48
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	ab13      	add	r3, sp, #76	; 0x4c
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4632      	mov	r2, r6
 800a3a8:	463b      	mov	r3, r7
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fff4 	bl	800b398 <__d2b>
 800a3b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a3b4:	4683      	mov	fp, r0
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	d07d      	beq.n	800a4b6 <_dtoa_r+0x1e6>
 800a3ba:	46b0      	mov	r8, r6
 800a3bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a3c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a3c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4b89      	ldr	r3, [pc, #548]	; (800a5f8 <_dtoa_r+0x328>)
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	f7f5 fed0 	bl	800017c <__aeabi_dsub>
 800a3dc:	a37c      	add	r3, pc, #496	; (adr r3, 800a5d0 <_dtoa_r+0x300>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f6 f883 	bl	80004ec <__aeabi_dmul>
 800a3e6:	a37c      	add	r3, pc, #496	; (adr r3, 800a5d8 <_dtoa_r+0x308>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f5 fec8 	bl	8000180 <__adddf3>
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f7f6 f80f 	bl	8000418 <__aeabi_i2d>
 800a3fa:	a379      	add	r3, pc, #484	; (adr r3, 800a5e0 <_dtoa_r+0x310>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f6 f874 	bl	80004ec <__aeabi_dmul>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	4630      	mov	r0, r6
 800a40a:	4639      	mov	r1, r7
 800a40c:	f7f5 feb8 	bl	8000180 <__adddf3>
 800a410:	4606      	mov	r6, r0
 800a412:	460f      	mov	r7, r1
 800a414:	f7f6 fb1a 	bl	8000a4c <__aeabi_d2iz>
 800a418:	2200      	movs	r2, #0
 800a41a:	4682      	mov	sl, r0
 800a41c:	2300      	movs	r3, #0
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	f7f6 fad5 	bl	80009d0 <__aeabi_dcmplt>
 800a426:	b148      	cbz	r0, 800a43c <_dtoa_r+0x16c>
 800a428:	4650      	mov	r0, sl
 800a42a:	f7f5 fff5 	bl	8000418 <__aeabi_i2d>
 800a42e:	4632      	mov	r2, r6
 800a430:	463b      	mov	r3, r7
 800a432:	f7f6 fac3 	bl	80009bc <__aeabi_dcmpeq>
 800a436:	b908      	cbnz	r0, 800a43c <_dtoa_r+0x16c>
 800a438:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43c:	f1ba 0f16 	cmp.w	sl, #22
 800a440:	d85a      	bhi.n	800a4f8 <_dtoa_r+0x228>
 800a442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a446:	496d      	ldr	r1, [pc, #436]	; (800a5fc <_dtoa_r+0x32c>)
 800a448:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a450:	f7f6 fadc 	bl	8000a0c <__aeabi_dcmpgt>
 800a454:	2800      	cmp	r0, #0
 800a456:	d051      	beq.n	800a4fc <_dtoa_r+0x22c>
 800a458:	2300      	movs	r3, #0
 800a45a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a45e:	930d      	str	r3, [sp, #52]	; 0x34
 800a460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a462:	1b5d      	subs	r5, r3, r5
 800a464:	1e6b      	subs	r3, r5, #1
 800a466:	9307      	str	r3, [sp, #28]
 800a468:	bf43      	ittte	mi
 800a46a:	2300      	movmi	r3, #0
 800a46c:	f1c5 0901 	rsbmi	r9, r5, #1
 800a470:	9307      	strmi	r3, [sp, #28]
 800a472:	f04f 0900 	movpl.w	r9, #0
 800a476:	f1ba 0f00 	cmp.w	sl, #0
 800a47a:	db41      	blt.n	800a500 <_dtoa_r+0x230>
 800a47c:	9b07      	ldr	r3, [sp, #28]
 800a47e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a482:	4453      	add	r3, sl
 800a484:	9307      	str	r3, [sp, #28]
 800a486:	2300      	movs	r3, #0
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	f200 808f 	bhi.w	800a5b0 <_dtoa_r+0x2e0>
 800a492:	2b05      	cmp	r3, #5
 800a494:	bfc4      	itt	gt
 800a496:	3b04      	subgt	r3, #4
 800a498:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a49a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a49c:	bfc8      	it	gt
 800a49e:	2500      	movgt	r5, #0
 800a4a0:	f1a3 0302 	sub.w	r3, r3, #2
 800a4a4:	bfd8      	it	le
 800a4a6:	2501      	movle	r5, #1
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	f200 808d 	bhi.w	800a5c8 <_dtoa_r+0x2f8>
 800a4ae:	e8df f003 	tbb	[pc, r3]
 800a4b2:	7d7b      	.short	0x7d7b
 800a4b4:	6f2f      	.short	0x6f2f
 800a4b6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a4ba:	441d      	add	r5, r3
 800a4bc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a4c0:	2820      	cmp	r0, #32
 800a4c2:	dd13      	ble.n	800a4ec <_dtoa_r+0x21c>
 800a4c4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a4c8:	9b02      	ldr	r3, [sp, #8]
 800a4ca:	fa08 f800 	lsl.w	r8, r8, r0
 800a4ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a4d2:	fa23 f000 	lsr.w	r0, r3, r0
 800a4d6:	ea48 0000 	orr.w	r0, r8, r0
 800a4da:	f7f5 ff8d 	bl	80003f8 <__aeabi_ui2d>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a4e6:	3d01      	subs	r5, #1
 800a4e8:	9310      	str	r3, [sp, #64]	; 0x40
 800a4ea:	e771      	b.n	800a3d0 <_dtoa_r+0x100>
 800a4ec:	9b02      	ldr	r3, [sp, #8]
 800a4ee:	f1c0 0020 	rsb	r0, r0, #32
 800a4f2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4f6:	e7f0      	b.n	800a4da <_dtoa_r+0x20a>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7b0      	b.n	800a45e <_dtoa_r+0x18e>
 800a4fc:	900d      	str	r0, [sp, #52]	; 0x34
 800a4fe:	e7af      	b.n	800a460 <_dtoa_r+0x190>
 800a500:	f1ca 0300 	rsb	r3, sl, #0
 800a504:	9308      	str	r3, [sp, #32]
 800a506:	2300      	movs	r3, #0
 800a508:	eba9 090a 	sub.w	r9, r9, sl
 800a50c:	930c      	str	r3, [sp, #48]	; 0x30
 800a50e:	e7bc      	b.n	800a48a <_dtoa_r+0x1ba>
 800a510:	2301      	movs	r3, #1
 800a512:	9309      	str	r3, [sp, #36]	; 0x24
 800a514:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a516:	2b00      	cmp	r3, #0
 800a518:	dd74      	ble.n	800a604 <_dtoa_r+0x334>
 800a51a:	4698      	mov	r8, r3
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	2200      	movs	r2, #0
 800a520:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a522:	6072      	str	r2, [r6, #4]
 800a524:	2204      	movs	r2, #4
 800a526:	f102 0014 	add.w	r0, r2, #20
 800a52a:	4298      	cmp	r0, r3
 800a52c:	6871      	ldr	r1, [r6, #4]
 800a52e:	d96e      	bls.n	800a60e <_dtoa_r+0x33e>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fca5 	bl	800ae80 <_Balloc>
 800a536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a538:	6030      	str	r0, [r6, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f1b8 0f0e 	cmp.w	r8, #14
 800a540:	9306      	str	r3, [sp, #24]
 800a542:	f200 80ed 	bhi.w	800a720 <_dtoa_r+0x450>
 800a546:	2d00      	cmp	r5, #0
 800a548:	f000 80ea 	beq.w	800a720 <_dtoa_r+0x450>
 800a54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a550:	f1ba 0f00 	cmp.w	sl, #0
 800a554:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a558:	dd77      	ble.n	800a64a <_dtoa_r+0x37a>
 800a55a:	4a28      	ldr	r2, [pc, #160]	; (800a5fc <_dtoa_r+0x32c>)
 800a55c:	f00a 030f 	and.w	r3, sl, #15
 800a560:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a564:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a568:	06f0      	lsls	r0, r6, #27
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a572:	d568      	bpl.n	800a646 <_dtoa_r+0x376>
 800a574:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a578:	4b21      	ldr	r3, [pc, #132]	; (800a600 <_dtoa_r+0x330>)
 800a57a:	2503      	movs	r5, #3
 800a57c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a580:	f7f6 f8de 	bl	8000740 <__aeabi_ddiv>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	f006 060f 	and.w	r6, r6, #15
 800a58c:	4f1c      	ldr	r7, [pc, #112]	; (800a600 <_dtoa_r+0x330>)
 800a58e:	e04f      	b.n	800a630 <_dtoa_r+0x360>
 800a590:	2301      	movs	r3, #1
 800a592:	9309      	str	r3, [sp, #36]	; 0x24
 800a594:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a596:	4453      	add	r3, sl
 800a598:	f103 0801 	add.w	r8, r3, #1
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	4643      	mov	r3, r8
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	bfb8      	it	lt
 800a5a4:	2301      	movlt	r3, #1
 800a5a6:	e7ba      	b.n	800a51e <_dtoa_r+0x24e>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e7b2      	b.n	800a512 <_dtoa_r+0x242>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e7f0      	b.n	800a592 <_dtoa_r+0x2c2>
 800a5b0:	2501      	movs	r5, #1
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9509      	str	r5, [sp, #36]	; 0x24
 800a5b6:	931e      	str	r3, [sp, #120]	; 0x78
 800a5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5bc:	2200      	movs	r2, #0
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	4698      	mov	r8, r3
 800a5c2:	2312      	movs	r3, #18
 800a5c4:	921f      	str	r2, [sp, #124]	; 0x7c
 800a5c6:	e7aa      	b.n	800a51e <_dtoa_r+0x24e>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a5cc:	e7f4      	b.n	800a5b8 <_dtoa_r+0x2e8>
 800a5ce:	bf00      	nop
 800a5d0:	636f4361 	.word	0x636f4361
 800a5d4:	3fd287a7 	.word	0x3fd287a7
 800a5d8:	8b60c8b3 	.word	0x8b60c8b3
 800a5dc:	3fc68a28 	.word	0x3fc68a28
 800a5e0:	509f79fb 	.word	0x509f79fb
 800a5e4:	3fd34413 	.word	0x3fd34413
 800a5e8:	7ff00000 	.word	0x7ff00000
 800a5ec:	0800bec9 	.word	0x0800bec9
 800a5f0:	0800bec0 	.word	0x0800bec0
 800a5f4:	0800be9d 	.word	0x0800be9d
 800a5f8:	3ff80000 	.word	0x3ff80000
 800a5fc:	0800bef8 	.word	0x0800bef8
 800a600:	0800bed0 	.word	0x0800bed0
 800a604:	2301      	movs	r3, #1
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	4698      	mov	r8, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	e7da      	b.n	800a5c4 <_dtoa_r+0x2f4>
 800a60e:	3101      	adds	r1, #1
 800a610:	6071      	str	r1, [r6, #4]
 800a612:	0052      	lsls	r2, r2, #1
 800a614:	e787      	b.n	800a526 <_dtoa_r+0x256>
 800a616:	07f1      	lsls	r1, r6, #31
 800a618:	d508      	bpl.n	800a62c <_dtoa_r+0x35c>
 800a61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a61e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a622:	f7f5 ff63 	bl	80004ec <__aeabi_dmul>
 800a626:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a62a:	3501      	adds	r5, #1
 800a62c:	1076      	asrs	r6, r6, #1
 800a62e:	3708      	adds	r7, #8
 800a630:	2e00      	cmp	r6, #0
 800a632:	d1f0      	bne.n	800a616 <_dtoa_r+0x346>
 800a634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a63c:	f7f6 f880 	bl	8000740 <__aeabi_ddiv>
 800a640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a644:	e01b      	b.n	800a67e <_dtoa_r+0x3ae>
 800a646:	2502      	movs	r5, #2
 800a648:	e7a0      	b.n	800a58c <_dtoa_r+0x2bc>
 800a64a:	f000 80a4 	beq.w	800a796 <_dtoa_r+0x4c6>
 800a64e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a652:	f1ca 0600 	rsb	r6, sl, #0
 800a656:	4ba0      	ldr	r3, [pc, #640]	; (800a8d8 <_dtoa_r+0x608>)
 800a658:	f006 020f 	and.w	r2, r6, #15
 800a65c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f7f5 ff42 	bl	80004ec <__aeabi_dmul>
 800a668:	2502      	movs	r5, #2
 800a66a:	2300      	movs	r3, #0
 800a66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a670:	4f9a      	ldr	r7, [pc, #616]	; (800a8dc <_dtoa_r+0x60c>)
 800a672:	1136      	asrs	r6, r6, #4
 800a674:	2e00      	cmp	r6, #0
 800a676:	f040 8083 	bne.w	800a780 <_dtoa_r+0x4b0>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e0      	bne.n	800a640 <_dtoa_r+0x370>
 800a67e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 808a 	beq.w	800a79a <_dtoa_r+0x4ca>
 800a686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a68a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a68e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a692:	2200      	movs	r2, #0
 800a694:	4b92      	ldr	r3, [pc, #584]	; (800a8e0 <_dtoa_r+0x610>)
 800a696:	f7f6 f99b 	bl	80009d0 <__aeabi_dcmplt>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d07d      	beq.n	800a79a <_dtoa_r+0x4ca>
 800a69e:	f1b8 0f00 	cmp.w	r8, #0
 800a6a2:	d07a      	beq.n	800a79a <_dtoa_r+0x4ca>
 800a6a4:	9b04      	ldr	r3, [sp, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dd36      	ble.n	800a718 <_dtoa_r+0x448>
 800a6aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4b8c      	ldr	r3, [pc, #560]	; (800a8e4 <_dtoa_r+0x614>)
 800a6b2:	f7f5 ff1b 	bl	80004ec <__aeabi_dmul>
 800a6b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ba:	9e04      	ldr	r6, [sp, #16]
 800a6bc:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a6c0:	3501      	adds	r5, #1
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7f5 fea8 	bl	8000418 <__aeabi_i2d>
 800a6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6cc:	f7f5 ff0e 	bl	80004ec <__aeabi_dmul>
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4b85      	ldr	r3, [pc, #532]	; (800a8e8 <_dtoa_r+0x618>)
 800a6d4:	f7f5 fd54 	bl	8000180 <__adddf3>
 800a6d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a6dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a6e0:	950b      	str	r5, [sp, #44]	; 0x2c
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	d15c      	bne.n	800a7a0 <_dtoa_r+0x4d0>
 800a6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4b7f      	ldr	r3, [pc, #508]	; (800a8ec <_dtoa_r+0x61c>)
 800a6ee:	f7f5 fd45 	bl	800017c <__aeabi_dsub>
 800a6f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6f4:	462b      	mov	r3, r5
 800a6f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6fa:	f7f6 f987 	bl	8000a0c <__aeabi_dcmpgt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f040 8281 	bne.w	800ac06 <_dtoa_r+0x936>
 800a704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a70a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a70e:	f7f6 f95f 	bl	80009d0 <__aeabi_dcmplt>
 800a712:	2800      	cmp	r0, #0
 800a714:	f040 8275 	bne.w	800ac02 <_dtoa_r+0x932>
 800a718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a722:	2b00      	cmp	r3, #0
 800a724:	f2c0 814b 	blt.w	800a9be <_dtoa_r+0x6ee>
 800a728:	f1ba 0f0e 	cmp.w	sl, #14
 800a72c:	f300 8147 	bgt.w	800a9be <_dtoa_r+0x6ee>
 800a730:	4b69      	ldr	r3, [pc, #420]	; (800a8d8 <_dtoa_r+0x608>)
 800a732:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a73e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a740:	2b00      	cmp	r3, #0
 800a742:	f280 80d7 	bge.w	800a8f4 <_dtoa_r+0x624>
 800a746:	f1b8 0f00 	cmp.w	r8, #0
 800a74a:	f300 80d3 	bgt.w	800a8f4 <_dtoa_r+0x624>
 800a74e:	f040 8257 	bne.w	800ac00 <_dtoa_r+0x930>
 800a752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a756:	2200      	movs	r2, #0
 800a758:	4b64      	ldr	r3, [pc, #400]	; (800a8ec <_dtoa_r+0x61c>)
 800a75a:	f7f5 fec7 	bl	80004ec <__aeabi_dmul>
 800a75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a762:	f7f6 f949 	bl	80009f8 <__aeabi_dcmpge>
 800a766:	4646      	mov	r6, r8
 800a768:	4647      	mov	r7, r8
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f040 822d 	bne.w	800abca <_dtoa_r+0x8fa>
 800a770:	9b06      	ldr	r3, [sp, #24]
 800a772:	9a06      	ldr	r2, [sp, #24]
 800a774:	1c5d      	adds	r5, r3, #1
 800a776:	2331      	movs	r3, #49	; 0x31
 800a778:	f10a 0a01 	add.w	sl, sl, #1
 800a77c:	7013      	strb	r3, [r2, #0]
 800a77e:	e228      	b.n	800abd2 <_dtoa_r+0x902>
 800a780:	07f2      	lsls	r2, r6, #31
 800a782:	d505      	bpl.n	800a790 <_dtoa_r+0x4c0>
 800a784:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a788:	f7f5 feb0 	bl	80004ec <__aeabi_dmul>
 800a78c:	2301      	movs	r3, #1
 800a78e:	3501      	adds	r5, #1
 800a790:	1076      	asrs	r6, r6, #1
 800a792:	3708      	adds	r7, #8
 800a794:	e76e      	b.n	800a674 <_dtoa_r+0x3a4>
 800a796:	2502      	movs	r5, #2
 800a798:	e771      	b.n	800a67e <_dtoa_r+0x3ae>
 800a79a:	4657      	mov	r7, sl
 800a79c:	4646      	mov	r6, r8
 800a79e:	e790      	b.n	800a6c2 <_dtoa_r+0x3f2>
 800a7a0:	4b4d      	ldr	r3, [pc, #308]	; (800a8d8 <_dtoa_r+0x608>)
 800a7a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7a6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d048      	beq.n	800a842 <_dtoa_r+0x572>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	494e      	ldr	r1, [pc, #312]	; (800a8f0 <_dtoa_r+0x620>)
 800a7b8:	f7f5 ffc2 	bl	8000740 <__aeabi_ddiv>
 800a7bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7c0:	f7f5 fcdc 	bl	800017c <__aeabi_dsub>
 800a7c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a7c8:	9d06      	ldr	r5, [sp, #24]
 800a7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ce:	f7f6 f93d 	bl	8000a4c <__aeabi_d2iz>
 800a7d2:	9011      	str	r0, [sp, #68]	; 0x44
 800a7d4:	f7f5 fe20 	bl	8000418 <__aeabi_i2d>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e0:	f7f5 fccc 	bl	800017c <__aeabi_dsub>
 800a7e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ea:	3330      	adds	r3, #48	; 0x30
 800a7ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a7f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7f4:	f7f6 f8ec 	bl	80009d0 <__aeabi_dcmplt>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d163      	bne.n	800a8c4 <_dtoa_r+0x5f4>
 800a7fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a800:	2000      	movs	r0, #0
 800a802:	4937      	ldr	r1, [pc, #220]	; (800a8e0 <_dtoa_r+0x610>)
 800a804:	f7f5 fcba 	bl	800017c <__aeabi_dsub>
 800a808:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a80c:	f7f6 f8e0 	bl	80009d0 <__aeabi_dcmplt>
 800a810:	2800      	cmp	r0, #0
 800a812:	f040 80b5 	bne.w	800a980 <_dtoa_r+0x6b0>
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	1aeb      	subs	r3, r5, r3
 800a81a:	429e      	cmp	r6, r3
 800a81c:	f77f af7c 	ble.w	800a718 <_dtoa_r+0x448>
 800a820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a824:	2200      	movs	r2, #0
 800a826:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <_dtoa_r+0x614>)
 800a828:	f7f5 fe60 	bl	80004ec <__aeabi_dmul>
 800a82c:	2200      	movs	r2, #0
 800a82e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a836:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <_dtoa_r+0x614>)
 800a838:	f7f5 fe58 	bl	80004ec <__aeabi_dmul>
 800a83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a840:	e7c3      	b.n	800a7ca <_dtoa_r+0x4fa>
 800a842:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a846:	f7f5 fe51 	bl	80004ec <__aeabi_dmul>
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a850:	199d      	adds	r5, r3, r6
 800a852:	461e      	mov	r6, r3
 800a854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a858:	f7f6 f8f8 	bl	8000a4c <__aeabi_d2iz>
 800a85c:	9011      	str	r0, [sp, #68]	; 0x44
 800a85e:	f7f5 fddb 	bl	8000418 <__aeabi_i2d>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a86a:	f7f5 fc87 	bl	800017c <__aeabi_dsub>
 800a86e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a874:	3330      	adds	r3, #48	; 0x30
 800a876:	f806 3b01 	strb.w	r3, [r6], #1
 800a87a:	42ae      	cmp	r6, r5
 800a87c:	f04f 0200 	mov.w	r2, #0
 800a880:	d124      	bne.n	800a8cc <_dtoa_r+0x5fc>
 800a882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a886:	4b1a      	ldr	r3, [pc, #104]	; (800a8f0 <_dtoa_r+0x620>)
 800a888:	f7f5 fc7a 	bl	8000180 <__adddf3>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a894:	f7f6 f8ba 	bl	8000a0c <__aeabi_dcmpgt>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d171      	bne.n	800a980 <_dtoa_r+0x6b0>
 800a89c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	4913      	ldr	r1, [pc, #76]	; (800a8f0 <_dtoa_r+0x620>)
 800a8a4:	f7f5 fc6a 	bl	800017c <__aeabi_dsub>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b0:	f7f6 f88e 	bl	80009d0 <__aeabi_dcmplt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	f43f af2f 	beq.w	800a718 <_dtoa_r+0x448>
 800a8ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8be:	1e6a      	subs	r2, r5, #1
 800a8c0:	2b30      	cmp	r3, #48	; 0x30
 800a8c2:	d001      	beq.n	800a8c8 <_dtoa_r+0x5f8>
 800a8c4:	46ba      	mov	sl, r7
 800a8c6:	e04a      	b.n	800a95e <_dtoa_r+0x68e>
 800a8c8:	4615      	mov	r5, r2
 800a8ca:	e7f6      	b.n	800a8ba <_dtoa_r+0x5ea>
 800a8cc:	4b05      	ldr	r3, [pc, #20]	; (800a8e4 <_dtoa_r+0x614>)
 800a8ce:	f7f5 fe0d 	bl	80004ec <__aeabi_dmul>
 800a8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8d6:	e7bd      	b.n	800a854 <_dtoa_r+0x584>
 800a8d8:	0800bef8 	.word	0x0800bef8
 800a8dc:	0800bed0 	.word	0x0800bed0
 800a8e0:	3ff00000 	.word	0x3ff00000
 800a8e4:	40240000 	.word	0x40240000
 800a8e8:	401c0000 	.word	0x401c0000
 800a8ec:	40140000 	.word	0x40140000
 800a8f0:	3fe00000 	.word	0x3fe00000
 800a8f4:	9d06      	ldr	r5, [sp, #24]
 800a8f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8fe:	4630      	mov	r0, r6
 800a900:	4639      	mov	r1, r7
 800a902:	f7f5 ff1d 	bl	8000740 <__aeabi_ddiv>
 800a906:	f7f6 f8a1 	bl	8000a4c <__aeabi_d2iz>
 800a90a:	4681      	mov	r9, r0
 800a90c:	f7f5 fd84 	bl	8000418 <__aeabi_i2d>
 800a910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a914:	f7f5 fdea 	bl	80004ec <__aeabi_dmul>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4630      	mov	r0, r6
 800a91e:	4639      	mov	r1, r7
 800a920:	f7f5 fc2c 	bl	800017c <__aeabi_dsub>
 800a924:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a928:	f805 6b01 	strb.w	r6, [r5], #1
 800a92c:	9e06      	ldr	r6, [sp, #24]
 800a92e:	4602      	mov	r2, r0
 800a930:	1bae      	subs	r6, r5, r6
 800a932:	45b0      	cmp	r8, r6
 800a934:	460b      	mov	r3, r1
 800a936:	d135      	bne.n	800a9a4 <_dtoa_r+0x6d4>
 800a938:	f7f5 fc22 	bl	8000180 <__adddf3>
 800a93c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a940:	4606      	mov	r6, r0
 800a942:	460f      	mov	r7, r1
 800a944:	f7f6 f862 	bl	8000a0c <__aeabi_dcmpgt>
 800a948:	b9c8      	cbnz	r0, 800a97e <_dtoa_r+0x6ae>
 800a94a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a94e:	4630      	mov	r0, r6
 800a950:	4639      	mov	r1, r7
 800a952:	f7f6 f833 	bl	80009bc <__aeabi_dcmpeq>
 800a956:	b110      	cbz	r0, 800a95e <_dtoa_r+0x68e>
 800a958:	f019 0f01 	tst.w	r9, #1
 800a95c:	d10f      	bne.n	800a97e <_dtoa_r+0x6ae>
 800a95e:	4659      	mov	r1, fp
 800a960:	4620      	mov	r0, r4
 800a962:	f000 fac1 	bl	800aee8 <_Bfree>
 800a966:	2300      	movs	r3, #0
 800a968:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a96a:	702b      	strb	r3, [r5, #0]
 800a96c:	f10a 0301 	add.w	r3, sl, #1
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a974:	2b00      	cmp	r3, #0
 800a976:	f43f acf3 	beq.w	800a360 <_dtoa_r+0x90>
 800a97a:	601d      	str	r5, [r3, #0]
 800a97c:	e4f0      	b.n	800a360 <_dtoa_r+0x90>
 800a97e:	4657      	mov	r7, sl
 800a980:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a984:	1e6b      	subs	r3, r5, #1
 800a986:	2a39      	cmp	r2, #57	; 0x39
 800a988:	d106      	bne.n	800a998 <_dtoa_r+0x6c8>
 800a98a:	9a06      	ldr	r2, [sp, #24]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d107      	bne.n	800a9a0 <_dtoa_r+0x6d0>
 800a990:	2330      	movs	r3, #48	; 0x30
 800a992:	7013      	strb	r3, [r2, #0]
 800a994:	4613      	mov	r3, r2
 800a996:	3701      	adds	r7, #1
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	3201      	adds	r2, #1
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	e791      	b.n	800a8c4 <_dtoa_r+0x5f4>
 800a9a0:	461d      	mov	r5, r3
 800a9a2:	e7ed      	b.n	800a980 <_dtoa_r+0x6b0>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4b99      	ldr	r3, [pc, #612]	; (800ac0c <_dtoa_r+0x93c>)
 800a9a8:	f7f5 fda0 	bl	80004ec <__aeabi_dmul>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	f7f6 f802 	bl	80009bc <__aeabi_dcmpeq>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d09e      	beq.n	800a8fa <_dtoa_r+0x62a>
 800a9bc:	e7cf      	b.n	800a95e <_dtoa_r+0x68e>
 800a9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	f000 8088 	beq.w	800aad6 <_dtoa_r+0x806>
 800a9c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a9c8:	2a01      	cmp	r2, #1
 800a9ca:	dc6d      	bgt.n	800aaa8 <_dtoa_r+0x7d8>
 800a9cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	d066      	beq.n	800aaa0 <_dtoa_r+0x7d0>
 800a9d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9d6:	464d      	mov	r5, r9
 800a9d8:	9e08      	ldr	r6, [sp, #32]
 800a9da:	9a07      	ldr	r2, [sp, #28]
 800a9dc:	2101      	movs	r1, #1
 800a9de:	441a      	add	r2, r3
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4499      	add	r9, r3
 800a9e4:	9207      	str	r2, [sp, #28]
 800a9e6:	f000 fb1f 	bl	800b028 <__i2b>
 800a9ea:	4607      	mov	r7, r0
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	dd0b      	ble.n	800aa08 <_dtoa_r+0x738>
 800a9f0:	9b07      	ldr	r3, [sp, #28]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dd08      	ble.n	800aa08 <_dtoa_r+0x738>
 800a9f6:	42ab      	cmp	r3, r5
 800a9f8:	bfa8      	it	ge
 800a9fa:	462b      	movge	r3, r5
 800a9fc:	9a07      	ldr	r2, [sp, #28]
 800a9fe:	eba9 0903 	sub.w	r9, r9, r3
 800aa02:	1aed      	subs	r5, r5, r3
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	9307      	str	r3, [sp, #28]
 800aa08:	9b08      	ldr	r3, [sp, #32]
 800aa0a:	b1eb      	cbz	r3, 800aa48 <_dtoa_r+0x778>
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d065      	beq.n	800aade <_dtoa_r+0x80e>
 800aa12:	b18e      	cbz	r6, 800aa38 <_dtoa_r+0x768>
 800aa14:	4639      	mov	r1, r7
 800aa16:	4632      	mov	r2, r6
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 fba3 	bl	800b164 <__pow5mult>
 800aa1e:	465a      	mov	r2, fp
 800aa20:	4601      	mov	r1, r0
 800aa22:	4607      	mov	r7, r0
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fb08 	bl	800b03a <__multiply>
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 fa5a 	bl	800aee8 <_Bfree>
 800aa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa36:	469b      	mov	fp, r3
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	1b9a      	subs	r2, r3, r6
 800aa3c:	d004      	beq.n	800aa48 <_dtoa_r+0x778>
 800aa3e:	4659      	mov	r1, fp
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fb8f 	bl	800b164 <__pow5mult>
 800aa46:	4683      	mov	fp, r0
 800aa48:	2101      	movs	r1, #1
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 faec 	bl	800b028 <__i2b>
 800aa50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa52:	4606      	mov	r6, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 81c6 	beq.w	800ade6 <_dtoa_r+0xb16>
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fb80 	bl	800b164 <__pow5mult>
 800aa64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa66:	4606      	mov	r6, r0
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	dc3e      	bgt.n	800aaea <_dtoa_r+0x81a>
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d137      	bne.n	800aae2 <_dtoa_r+0x812>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d134      	bne.n	800aae6 <_dtoa_r+0x816>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa82:	0d1b      	lsrs	r3, r3, #20
 800aa84:	051b      	lsls	r3, r3, #20
 800aa86:	b12b      	cbz	r3, 800aa94 <_dtoa_r+0x7c4>
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	f109 0901 	add.w	r9, r9, #1
 800aa8e:	3301      	adds	r3, #1
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	2301      	movs	r3, #1
 800aa94:	9308      	str	r3, [sp, #32]
 800aa96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d128      	bne.n	800aaee <_dtoa_r+0x81e>
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	e02e      	b.n	800aafe <_dtoa_r+0x82e>
 800aaa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaa6:	e796      	b.n	800a9d6 <_dtoa_r+0x706>
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	f108 36ff 	add.w	r6, r8, #4294967295
 800aaae:	42b3      	cmp	r3, r6
 800aab0:	bfb7      	itett	lt
 800aab2:	9b08      	ldrlt	r3, [sp, #32]
 800aab4:	1b9e      	subge	r6, r3, r6
 800aab6:	1af2      	sublt	r2, r6, r3
 800aab8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800aaba:	bfbf      	itttt	lt
 800aabc:	9608      	strlt	r6, [sp, #32]
 800aabe:	189b      	addlt	r3, r3, r2
 800aac0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800aac2:	2600      	movlt	r6, #0
 800aac4:	f1b8 0f00 	cmp.w	r8, #0
 800aac8:	bfb9      	ittee	lt
 800aaca:	eba9 0508 	sublt.w	r5, r9, r8
 800aace:	2300      	movlt	r3, #0
 800aad0:	464d      	movge	r5, r9
 800aad2:	4643      	movge	r3, r8
 800aad4:	e781      	b.n	800a9da <_dtoa_r+0x70a>
 800aad6:	9e08      	ldr	r6, [sp, #32]
 800aad8:	464d      	mov	r5, r9
 800aada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aadc:	e786      	b.n	800a9ec <_dtoa_r+0x71c>
 800aade:	9a08      	ldr	r2, [sp, #32]
 800aae0:	e7ad      	b.n	800aa3e <_dtoa_r+0x76e>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e7d6      	b.n	800aa94 <_dtoa_r+0x7c4>
 800aae6:	9b02      	ldr	r3, [sp, #8]
 800aae8:	e7d4      	b.n	800aa94 <_dtoa_r+0x7c4>
 800aaea:	2300      	movs	r3, #0
 800aaec:	9308      	str	r3, [sp, #32]
 800aaee:	6933      	ldr	r3, [r6, #16]
 800aaf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaf4:	6918      	ldr	r0, [r3, #16]
 800aaf6:	f000 fa49 	bl	800af8c <__hi0bits>
 800aafa:	f1c0 0020 	rsb	r0, r0, #32
 800aafe:	9b07      	ldr	r3, [sp, #28]
 800ab00:	4418      	add	r0, r3
 800ab02:	f010 001f 	ands.w	r0, r0, #31
 800ab06:	d047      	beq.n	800ab98 <_dtoa_r+0x8c8>
 800ab08:	f1c0 0320 	rsb	r3, r0, #32
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	dd3b      	ble.n	800ab88 <_dtoa_r+0x8b8>
 800ab10:	9b07      	ldr	r3, [sp, #28]
 800ab12:	f1c0 001c 	rsb	r0, r0, #28
 800ab16:	4481      	add	r9, r0
 800ab18:	4405      	add	r5, r0
 800ab1a:	4403      	add	r3, r0
 800ab1c:	9307      	str	r3, [sp, #28]
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	dd05      	ble.n	800ab30 <_dtoa_r+0x860>
 800ab24:	4659      	mov	r1, fp
 800ab26:	464a      	mov	r2, r9
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fb69 	bl	800b200 <__lshift>
 800ab2e:	4683      	mov	fp, r0
 800ab30:	9b07      	ldr	r3, [sp, #28]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dd05      	ble.n	800ab42 <_dtoa_r+0x872>
 800ab36:	4631      	mov	r1, r6
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fb60 	bl	800b200 <__lshift>
 800ab40:	4606      	mov	r6, r0
 800ab42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab44:	b353      	cbz	r3, 800ab9c <_dtoa_r+0x8cc>
 800ab46:	4631      	mov	r1, r6
 800ab48:	4658      	mov	r0, fp
 800ab4a:	f000 fbad 	bl	800b2a8 <__mcmp>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	da24      	bge.n	800ab9c <_dtoa_r+0x8cc>
 800ab52:	2300      	movs	r3, #0
 800ab54:	4659      	mov	r1, fp
 800ab56:	220a      	movs	r2, #10
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 f9dc 	bl	800af16 <__multadd>
 800ab5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab60:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab64:	4683      	mov	fp, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 8144 	beq.w	800adf4 <_dtoa_r+0xb24>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4639      	mov	r1, r7
 800ab70:	220a      	movs	r2, #10
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 f9cf 	bl	800af16 <__multadd>
 800ab78:	9b04      	ldr	r3, [sp, #16]
 800ab7a:	4607      	mov	r7, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dc4d      	bgt.n	800ac1c <_dtoa_r+0x94c>
 800ab80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	dd4a      	ble.n	800ac1c <_dtoa_r+0x94c>
 800ab86:	e011      	b.n	800abac <_dtoa_r+0x8dc>
 800ab88:	d0c9      	beq.n	800ab1e <_dtoa_r+0x84e>
 800ab8a:	9a07      	ldr	r2, [sp, #28]
 800ab8c:	331c      	adds	r3, #28
 800ab8e:	441a      	add	r2, r3
 800ab90:	4499      	add	r9, r3
 800ab92:	441d      	add	r5, r3
 800ab94:	4613      	mov	r3, r2
 800ab96:	e7c1      	b.n	800ab1c <_dtoa_r+0x84c>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	e7f6      	b.n	800ab8a <_dtoa_r+0x8ba>
 800ab9c:	f1b8 0f00 	cmp.w	r8, #0
 800aba0:	dc36      	bgt.n	800ac10 <_dtoa_r+0x940>
 800aba2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	dd33      	ble.n	800ac10 <_dtoa_r+0x940>
 800aba8:	f8cd 8010 	str.w	r8, [sp, #16]
 800abac:	9b04      	ldr	r3, [sp, #16]
 800abae:	b963      	cbnz	r3, 800abca <_dtoa_r+0x8fa>
 800abb0:	4631      	mov	r1, r6
 800abb2:	2205      	movs	r2, #5
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 f9ae 	bl	800af16 <__multadd>
 800abba:	4601      	mov	r1, r0
 800abbc:	4606      	mov	r6, r0
 800abbe:	4658      	mov	r0, fp
 800abc0:	f000 fb72 	bl	800b2a8 <__mcmp>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	f73f add3 	bgt.w	800a770 <_dtoa_r+0x4a0>
 800abca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800abcc:	9d06      	ldr	r5, [sp, #24]
 800abce:	ea6f 0a03 	mvn.w	sl, r3
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	4631      	mov	r1, r6
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f985 	bl	800aee8 <_Bfree>
 800abde:	2f00      	cmp	r7, #0
 800abe0:	f43f aebd 	beq.w	800a95e <_dtoa_r+0x68e>
 800abe4:	f1b9 0f00 	cmp.w	r9, #0
 800abe8:	d005      	beq.n	800abf6 <_dtoa_r+0x926>
 800abea:	45b9      	cmp	r9, r7
 800abec:	d003      	beq.n	800abf6 <_dtoa_r+0x926>
 800abee:	4649      	mov	r1, r9
 800abf0:	4620      	mov	r0, r4
 800abf2:	f000 f979 	bl	800aee8 <_Bfree>
 800abf6:	4639      	mov	r1, r7
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 f975 	bl	800aee8 <_Bfree>
 800abfe:	e6ae      	b.n	800a95e <_dtoa_r+0x68e>
 800ac00:	2600      	movs	r6, #0
 800ac02:	4637      	mov	r7, r6
 800ac04:	e7e1      	b.n	800abca <_dtoa_r+0x8fa>
 800ac06:	46ba      	mov	sl, r7
 800ac08:	4637      	mov	r7, r6
 800ac0a:	e5b1      	b.n	800a770 <_dtoa_r+0x4a0>
 800ac0c:	40240000 	.word	0x40240000
 800ac10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac12:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 80f3 	beq.w	800ae02 <_dtoa_r+0xb32>
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	dd05      	ble.n	800ac2c <_dtoa_r+0x95c>
 800ac20:	4639      	mov	r1, r7
 800ac22:	462a      	mov	r2, r5
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 faeb 	bl	800b200 <__lshift>
 800ac2a:	4607      	mov	r7, r0
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d04c      	beq.n	800accc <_dtoa_r+0x9fc>
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 f923 	bl	800ae80 <_Balloc>
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	f107 010c 	add.w	r1, r7, #12
 800ac42:	3202      	adds	r2, #2
 800ac44:	0092      	lsls	r2, r2, #2
 800ac46:	300c      	adds	r0, #12
 800ac48:	f7fe fe32 	bl	80098b0 <memcpy>
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fad5 	bl	800b200 <__lshift>
 800ac56:	46b9      	mov	r9, r7
 800ac58:	4607      	mov	r7, r0
 800ac5a:	9b06      	ldr	r3, [sp, #24]
 800ac5c:	9307      	str	r3, [sp, #28]
 800ac5e:	9b02      	ldr	r3, [sp, #8]
 800ac60:	f003 0301 	and.w	r3, r3, #1
 800ac64:	9308      	str	r3, [sp, #32]
 800ac66:	4631      	mov	r1, r6
 800ac68:	4658      	mov	r0, fp
 800ac6a:	f7ff faa3 	bl	800a1b4 <quorem>
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4605      	mov	r5, r0
 800ac72:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ac76:	4658      	mov	r0, fp
 800ac78:	f000 fb16 	bl	800b2a8 <__mcmp>
 800ac7c:	463a      	mov	r2, r7
 800ac7e:	9002      	str	r0, [sp, #8]
 800ac80:	4631      	mov	r1, r6
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fb2a 	bl	800b2dc <__mdiff>
 800ac88:	68c3      	ldr	r3, [r0, #12]
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	bb03      	cbnz	r3, 800acd0 <_dtoa_r+0xa00>
 800ac8e:	4601      	mov	r1, r0
 800ac90:	9009      	str	r0, [sp, #36]	; 0x24
 800ac92:	4658      	mov	r0, fp
 800ac94:	f000 fb08 	bl	800b2a8 <__mcmp>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	4620      	mov	r0, r4
 800aca0:	9309      	str	r3, [sp, #36]	; 0x24
 800aca2:	f000 f921 	bl	800aee8 <_Bfree>
 800aca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca8:	b9a3      	cbnz	r3, 800acd4 <_dtoa_r+0xa04>
 800acaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800acac:	b992      	cbnz	r2, 800acd4 <_dtoa_r+0xa04>
 800acae:	9a08      	ldr	r2, [sp, #32]
 800acb0:	b982      	cbnz	r2, 800acd4 <_dtoa_r+0xa04>
 800acb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800acb6:	d029      	beq.n	800ad0c <_dtoa_r+0xa3c>
 800acb8:	9b02      	ldr	r3, [sp, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dd01      	ble.n	800acc2 <_dtoa_r+0x9f2>
 800acbe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800acc2:	9b07      	ldr	r3, [sp, #28]
 800acc4:	1c5d      	adds	r5, r3, #1
 800acc6:	f883 8000 	strb.w	r8, [r3]
 800acca:	e784      	b.n	800abd6 <_dtoa_r+0x906>
 800accc:	4638      	mov	r0, r7
 800acce:	e7c2      	b.n	800ac56 <_dtoa_r+0x986>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e7e3      	b.n	800ac9c <_dtoa_r+0x9cc>
 800acd4:	9a02      	ldr	r2, [sp, #8]
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	db04      	blt.n	800ace4 <_dtoa_r+0xa14>
 800acda:	d123      	bne.n	800ad24 <_dtoa_r+0xa54>
 800acdc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800acde:	bb0a      	cbnz	r2, 800ad24 <_dtoa_r+0xa54>
 800ace0:	9a08      	ldr	r2, [sp, #32]
 800ace2:	b9fa      	cbnz	r2, 800ad24 <_dtoa_r+0xa54>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	ddec      	ble.n	800acc2 <_dtoa_r+0x9f2>
 800ace8:	4659      	mov	r1, fp
 800acea:	2201      	movs	r2, #1
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fa87 	bl	800b200 <__lshift>
 800acf2:	4631      	mov	r1, r6
 800acf4:	4683      	mov	fp, r0
 800acf6:	f000 fad7 	bl	800b2a8 <__mcmp>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	dc03      	bgt.n	800ad06 <_dtoa_r+0xa36>
 800acfe:	d1e0      	bne.n	800acc2 <_dtoa_r+0x9f2>
 800ad00:	f018 0f01 	tst.w	r8, #1
 800ad04:	d0dd      	beq.n	800acc2 <_dtoa_r+0x9f2>
 800ad06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad0a:	d1d8      	bne.n	800acbe <_dtoa_r+0x9ee>
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	9a07      	ldr	r2, [sp, #28]
 800ad10:	1c5d      	adds	r5, r3, #1
 800ad12:	2339      	movs	r3, #57	; 0x39
 800ad14:	7013      	strb	r3, [r2, #0]
 800ad16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad1a:	1e6a      	subs	r2, r5, #1
 800ad1c:	2b39      	cmp	r3, #57	; 0x39
 800ad1e:	d04d      	beq.n	800adbc <_dtoa_r+0xaec>
 800ad20:	3301      	adds	r3, #1
 800ad22:	e052      	b.n	800adca <_dtoa_r+0xafa>
 800ad24:	9a07      	ldr	r2, [sp, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f102 0501 	add.w	r5, r2, #1
 800ad2c:	dd06      	ble.n	800ad3c <_dtoa_r+0xa6c>
 800ad2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ad32:	d0eb      	beq.n	800ad0c <_dtoa_r+0xa3c>
 800ad34:	f108 0801 	add.w	r8, r8, #1
 800ad38:	9b07      	ldr	r3, [sp, #28]
 800ad3a:	e7c4      	b.n	800acc6 <_dtoa_r+0x9f6>
 800ad3c:	9b06      	ldr	r3, [sp, #24]
 800ad3e:	9a04      	ldr	r2, [sp, #16]
 800ad40:	1aeb      	subs	r3, r5, r3
 800ad42:	4293      	cmp	r3, r2
 800ad44:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ad48:	d021      	beq.n	800ad8e <_dtoa_r+0xabe>
 800ad4a:	4659      	mov	r1, fp
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	220a      	movs	r2, #10
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 f8e0 	bl	800af16 <__multadd>
 800ad56:	45b9      	cmp	r9, r7
 800ad58:	4683      	mov	fp, r0
 800ad5a:	f04f 0300 	mov.w	r3, #0
 800ad5e:	f04f 020a 	mov.w	r2, #10
 800ad62:	4649      	mov	r1, r9
 800ad64:	4620      	mov	r0, r4
 800ad66:	d105      	bne.n	800ad74 <_dtoa_r+0xaa4>
 800ad68:	f000 f8d5 	bl	800af16 <__multadd>
 800ad6c:	4681      	mov	r9, r0
 800ad6e:	4607      	mov	r7, r0
 800ad70:	9507      	str	r5, [sp, #28]
 800ad72:	e778      	b.n	800ac66 <_dtoa_r+0x996>
 800ad74:	f000 f8cf 	bl	800af16 <__multadd>
 800ad78:	4639      	mov	r1, r7
 800ad7a:	4681      	mov	r9, r0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	220a      	movs	r2, #10
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 f8c8 	bl	800af16 <__multadd>
 800ad86:	4607      	mov	r7, r0
 800ad88:	e7f2      	b.n	800ad70 <_dtoa_r+0xaa0>
 800ad8a:	f04f 0900 	mov.w	r9, #0
 800ad8e:	4659      	mov	r1, fp
 800ad90:	2201      	movs	r2, #1
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fa34 	bl	800b200 <__lshift>
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4683      	mov	fp, r0
 800ad9c:	f000 fa84 	bl	800b2a8 <__mcmp>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	dcb8      	bgt.n	800ad16 <_dtoa_r+0xa46>
 800ada4:	d102      	bne.n	800adac <_dtoa_r+0xadc>
 800ada6:	f018 0f01 	tst.w	r8, #1
 800adaa:	d1b4      	bne.n	800ad16 <_dtoa_r+0xa46>
 800adac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adb0:	1e6a      	subs	r2, r5, #1
 800adb2:	2b30      	cmp	r3, #48	; 0x30
 800adb4:	f47f af0f 	bne.w	800abd6 <_dtoa_r+0x906>
 800adb8:	4615      	mov	r5, r2
 800adba:	e7f7      	b.n	800adac <_dtoa_r+0xadc>
 800adbc:	9b06      	ldr	r3, [sp, #24]
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d105      	bne.n	800adce <_dtoa_r+0xafe>
 800adc2:	2331      	movs	r3, #49	; 0x31
 800adc4:	9a06      	ldr	r2, [sp, #24]
 800adc6:	f10a 0a01 	add.w	sl, sl, #1
 800adca:	7013      	strb	r3, [r2, #0]
 800adcc:	e703      	b.n	800abd6 <_dtoa_r+0x906>
 800adce:	4615      	mov	r5, r2
 800add0:	e7a1      	b.n	800ad16 <_dtoa_r+0xa46>
 800add2:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <_dtoa_r+0xb60>)
 800add4:	f7ff bae1 	b.w	800a39a <_dtoa_r+0xca>
 800add8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adda:	2b00      	cmp	r3, #0
 800addc:	f47f aabb 	bne.w	800a356 <_dtoa_r+0x86>
 800ade0:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <_dtoa_r+0xb64>)
 800ade2:	f7ff bada 	b.w	800a39a <_dtoa_r+0xca>
 800ade6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ade8:	2b01      	cmp	r3, #1
 800adea:	f77f ae3f 	ble.w	800aa6c <_dtoa_r+0x79c>
 800adee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf0:	9308      	str	r3, [sp, #32]
 800adf2:	e653      	b.n	800aa9c <_dtoa_r+0x7cc>
 800adf4:	9b04      	ldr	r3, [sp, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dc03      	bgt.n	800ae02 <_dtoa_r+0xb32>
 800adfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	f73f aed5 	bgt.w	800abac <_dtoa_r+0x8dc>
 800ae02:	9d06      	ldr	r5, [sp, #24]
 800ae04:	4631      	mov	r1, r6
 800ae06:	4658      	mov	r0, fp
 800ae08:	f7ff f9d4 	bl	800a1b4 <quorem>
 800ae0c:	9b06      	ldr	r3, [sp, #24]
 800ae0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae12:	f805 8b01 	strb.w	r8, [r5], #1
 800ae16:	9a04      	ldr	r2, [sp, #16]
 800ae18:	1aeb      	subs	r3, r5, r3
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	ddb5      	ble.n	800ad8a <_dtoa_r+0xaba>
 800ae1e:	4659      	mov	r1, fp
 800ae20:	2300      	movs	r3, #0
 800ae22:	220a      	movs	r2, #10
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 f876 	bl	800af16 <__multadd>
 800ae2a:	4683      	mov	fp, r0
 800ae2c:	e7ea      	b.n	800ae04 <_dtoa_r+0xb34>
 800ae2e:	bf00      	nop
 800ae30:	0800be9c 	.word	0x0800be9c
 800ae34:	0800bec0 	.word	0x0800bec0

0800ae38 <_localeconv_r>:
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <_localeconv_r+0x14>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6a18      	ldr	r0, [r3, #32]
 800ae3e:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <_localeconv_r+0x18>)
 800ae40:	2800      	cmp	r0, #0
 800ae42:	bf08      	it	eq
 800ae44:	4618      	moveq	r0, r3
 800ae46:	30f0      	adds	r0, #240	; 0xf0
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	20000028 	.word	0x20000028
 800ae50:	2000008c 	.word	0x2000008c

0800ae54 <malloc>:
 800ae54:	4b02      	ldr	r3, [pc, #8]	; (800ae60 <malloc+0xc>)
 800ae56:	4601      	mov	r1, r0
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	f000 bb47 	b.w	800b4ec <_malloc_r>
 800ae5e:	bf00      	nop
 800ae60:	20000028 	.word	0x20000028

0800ae64 <memchr>:
 800ae64:	b510      	push	{r4, lr}
 800ae66:	b2c9      	uxtb	r1, r1
 800ae68:	4402      	add	r2, r0
 800ae6a:	4290      	cmp	r0, r2
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	d101      	bne.n	800ae74 <memchr+0x10>
 800ae70:	2300      	movs	r3, #0
 800ae72:	e003      	b.n	800ae7c <memchr+0x18>
 800ae74:	781c      	ldrb	r4, [r3, #0]
 800ae76:	3001      	adds	r0, #1
 800ae78:	428c      	cmp	r4, r1
 800ae7a:	d1f6      	bne.n	800ae6a <memchr+0x6>
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	bd10      	pop	{r4, pc}

0800ae80 <_Balloc>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae84:	4604      	mov	r4, r0
 800ae86:	460e      	mov	r6, r1
 800ae88:	b93d      	cbnz	r5, 800ae9a <_Balloc+0x1a>
 800ae8a:	2010      	movs	r0, #16
 800ae8c:	f7ff ffe2 	bl	800ae54 <malloc>
 800ae90:	6260      	str	r0, [r4, #36]	; 0x24
 800ae92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae96:	6005      	str	r5, [r0, #0]
 800ae98:	60c5      	str	r5, [r0, #12]
 800ae9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ae9c:	68eb      	ldr	r3, [r5, #12]
 800ae9e:	b183      	cbz	r3, 800aec2 <_Balloc+0x42>
 800aea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aea8:	b9b8      	cbnz	r0, 800aeda <_Balloc+0x5a>
 800aeaa:	2101      	movs	r1, #1
 800aeac:	fa01 f506 	lsl.w	r5, r1, r6
 800aeb0:	1d6a      	adds	r2, r5, #5
 800aeb2:	0092      	lsls	r2, r2, #2
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 fabe 	bl	800b436 <_calloc_r>
 800aeba:	b160      	cbz	r0, 800aed6 <_Balloc+0x56>
 800aebc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aec0:	e00e      	b.n	800aee0 <_Balloc+0x60>
 800aec2:	2221      	movs	r2, #33	; 0x21
 800aec4:	2104      	movs	r1, #4
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fab5 	bl	800b436 <_calloc_r>
 800aecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aece:	60e8      	str	r0, [r5, #12]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e4      	bne.n	800aea0 <_Balloc+0x20>
 800aed6:	2000      	movs	r0, #0
 800aed8:	bd70      	pop	{r4, r5, r6, pc}
 800aeda:	6802      	ldr	r2, [r0, #0]
 800aedc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aee0:	2300      	movs	r3, #0
 800aee2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee6:	e7f7      	b.n	800aed8 <_Balloc+0x58>

0800aee8 <_Bfree>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aeec:	4606      	mov	r6, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	b93c      	cbnz	r4, 800af02 <_Bfree+0x1a>
 800aef2:	2010      	movs	r0, #16
 800aef4:	f7ff ffae 	bl	800ae54 <malloc>
 800aef8:	6270      	str	r0, [r6, #36]	; 0x24
 800aefa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aefe:	6004      	str	r4, [r0, #0]
 800af00:	60c4      	str	r4, [r0, #12]
 800af02:	b13d      	cbz	r5, 800af14 <_Bfree+0x2c>
 800af04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af06:	686a      	ldr	r2, [r5, #4]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af0e:	6029      	str	r1, [r5, #0]
 800af10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800af14:	bd70      	pop	{r4, r5, r6, pc}

0800af16 <__multadd>:
 800af16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1a:	461f      	mov	r7, r3
 800af1c:	4606      	mov	r6, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	2300      	movs	r3, #0
 800af22:	690d      	ldr	r5, [r1, #16]
 800af24:	f101 0c14 	add.w	ip, r1, #20
 800af28:	f8dc 0000 	ldr.w	r0, [ip]
 800af2c:	3301      	adds	r3, #1
 800af2e:	b281      	uxth	r1, r0
 800af30:	fb02 7101 	mla	r1, r2, r1, r7
 800af34:	0c00      	lsrs	r0, r0, #16
 800af36:	0c0f      	lsrs	r7, r1, #16
 800af38:	fb02 7000 	mla	r0, r2, r0, r7
 800af3c:	b289      	uxth	r1, r1
 800af3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800af42:	429d      	cmp	r5, r3
 800af44:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800af48:	f84c 1b04 	str.w	r1, [ip], #4
 800af4c:	dcec      	bgt.n	800af28 <__multadd+0x12>
 800af4e:	b1d7      	cbz	r7, 800af86 <__multadd+0x70>
 800af50:	68a3      	ldr	r3, [r4, #8]
 800af52:	42ab      	cmp	r3, r5
 800af54:	dc12      	bgt.n	800af7c <__multadd+0x66>
 800af56:	6861      	ldr	r1, [r4, #4]
 800af58:	4630      	mov	r0, r6
 800af5a:	3101      	adds	r1, #1
 800af5c:	f7ff ff90 	bl	800ae80 <_Balloc>
 800af60:	4680      	mov	r8, r0
 800af62:	6922      	ldr	r2, [r4, #16]
 800af64:	f104 010c 	add.w	r1, r4, #12
 800af68:	3202      	adds	r2, #2
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	300c      	adds	r0, #12
 800af6e:	f7fe fc9f 	bl	80098b0 <memcpy>
 800af72:	4621      	mov	r1, r4
 800af74:	4630      	mov	r0, r6
 800af76:	f7ff ffb7 	bl	800aee8 <_Bfree>
 800af7a:	4644      	mov	r4, r8
 800af7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af80:	3501      	adds	r5, #1
 800af82:	615f      	str	r7, [r3, #20]
 800af84:	6125      	str	r5, [r4, #16]
 800af86:	4620      	mov	r0, r4
 800af88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af8c <__hi0bits>:
 800af8c:	0c02      	lsrs	r2, r0, #16
 800af8e:	0412      	lsls	r2, r2, #16
 800af90:	4603      	mov	r3, r0
 800af92:	b9b2      	cbnz	r2, 800afc2 <__hi0bits+0x36>
 800af94:	0403      	lsls	r3, r0, #16
 800af96:	2010      	movs	r0, #16
 800af98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af9c:	bf04      	itt	eq
 800af9e:	021b      	lsleq	r3, r3, #8
 800afa0:	3008      	addeq	r0, #8
 800afa2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800afa6:	bf04      	itt	eq
 800afa8:	011b      	lsleq	r3, r3, #4
 800afaa:	3004      	addeq	r0, #4
 800afac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800afb0:	bf04      	itt	eq
 800afb2:	009b      	lsleq	r3, r3, #2
 800afb4:	3002      	addeq	r0, #2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	db06      	blt.n	800afc8 <__hi0bits+0x3c>
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	d503      	bpl.n	800afc6 <__hi0bits+0x3a>
 800afbe:	3001      	adds	r0, #1
 800afc0:	4770      	bx	lr
 800afc2:	2000      	movs	r0, #0
 800afc4:	e7e8      	b.n	800af98 <__hi0bits+0xc>
 800afc6:	2020      	movs	r0, #32
 800afc8:	4770      	bx	lr

0800afca <__lo0bits>:
 800afca:	6803      	ldr	r3, [r0, #0]
 800afcc:	4601      	mov	r1, r0
 800afce:	f013 0207 	ands.w	r2, r3, #7
 800afd2:	d00b      	beq.n	800afec <__lo0bits+0x22>
 800afd4:	07da      	lsls	r2, r3, #31
 800afd6:	d423      	bmi.n	800b020 <__lo0bits+0x56>
 800afd8:	0798      	lsls	r0, r3, #30
 800afda:	bf49      	itett	mi
 800afdc:	085b      	lsrmi	r3, r3, #1
 800afde:	089b      	lsrpl	r3, r3, #2
 800afe0:	2001      	movmi	r0, #1
 800afe2:	600b      	strmi	r3, [r1, #0]
 800afe4:	bf5c      	itt	pl
 800afe6:	600b      	strpl	r3, [r1, #0]
 800afe8:	2002      	movpl	r0, #2
 800afea:	4770      	bx	lr
 800afec:	b298      	uxth	r0, r3
 800afee:	b9a8      	cbnz	r0, 800b01c <__lo0bits+0x52>
 800aff0:	2010      	movs	r0, #16
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aff8:	bf04      	itt	eq
 800affa:	0a1b      	lsreq	r3, r3, #8
 800affc:	3008      	addeq	r0, #8
 800affe:	071a      	lsls	r2, r3, #28
 800b000:	bf04      	itt	eq
 800b002:	091b      	lsreq	r3, r3, #4
 800b004:	3004      	addeq	r0, #4
 800b006:	079a      	lsls	r2, r3, #30
 800b008:	bf04      	itt	eq
 800b00a:	089b      	lsreq	r3, r3, #2
 800b00c:	3002      	addeq	r0, #2
 800b00e:	07da      	lsls	r2, r3, #31
 800b010:	d402      	bmi.n	800b018 <__lo0bits+0x4e>
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	d006      	beq.n	800b024 <__lo0bits+0x5a>
 800b016:	3001      	adds	r0, #1
 800b018:	600b      	str	r3, [r1, #0]
 800b01a:	4770      	bx	lr
 800b01c:	4610      	mov	r0, r2
 800b01e:	e7e9      	b.n	800aff4 <__lo0bits+0x2a>
 800b020:	2000      	movs	r0, #0
 800b022:	4770      	bx	lr
 800b024:	2020      	movs	r0, #32
 800b026:	4770      	bx	lr

0800b028 <__i2b>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	460c      	mov	r4, r1
 800b02c:	2101      	movs	r1, #1
 800b02e:	f7ff ff27 	bl	800ae80 <_Balloc>
 800b032:	2201      	movs	r2, #1
 800b034:	6144      	str	r4, [r0, #20]
 800b036:	6102      	str	r2, [r0, #16]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__multiply>:
 800b03a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03e:	4614      	mov	r4, r2
 800b040:	690a      	ldr	r2, [r1, #16]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	4688      	mov	r8, r1
 800b046:	429a      	cmp	r2, r3
 800b048:	bfbe      	ittt	lt
 800b04a:	460b      	movlt	r3, r1
 800b04c:	46a0      	movlt	r8, r4
 800b04e:	461c      	movlt	r4, r3
 800b050:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b054:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b058:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b05c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b060:	eb07 0609 	add.w	r6, r7, r9
 800b064:	42b3      	cmp	r3, r6
 800b066:	bfb8      	it	lt
 800b068:	3101      	addlt	r1, #1
 800b06a:	f7ff ff09 	bl	800ae80 <_Balloc>
 800b06e:	f100 0514 	add.w	r5, r0, #20
 800b072:	462b      	mov	r3, r5
 800b074:	2200      	movs	r2, #0
 800b076:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b07a:	4573      	cmp	r3, lr
 800b07c:	d316      	bcc.n	800b0ac <__multiply+0x72>
 800b07e:	f104 0214 	add.w	r2, r4, #20
 800b082:	f108 0114 	add.w	r1, r8, #20
 800b086:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b08a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	9b00      	ldr	r3, [sp, #0]
 800b092:	9201      	str	r2, [sp, #4]
 800b094:	4293      	cmp	r3, r2
 800b096:	d80c      	bhi.n	800b0b2 <__multiply+0x78>
 800b098:	2e00      	cmp	r6, #0
 800b09a:	dd03      	ble.n	800b0a4 <__multiply+0x6a>
 800b09c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d05d      	beq.n	800b160 <__multiply+0x126>
 800b0a4:	6106      	str	r6, [r0, #16]
 800b0a6:	b003      	add	sp, #12
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	f843 2b04 	str.w	r2, [r3], #4
 800b0b0:	e7e3      	b.n	800b07a <__multiply+0x40>
 800b0b2:	f8b2 b000 	ldrh.w	fp, [r2]
 800b0b6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ba:	d023      	beq.n	800b104 <__multiply+0xca>
 800b0bc:	4689      	mov	r9, r1
 800b0be:	46ac      	mov	ip, r5
 800b0c0:	f04f 0800 	mov.w	r8, #0
 800b0c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b0c8:	f8dc a000 	ldr.w	sl, [ip]
 800b0cc:	b2a3      	uxth	r3, r4
 800b0ce:	fa1f fa8a 	uxth.w	sl, sl
 800b0d2:	fb0b a303 	mla	r3, fp, r3, sl
 800b0d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b0da:	f8dc 4000 	ldr.w	r4, [ip]
 800b0de:	4443      	add	r3, r8
 800b0e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b0e4:	fb0b 840a 	mla	r4, fp, sl, r8
 800b0e8:	46e2      	mov	sl, ip
 800b0ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b0f4:	454f      	cmp	r7, r9
 800b0f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b0fa:	f84a 3b04 	str.w	r3, [sl], #4
 800b0fe:	d82b      	bhi.n	800b158 <__multiply+0x11e>
 800b100:	f8cc 8004 	str.w	r8, [ip, #4]
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	3204      	adds	r2, #4
 800b108:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b10c:	f1ba 0f00 	cmp.w	sl, #0
 800b110:	d020      	beq.n	800b154 <__multiply+0x11a>
 800b112:	4689      	mov	r9, r1
 800b114:	46a8      	mov	r8, r5
 800b116:	f04f 0b00 	mov.w	fp, #0
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b120:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b124:	b29b      	uxth	r3, r3
 800b126:	fb0a 440c 	mla	r4, sl, ip, r4
 800b12a:	46c4      	mov	ip, r8
 800b12c:	445c      	add	r4, fp
 800b12e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b132:	f84c 3b04 	str.w	r3, [ip], #4
 800b136:	f859 3b04 	ldr.w	r3, [r9], #4
 800b13a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b13e:	0c1b      	lsrs	r3, r3, #16
 800b140:	fb0a b303 	mla	r3, sl, r3, fp
 800b144:	454f      	cmp	r7, r9
 800b146:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b14a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b14e:	d805      	bhi.n	800b15c <__multiply+0x122>
 800b150:	f8c8 3004 	str.w	r3, [r8, #4]
 800b154:	3504      	adds	r5, #4
 800b156:	e79b      	b.n	800b090 <__multiply+0x56>
 800b158:	46d4      	mov	ip, sl
 800b15a:	e7b3      	b.n	800b0c4 <__multiply+0x8a>
 800b15c:	46e0      	mov	r8, ip
 800b15e:	e7dd      	b.n	800b11c <__multiply+0xe2>
 800b160:	3e01      	subs	r6, #1
 800b162:	e799      	b.n	800b098 <__multiply+0x5e>

0800b164 <__pow5mult>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4615      	mov	r5, r2
 800b16a:	f012 0203 	ands.w	r2, r2, #3
 800b16e:	4606      	mov	r6, r0
 800b170:	460f      	mov	r7, r1
 800b172:	d007      	beq.n	800b184 <__pow5mult+0x20>
 800b174:	4c21      	ldr	r4, [pc, #132]	; (800b1fc <__pow5mult+0x98>)
 800b176:	3a01      	subs	r2, #1
 800b178:	2300      	movs	r3, #0
 800b17a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b17e:	f7ff feca 	bl	800af16 <__multadd>
 800b182:	4607      	mov	r7, r0
 800b184:	10ad      	asrs	r5, r5, #2
 800b186:	d035      	beq.n	800b1f4 <__pow5mult+0x90>
 800b188:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b18a:	b93c      	cbnz	r4, 800b19c <__pow5mult+0x38>
 800b18c:	2010      	movs	r0, #16
 800b18e:	f7ff fe61 	bl	800ae54 <malloc>
 800b192:	6270      	str	r0, [r6, #36]	; 0x24
 800b194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b198:	6004      	str	r4, [r0, #0]
 800b19a:	60c4      	str	r4, [r0, #12]
 800b19c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1a4:	b94c      	cbnz	r4, 800b1ba <__pow5mult+0x56>
 800b1a6:	f240 2171 	movw	r1, #625	; 0x271
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7ff ff3c 	bl	800b028 <__i2b>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1b8:	6003      	str	r3, [r0, #0]
 800b1ba:	f04f 0800 	mov.w	r8, #0
 800b1be:	07eb      	lsls	r3, r5, #31
 800b1c0:	d50a      	bpl.n	800b1d8 <__pow5mult+0x74>
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ff37 	bl	800b03a <__multiply>
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	4639      	mov	r1, r7
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7ff fe89 	bl	800aee8 <_Bfree>
 800b1d6:	464f      	mov	r7, r9
 800b1d8:	106d      	asrs	r5, r5, #1
 800b1da:	d00b      	beq.n	800b1f4 <__pow5mult+0x90>
 800b1dc:	6820      	ldr	r0, [r4, #0]
 800b1de:	b938      	cbnz	r0, 800b1f0 <__pow5mult+0x8c>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	f7ff ff28 	bl	800b03a <__multiply>
 800b1ea:	6020      	str	r0, [r4, #0]
 800b1ec:	f8c0 8000 	str.w	r8, [r0]
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	e7e4      	b.n	800b1be <__pow5mult+0x5a>
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800bfc0 	.word	0x0800bfc0

0800b200 <__lshift>:
 800b200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b204:	460c      	mov	r4, r1
 800b206:	4607      	mov	r7, r0
 800b208:	4616      	mov	r6, r2
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b210:	eb0a 0903 	add.w	r9, sl, r3
 800b214:	6849      	ldr	r1, [r1, #4]
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	f109 0501 	add.w	r5, r9, #1
 800b21c:	42ab      	cmp	r3, r5
 800b21e:	db32      	blt.n	800b286 <__lshift+0x86>
 800b220:	4638      	mov	r0, r7
 800b222:	f7ff fe2d 	bl	800ae80 <_Balloc>
 800b226:	2300      	movs	r3, #0
 800b228:	4680      	mov	r8, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	f100 0114 	add.w	r1, r0, #20
 800b230:	4553      	cmp	r3, sl
 800b232:	db2b      	blt.n	800b28c <__lshift+0x8c>
 800b234:	6920      	ldr	r0, [r4, #16]
 800b236:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b23a:	f104 0314 	add.w	r3, r4, #20
 800b23e:	f016 021f 	ands.w	r2, r6, #31
 800b242:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b246:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b24a:	d025      	beq.n	800b298 <__lshift+0x98>
 800b24c:	2000      	movs	r0, #0
 800b24e:	f1c2 0e20 	rsb	lr, r2, #32
 800b252:	468a      	mov	sl, r1
 800b254:	681e      	ldr	r6, [r3, #0]
 800b256:	4096      	lsls	r6, r2
 800b258:	4330      	orrs	r0, r6
 800b25a:	f84a 0b04 	str.w	r0, [sl], #4
 800b25e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b262:	459c      	cmp	ip, r3
 800b264:	fa20 f00e 	lsr.w	r0, r0, lr
 800b268:	d814      	bhi.n	800b294 <__lshift+0x94>
 800b26a:	6048      	str	r0, [r1, #4]
 800b26c:	b108      	cbz	r0, 800b272 <__lshift+0x72>
 800b26e:	f109 0502 	add.w	r5, r9, #2
 800b272:	3d01      	subs	r5, #1
 800b274:	4638      	mov	r0, r7
 800b276:	f8c8 5010 	str.w	r5, [r8, #16]
 800b27a:	4621      	mov	r1, r4
 800b27c:	f7ff fe34 	bl	800aee8 <_Bfree>
 800b280:	4640      	mov	r0, r8
 800b282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b286:	3101      	adds	r1, #1
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	e7c7      	b.n	800b21c <__lshift+0x1c>
 800b28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b290:	3301      	adds	r3, #1
 800b292:	e7cd      	b.n	800b230 <__lshift+0x30>
 800b294:	4651      	mov	r1, sl
 800b296:	e7dc      	b.n	800b252 <__lshift+0x52>
 800b298:	3904      	subs	r1, #4
 800b29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29e:	459c      	cmp	ip, r3
 800b2a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2a4:	d8f9      	bhi.n	800b29a <__lshift+0x9a>
 800b2a6:	e7e4      	b.n	800b272 <__lshift+0x72>

0800b2a8 <__mcmp>:
 800b2a8:	6903      	ldr	r3, [r0, #16]
 800b2aa:	690a      	ldr	r2, [r1, #16]
 800b2ac:	b530      	push	{r4, r5, lr}
 800b2ae:	1a9b      	subs	r3, r3, r2
 800b2b0:	d10c      	bne.n	800b2cc <__mcmp+0x24>
 800b2b2:	0092      	lsls	r2, r2, #2
 800b2b4:	3014      	adds	r0, #20
 800b2b6:	3114      	adds	r1, #20
 800b2b8:	1884      	adds	r4, r0, r2
 800b2ba:	4411      	add	r1, r2
 800b2bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2c4:	4295      	cmp	r5, r2
 800b2c6:	d003      	beq.n	800b2d0 <__mcmp+0x28>
 800b2c8:	d305      	bcc.n	800b2d6 <__mcmp+0x2e>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	bd30      	pop	{r4, r5, pc}
 800b2d0:	42a0      	cmp	r0, r4
 800b2d2:	d3f3      	bcc.n	800b2bc <__mcmp+0x14>
 800b2d4:	e7fa      	b.n	800b2cc <__mcmp+0x24>
 800b2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2da:	e7f7      	b.n	800b2cc <__mcmp+0x24>

0800b2dc <__mdiff>:
 800b2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	f7ff ffdd 	bl	800b2a8 <__mcmp>
 800b2ee:	1e06      	subs	r6, r0, #0
 800b2f0:	d108      	bne.n	800b304 <__mdiff+0x28>
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	f7ff fdc3 	bl	800ae80 <_Balloc>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b304:	bfa4      	itt	ge
 800b306:	4623      	movge	r3, r4
 800b308:	462c      	movge	r4, r5
 800b30a:	4638      	mov	r0, r7
 800b30c:	6861      	ldr	r1, [r4, #4]
 800b30e:	bfa6      	itte	ge
 800b310:	461d      	movge	r5, r3
 800b312:	2600      	movge	r6, #0
 800b314:	2601      	movlt	r6, #1
 800b316:	f7ff fdb3 	bl	800ae80 <_Balloc>
 800b31a:	f04f 0e00 	mov.w	lr, #0
 800b31e:	60c6      	str	r6, [r0, #12]
 800b320:	692b      	ldr	r3, [r5, #16]
 800b322:	6926      	ldr	r6, [r4, #16]
 800b324:	f104 0214 	add.w	r2, r4, #20
 800b328:	f105 0914 	add.w	r9, r5, #20
 800b32c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b330:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b334:	f100 0114 	add.w	r1, r0, #20
 800b338:	f852 ab04 	ldr.w	sl, [r2], #4
 800b33c:	f859 5b04 	ldr.w	r5, [r9], #4
 800b340:	fa1f f38a 	uxth.w	r3, sl
 800b344:	4473      	add	r3, lr
 800b346:	b2ac      	uxth	r4, r5
 800b348:	1b1b      	subs	r3, r3, r4
 800b34a:	0c2c      	lsrs	r4, r5, #16
 800b34c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b350:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b354:	b29b      	uxth	r3, r3
 800b356:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b35a:	45c8      	cmp	r8, r9
 800b35c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b360:	4694      	mov	ip, r2
 800b362:	f841 4b04 	str.w	r4, [r1], #4
 800b366:	d8e7      	bhi.n	800b338 <__mdiff+0x5c>
 800b368:	45bc      	cmp	ip, r7
 800b36a:	d304      	bcc.n	800b376 <__mdiff+0x9a>
 800b36c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b370:	b183      	cbz	r3, 800b394 <__mdiff+0xb8>
 800b372:	6106      	str	r6, [r0, #16]
 800b374:	e7c4      	b.n	800b300 <__mdiff+0x24>
 800b376:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b37a:	b2a2      	uxth	r2, r4
 800b37c:	4472      	add	r2, lr
 800b37e:	1413      	asrs	r3, r2, #16
 800b380:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b384:	b292      	uxth	r2, r2
 800b386:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b38a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b38e:	f841 2b04 	str.w	r2, [r1], #4
 800b392:	e7e9      	b.n	800b368 <__mdiff+0x8c>
 800b394:	3e01      	subs	r6, #1
 800b396:	e7e9      	b.n	800b36c <__mdiff+0x90>

0800b398 <__d2b>:
 800b398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b39c:	461c      	mov	r4, r3
 800b39e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4690      	mov	r8, r2
 800b3a6:	f7ff fd6b 	bl	800ae80 <_Balloc>
 800b3aa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b3ae:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	bb34      	cbnz	r4, 800b404 <__d2b+0x6c>
 800b3b6:	9201      	str	r2, [sp, #4]
 800b3b8:	f1b8 0200 	subs.w	r2, r8, #0
 800b3bc:	d027      	beq.n	800b40e <__d2b+0x76>
 800b3be:	a802      	add	r0, sp, #8
 800b3c0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b3c4:	f7ff fe01 	bl	800afca <__lo0bits>
 800b3c8:	9900      	ldr	r1, [sp, #0]
 800b3ca:	b1f0      	cbz	r0, 800b40a <__d2b+0x72>
 800b3cc:	9a01      	ldr	r2, [sp, #4]
 800b3ce:	f1c0 0320 	rsb	r3, r0, #32
 800b3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	40c2      	lsrs	r2, r0
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	9201      	str	r2, [sp, #4]
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	bf14      	ite	ne
 800b3e4:	2102      	movne	r1, #2
 800b3e6:	2101      	moveq	r1, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	6139      	str	r1, [r7, #16]
 800b3ec:	b1c4      	cbz	r4, 800b420 <__d2b+0x88>
 800b3ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b3f2:	4404      	add	r4, r0
 800b3f4:	6034      	str	r4, [r6, #0]
 800b3f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3fa:	6028      	str	r0, [r5, #0]
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	b002      	add	sp, #8
 800b400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b404:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b408:	e7d5      	b.n	800b3b6 <__d2b+0x1e>
 800b40a:	6179      	str	r1, [r7, #20]
 800b40c:	e7e7      	b.n	800b3de <__d2b+0x46>
 800b40e:	a801      	add	r0, sp, #4
 800b410:	f7ff fddb 	bl	800afca <__lo0bits>
 800b414:	2101      	movs	r1, #1
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	6139      	str	r1, [r7, #16]
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	3020      	adds	r0, #32
 800b41e:	e7e5      	b.n	800b3ec <__d2b+0x54>
 800b420:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b424:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b428:	6030      	str	r0, [r6, #0]
 800b42a:	6918      	ldr	r0, [r3, #16]
 800b42c:	f7ff fdae 	bl	800af8c <__hi0bits>
 800b430:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b434:	e7e1      	b.n	800b3fa <__d2b+0x62>

0800b436 <_calloc_r>:
 800b436:	b538      	push	{r3, r4, r5, lr}
 800b438:	fb02 f401 	mul.w	r4, r2, r1
 800b43c:	4621      	mov	r1, r4
 800b43e:	f000 f855 	bl	800b4ec <_malloc_r>
 800b442:	4605      	mov	r5, r0
 800b444:	b118      	cbz	r0, 800b44e <_calloc_r+0x18>
 800b446:	4622      	mov	r2, r4
 800b448:	2100      	movs	r1, #0
 800b44a:	f7fe fa3c 	bl	80098c6 <memset>
 800b44e:	4628      	mov	r0, r5
 800b450:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b454 <_free_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4605      	mov	r5, r0
 800b458:	2900      	cmp	r1, #0
 800b45a:	d043      	beq.n	800b4e4 <_free_r+0x90>
 800b45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b460:	1f0c      	subs	r4, r1, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	bfb8      	it	lt
 800b466:	18e4      	addlt	r4, r4, r3
 800b468:	f000 fa27 	bl	800b8ba <__malloc_lock>
 800b46c:	4a1e      	ldr	r2, [pc, #120]	; (800b4e8 <_free_r+0x94>)
 800b46e:	6813      	ldr	r3, [r2, #0]
 800b470:	4610      	mov	r0, r2
 800b472:	b933      	cbnz	r3, 800b482 <_free_r+0x2e>
 800b474:	6063      	str	r3, [r4, #4]
 800b476:	6014      	str	r4, [r2, #0]
 800b478:	4628      	mov	r0, r5
 800b47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47e:	f000 ba1d 	b.w	800b8bc <__malloc_unlock>
 800b482:	42a3      	cmp	r3, r4
 800b484:	d90b      	bls.n	800b49e <_free_r+0x4a>
 800b486:	6821      	ldr	r1, [r4, #0]
 800b488:	1862      	adds	r2, r4, r1
 800b48a:	4293      	cmp	r3, r2
 800b48c:	bf01      	itttt	eq
 800b48e:	681a      	ldreq	r2, [r3, #0]
 800b490:	685b      	ldreq	r3, [r3, #4]
 800b492:	1852      	addeq	r2, r2, r1
 800b494:	6022      	streq	r2, [r4, #0]
 800b496:	6063      	str	r3, [r4, #4]
 800b498:	6004      	str	r4, [r0, #0]
 800b49a:	e7ed      	b.n	800b478 <_free_r+0x24>
 800b49c:	4613      	mov	r3, r2
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	b10a      	cbz	r2, 800b4a6 <_free_r+0x52>
 800b4a2:	42a2      	cmp	r2, r4
 800b4a4:	d9fa      	bls.n	800b49c <_free_r+0x48>
 800b4a6:	6819      	ldr	r1, [r3, #0]
 800b4a8:	1858      	adds	r0, r3, r1
 800b4aa:	42a0      	cmp	r0, r4
 800b4ac:	d10b      	bne.n	800b4c6 <_free_r+0x72>
 800b4ae:	6820      	ldr	r0, [r4, #0]
 800b4b0:	4401      	add	r1, r0
 800b4b2:	1858      	adds	r0, r3, r1
 800b4b4:	4282      	cmp	r2, r0
 800b4b6:	6019      	str	r1, [r3, #0]
 800b4b8:	d1de      	bne.n	800b478 <_free_r+0x24>
 800b4ba:	6810      	ldr	r0, [r2, #0]
 800b4bc:	6852      	ldr	r2, [r2, #4]
 800b4be:	4401      	add	r1, r0
 800b4c0:	6019      	str	r1, [r3, #0]
 800b4c2:	605a      	str	r2, [r3, #4]
 800b4c4:	e7d8      	b.n	800b478 <_free_r+0x24>
 800b4c6:	d902      	bls.n	800b4ce <_free_r+0x7a>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	602b      	str	r3, [r5, #0]
 800b4cc:	e7d4      	b.n	800b478 <_free_r+0x24>
 800b4ce:	6820      	ldr	r0, [r4, #0]
 800b4d0:	1821      	adds	r1, r4, r0
 800b4d2:	428a      	cmp	r2, r1
 800b4d4:	bf01      	itttt	eq
 800b4d6:	6811      	ldreq	r1, [r2, #0]
 800b4d8:	6852      	ldreq	r2, [r2, #4]
 800b4da:	1809      	addeq	r1, r1, r0
 800b4dc:	6021      	streq	r1, [r4, #0]
 800b4de:	6062      	str	r2, [r4, #4]
 800b4e0:	605c      	str	r4, [r3, #4]
 800b4e2:	e7c9      	b.n	800b478 <_free_r+0x24>
 800b4e4:	bd38      	pop	{r3, r4, r5, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200011e8 	.word	0x200011e8

0800b4ec <_malloc_r>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	1ccd      	adds	r5, r1, #3
 800b4f0:	f025 0503 	bic.w	r5, r5, #3
 800b4f4:	3508      	adds	r5, #8
 800b4f6:	2d0c      	cmp	r5, #12
 800b4f8:	bf38      	it	cc
 800b4fa:	250c      	movcc	r5, #12
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	4606      	mov	r6, r0
 800b500:	db01      	blt.n	800b506 <_malloc_r+0x1a>
 800b502:	42a9      	cmp	r1, r5
 800b504:	d903      	bls.n	800b50e <_malloc_r+0x22>
 800b506:	230c      	movs	r3, #12
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	2000      	movs	r0, #0
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
 800b50e:	f000 f9d4 	bl	800b8ba <__malloc_lock>
 800b512:	4a21      	ldr	r2, [pc, #132]	; (800b598 <_malloc_r+0xac>)
 800b514:	6814      	ldr	r4, [r2, #0]
 800b516:	4621      	mov	r1, r4
 800b518:	b991      	cbnz	r1, 800b540 <_malloc_r+0x54>
 800b51a:	4c20      	ldr	r4, [pc, #128]	; (800b59c <_malloc_r+0xb0>)
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	b91b      	cbnz	r3, 800b528 <_malloc_r+0x3c>
 800b520:	4630      	mov	r0, r6
 800b522:	f000 f98f 	bl	800b844 <_sbrk_r>
 800b526:	6020      	str	r0, [r4, #0]
 800b528:	4629      	mov	r1, r5
 800b52a:	4630      	mov	r0, r6
 800b52c:	f000 f98a 	bl	800b844 <_sbrk_r>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d124      	bne.n	800b57e <_malloc_r+0x92>
 800b534:	230c      	movs	r3, #12
 800b536:	4630      	mov	r0, r6
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	f000 f9bf 	bl	800b8bc <__malloc_unlock>
 800b53e:	e7e4      	b.n	800b50a <_malloc_r+0x1e>
 800b540:	680b      	ldr	r3, [r1, #0]
 800b542:	1b5b      	subs	r3, r3, r5
 800b544:	d418      	bmi.n	800b578 <_malloc_r+0x8c>
 800b546:	2b0b      	cmp	r3, #11
 800b548:	d90f      	bls.n	800b56a <_malloc_r+0x7e>
 800b54a:	600b      	str	r3, [r1, #0]
 800b54c:	18cc      	adds	r4, r1, r3
 800b54e:	50cd      	str	r5, [r1, r3]
 800b550:	4630      	mov	r0, r6
 800b552:	f000 f9b3 	bl	800b8bc <__malloc_unlock>
 800b556:	f104 000b 	add.w	r0, r4, #11
 800b55a:	1d23      	adds	r3, r4, #4
 800b55c:	f020 0007 	bic.w	r0, r0, #7
 800b560:	1ac3      	subs	r3, r0, r3
 800b562:	d0d3      	beq.n	800b50c <_malloc_r+0x20>
 800b564:	425a      	negs	r2, r3
 800b566:	50e2      	str	r2, [r4, r3]
 800b568:	e7d0      	b.n	800b50c <_malloc_r+0x20>
 800b56a:	684b      	ldr	r3, [r1, #4]
 800b56c:	428c      	cmp	r4, r1
 800b56e:	bf16      	itet	ne
 800b570:	6063      	strne	r3, [r4, #4]
 800b572:	6013      	streq	r3, [r2, #0]
 800b574:	460c      	movne	r4, r1
 800b576:	e7eb      	b.n	800b550 <_malloc_r+0x64>
 800b578:	460c      	mov	r4, r1
 800b57a:	6849      	ldr	r1, [r1, #4]
 800b57c:	e7cc      	b.n	800b518 <_malloc_r+0x2c>
 800b57e:	1cc4      	adds	r4, r0, #3
 800b580:	f024 0403 	bic.w	r4, r4, #3
 800b584:	42a0      	cmp	r0, r4
 800b586:	d005      	beq.n	800b594 <_malloc_r+0xa8>
 800b588:	1a21      	subs	r1, r4, r0
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 f95a 	bl	800b844 <_sbrk_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d0cf      	beq.n	800b534 <_malloc_r+0x48>
 800b594:	6025      	str	r5, [r4, #0]
 800b596:	e7db      	b.n	800b550 <_malloc_r+0x64>
 800b598:	200011e8 	.word	0x200011e8
 800b59c:	200011ec 	.word	0x200011ec

0800b5a0 <__ssputs_r>:
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	688e      	ldr	r6, [r1, #8]
 800b5a6:	4682      	mov	sl, r0
 800b5a8:	429e      	cmp	r6, r3
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	4690      	mov	r8, r2
 800b5ae:	4699      	mov	r9, r3
 800b5b0:	d837      	bhi.n	800b622 <__ssputs_r+0x82>
 800b5b2:	898a      	ldrh	r2, [r1, #12]
 800b5b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5b8:	d031      	beq.n	800b61e <__ssputs_r+0x7e>
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	6825      	ldr	r5, [r4, #0]
 800b5be:	6909      	ldr	r1, [r1, #16]
 800b5c0:	1a6f      	subs	r7, r5, r1
 800b5c2:	6965      	ldr	r5, [r4, #20]
 800b5c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b5cc:	f109 0301 	add.w	r3, r9, #1
 800b5d0:	443b      	add	r3, r7
 800b5d2:	429d      	cmp	r5, r3
 800b5d4:	bf38      	it	cc
 800b5d6:	461d      	movcc	r5, r3
 800b5d8:	0553      	lsls	r3, r2, #21
 800b5da:	d530      	bpl.n	800b63e <__ssputs_r+0x9e>
 800b5dc:	4629      	mov	r1, r5
 800b5de:	f7ff ff85 	bl	800b4ec <_malloc_r>
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	b950      	cbnz	r0, 800b5fc <__ssputs_r+0x5c>
 800b5e6:	230c      	movs	r3, #12
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ec:	f8ca 3000 	str.w	r3, [sl]
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f6:	81a3      	strh	r3, [r4, #12]
 800b5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fc:	463a      	mov	r2, r7
 800b5fe:	6921      	ldr	r1, [r4, #16]
 800b600:	f7fe f956 	bl	80098b0 <memcpy>
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	6126      	str	r6, [r4, #16]
 800b612:	443e      	add	r6, r7
 800b614:	6026      	str	r6, [r4, #0]
 800b616:	464e      	mov	r6, r9
 800b618:	6165      	str	r5, [r4, #20]
 800b61a:	1bed      	subs	r5, r5, r7
 800b61c:	60a5      	str	r5, [r4, #8]
 800b61e:	454e      	cmp	r6, r9
 800b620:	d900      	bls.n	800b624 <__ssputs_r+0x84>
 800b622:	464e      	mov	r6, r9
 800b624:	4632      	mov	r2, r6
 800b626:	4641      	mov	r1, r8
 800b628:	6820      	ldr	r0, [r4, #0]
 800b62a:	f000 f92d 	bl	800b888 <memmove>
 800b62e:	68a3      	ldr	r3, [r4, #8]
 800b630:	2000      	movs	r0, #0
 800b632:	1b9b      	subs	r3, r3, r6
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	441e      	add	r6, r3
 800b63a:	6026      	str	r6, [r4, #0]
 800b63c:	e7dc      	b.n	800b5f8 <__ssputs_r+0x58>
 800b63e:	462a      	mov	r2, r5
 800b640:	f000 f93d 	bl	800b8be <_realloc_r>
 800b644:	4606      	mov	r6, r0
 800b646:	2800      	cmp	r0, #0
 800b648:	d1e2      	bne.n	800b610 <__ssputs_r+0x70>
 800b64a:	6921      	ldr	r1, [r4, #16]
 800b64c:	4650      	mov	r0, sl
 800b64e:	f7ff ff01 	bl	800b454 <_free_r>
 800b652:	e7c8      	b.n	800b5e6 <__ssputs_r+0x46>

0800b654 <_svfiprintf_r>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	461d      	mov	r5, r3
 800b65a:	898b      	ldrh	r3, [r1, #12]
 800b65c:	b09d      	sub	sp, #116	; 0x74
 800b65e:	061f      	lsls	r7, r3, #24
 800b660:	4680      	mov	r8, r0
 800b662:	460c      	mov	r4, r1
 800b664:	4616      	mov	r6, r2
 800b666:	d50f      	bpl.n	800b688 <_svfiprintf_r+0x34>
 800b668:	690b      	ldr	r3, [r1, #16]
 800b66a:	b96b      	cbnz	r3, 800b688 <_svfiprintf_r+0x34>
 800b66c:	2140      	movs	r1, #64	; 0x40
 800b66e:	f7ff ff3d 	bl	800b4ec <_malloc_r>
 800b672:	6020      	str	r0, [r4, #0]
 800b674:	6120      	str	r0, [r4, #16]
 800b676:	b928      	cbnz	r0, 800b684 <_svfiprintf_r+0x30>
 800b678:	230c      	movs	r3, #12
 800b67a:	f8c8 3000 	str.w	r3, [r8]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	e0c8      	b.n	800b816 <_svfiprintf_r+0x1c2>
 800b684:	2340      	movs	r3, #64	; 0x40
 800b686:	6163      	str	r3, [r4, #20]
 800b688:	2300      	movs	r3, #0
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	2320      	movs	r3, #32
 800b68e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b692:	2330      	movs	r3, #48	; 0x30
 800b694:	f04f 0b01 	mov.w	fp, #1
 800b698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b69c:	9503      	str	r5, [sp, #12]
 800b69e:	4637      	mov	r7, r6
 800b6a0:	463d      	mov	r5, r7
 800b6a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6a6:	b10b      	cbz	r3, 800b6ac <_svfiprintf_r+0x58>
 800b6a8:	2b25      	cmp	r3, #37	; 0x25
 800b6aa:	d13e      	bne.n	800b72a <_svfiprintf_r+0xd6>
 800b6ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800b6b0:	d00b      	beq.n	800b6ca <_svfiprintf_r+0x76>
 800b6b2:	4653      	mov	r3, sl
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	f7ff ff71 	bl	800b5a0 <__ssputs_r>
 800b6be:	3001      	adds	r0, #1
 800b6c0:	f000 80a4 	beq.w	800b80c <_svfiprintf_r+0x1b8>
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	4453      	add	r3, sl
 800b6c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ca:	783b      	ldrb	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 809d 	beq.w	800b80c <_svfiprintf_r+0x1b8>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	9307      	str	r3, [sp, #28]
 800b6e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b6e6:	462f      	mov	r7, r5
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b6ee:	4850      	ldr	r0, [pc, #320]	; (800b830 <_svfiprintf_r+0x1dc>)
 800b6f0:	f7ff fbb8 	bl	800ae64 <memchr>
 800b6f4:	9b04      	ldr	r3, [sp, #16]
 800b6f6:	b9d0      	cbnz	r0, 800b72e <_svfiprintf_r+0xda>
 800b6f8:	06d9      	lsls	r1, r3, #27
 800b6fa:	bf44      	itt	mi
 800b6fc:	2220      	movmi	r2, #32
 800b6fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b702:	071a      	lsls	r2, r3, #28
 800b704:	bf44      	itt	mi
 800b706:	222b      	movmi	r2, #43	; 0x2b
 800b708:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b70c:	782a      	ldrb	r2, [r5, #0]
 800b70e:	2a2a      	cmp	r2, #42	; 0x2a
 800b710:	d015      	beq.n	800b73e <_svfiprintf_r+0xea>
 800b712:	462f      	mov	r7, r5
 800b714:	2000      	movs	r0, #0
 800b716:	250a      	movs	r5, #10
 800b718:	9a07      	ldr	r2, [sp, #28]
 800b71a:	4639      	mov	r1, r7
 800b71c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b720:	3b30      	subs	r3, #48	; 0x30
 800b722:	2b09      	cmp	r3, #9
 800b724:	d94d      	bls.n	800b7c2 <_svfiprintf_r+0x16e>
 800b726:	b1b8      	cbz	r0, 800b758 <_svfiprintf_r+0x104>
 800b728:	e00f      	b.n	800b74a <_svfiprintf_r+0xf6>
 800b72a:	462f      	mov	r7, r5
 800b72c:	e7b8      	b.n	800b6a0 <_svfiprintf_r+0x4c>
 800b72e:	4a40      	ldr	r2, [pc, #256]	; (800b830 <_svfiprintf_r+0x1dc>)
 800b730:	463d      	mov	r5, r7
 800b732:	1a80      	subs	r0, r0, r2
 800b734:	fa0b f000 	lsl.w	r0, fp, r0
 800b738:	4318      	orrs	r0, r3
 800b73a:	9004      	str	r0, [sp, #16]
 800b73c:	e7d3      	b.n	800b6e6 <_svfiprintf_r+0x92>
 800b73e:	9a03      	ldr	r2, [sp, #12]
 800b740:	1d11      	adds	r1, r2, #4
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	9103      	str	r1, [sp, #12]
 800b746:	2a00      	cmp	r2, #0
 800b748:	db01      	blt.n	800b74e <_svfiprintf_r+0xfa>
 800b74a:	9207      	str	r2, [sp, #28]
 800b74c:	e004      	b.n	800b758 <_svfiprintf_r+0x104>
 800b74e:	4252      	negs	r2, r2
 800b750:	f043 0302 	orr.w	r3, r3, #2
 800b754:	9207      	str	r2, [sp, #28]
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	783b      	ldrb	r3, [r7, #0]
 800b75a:	2b2e      	cmp	r3, #46	; 0x2e
 800b75c:	d10c      	bne.n	800b778 <_svfiprintf_r+0x124>
 800b75e:	787b      	ldrb	r3, [r7, #1]
 800b760:	2b2a      	cmp	r3, #42	; 0x2a
 800b762:	d133      	bne.n	800b7cc <_svfiprintf_r+0x178>
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	3702      	adds	r7, #2
 800b768:	1d1a      	adds	r2, r3, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	9203      	str	r2, [sp, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfb8      	it	lt
 800b772:	f04f 33ff 	movlt.w	r3, #4294967295
 800b776:	9305      	str	r3, [sp, #20]
 800b778:	4d2e      	ldr	r5, [pc, #184]	; (800b834 <_svfiprintf_r+0x1e0>)
 800b77a:	2203      	movs	r2, #3
 800b77c:	7839      	ldrb	r1, [r7, #0]
 800b77e:	4628      	mov	r0, r5
 800b780:	f7ff fb70 	bl	800ae64 <memchr>
 800b784:	b138      	cbz	r0, 800b796 <_svfiprintf_r+0x142>
 800b786:	2340      	movs	r3, #64	; 0x40
 800b788:	1b40      	subs	r0, r0, r5
 800b78a:	fa03 f000 	lsl.w	r0, r3, r0
 800b78e:	9b04      	ldr	r3, [sp, #16]
 800b790:	3701      	adds	r7, #1
 800b792:	4303      	orrs	r3, r0
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	7839      	ldrb	r1, [r7, #0]
 800b798:	2206      	movs	r2, #6
 800b79a:	4827      	ldr	r0, [pc, #156]	; (800b838 <_svfiprintf_r+0x1e4>)
 800b79c:	1c7e      	adds	r6, r7, #1
 800b79e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7a2:	f7ff fb5f 	bl	800ae64 <memchr>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d038      	beq.n	800b81c <_svfiprintf_r+0x1c8>
 800b7aa:	4b24      	ldr	r3, [pc, #144]	; (800b83c <_svfiprintf_r+0x1e8>)
 800b7ac:	bb13      	cbnz	r3, 800b7f4 <_svfiprintf_r+0x1a0>
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	3307      	adds	r3, #7
 800b7b2:	f023 0307 	bic.w	r3, r3, #7
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	9303      	str	r3, [sp, #12]
 800b7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7bc:	444b      	add	r3, r9
 800b7be:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c0:	e76d      	b.n	800b69e <_svfiprintf_r+0x4a>
 800b7c2:	fb05 3202 	mla	r2, r5, r2, r3
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	e7a6      	b.n	800b71a <_svfiprintf_r+0xc6>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	250a      	movs	r5, #10
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	3701      	adds	r7, #1
 800b7d4:	9305      	str	r3, [sp, #20]
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7dc:	3a30      	subs	r2, #48	; 0x30
 800b7de:	2a09      	cmp	r2, #9
 800b7e0:	d903      	bls.n	800b7ea <_svfiprintf_r+0x196>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0c8      	beq.n	800b778 <_svfiprintf_r+0x124>
 800b7e6:	9105      	str	r1, [sp, #20]
 800b7e8:	e7c6      	b.n	800b778 <_svfiprintf_r+0x124>
 800b7ea:	fb05 2101 	mla	r1, r5, r1, r2
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	e7f0      	b.n	800b7d6 <_svfiprintf_r+0x182>
 800b7f4:	ab03      	add	r3, sp, #12
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4b11      	ldr	r3, [pc, #68]	; (800b840 <_svfiprintf_r+0x1ec>)
 800b7fc:	a904      	add	r1, sp, #16
 800b7fe:	4640      	mov	r0, r8
 800b800:	f7fe f8fa 	bl	80099f8 <_printf_float>
 800b804:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b808:	4681      	mov	r9, r0
 800b80a:	d1d6      	bne.n	800b7ba <_svfiprintf_r+0x166>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	065b      	lsls	r3, r3, #25
 800b810:	f53f af35 	bmi.w	800b67e <_svfiprintf_r+0x2a>
 800b814:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b816:	b01d      	add	sp, #116	; 0x74
 800b818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81c:	ab03      	add	r3, sp, #12
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	4622      	mov	r2, r4
 800b822:	4b07      	ldr	r3, [pc, #28]	; (800b840 <_svfiprintf_r+0x1ec>)
 800b824:	a904      	add	r1, sp, #16
 800b826:	4640      	mov	r0, r8
 800b828:	f7fe fb92 	bl	8009f50 <_printf_i>
 800b82c:	e7ea      	b.n	800b804 <_svfiprintf_r+0x1b0>
 800b82e:	bf00      	nop
 800b830:	0800bfcc 	.word	0x0800bfcc
 800b834:	0800bfd2 	.word	0x0800bfd2
 800b838:	0800bfd6 	.word	0x0800bfd6
 800b83c:	080099f9 	.word	0x080099f9
 800b840:	0800b5a1 	.word	0x0800b5a1

0800b844 <_sbrk_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	2300      	movs	r3, #0
 800b848:	4c05      	ldr	r4, [pc, #20]	; (800b860 <_sbrk_r+0x1c>)
 800b84a:	4605      	mov	r5, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	f7f6 fbb6 	bl	8001fc0 <_sbrk>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_sbrk_r+0x1a>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_sbrk_r+0x1a>
 800b85c:	602b      	str	r3, [r5, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	20001c64 	.word	0x20001c64

0800b864 <__ascii_mbtowc>:
 800b864:	b082      	sub	sp, #8
 800b866:	b901      	cbnz	r1, 800b86a <__ascii_mbtowc+0x6>
 800b868:	a901      	add	r1, sp, #4
 800b86a:	b142      	cbz	r2, 800b87e <__ascii_mbtowc+0x1a>
 800b86c:	b14b      	cbz	r3, 800b882 <__ascii_mbtowc+0x1e>
 800b86e:	7813      	ldrb	r3, [r2, #0]
 800b870:	600b      	str	r3, [r1, #0]
 800b872:	7812      	ldrb	r2, [r2, #0]
 800b874:	1c10      	adds	r0, r2, #0
 800b876:	bf18      	it	ne
 800b878:	2001      	movne	r0, #1
 800b87a:	b002      	add	sp, #8
 800b87c:	4770      	bx	lr
 800b87e:	4610      	mov	r0, r2
 800b880:	e7fb      	b.n	800b87a <__ascii_mbtowc+0x16>
 800b882:	f06f 0001 	mvn.w	r0, #1
 800b886:	e7f8      	b.n	800b87a <__ascii_mbtowc+0x16>

0800b888 <memmove>:
 800b888:	4288      	cmp	r0, r1
 800b88a:	b510      	push	{r4, lr}
 800b88c:	eb01 0302 	add.w	r3, r1, r2
 800b890:	d807      	bhi.n	800b8a2 <memmove+0x1a>
 800b892:	1e42      	subs	r2, r0, #1
 800b894:	4299      	cmp	r1, r3
 800b896:	d00a      	beq.n	800b8ae <memmove+0x26>
 800b898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b89c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b8a0:	e7f8      	b.n	800b894 <memmove+0xc>
 800b8a2:	4283      	cmp	r3, r0
 800b8a4:	d9f5      	bls.n	800b892 <memmove+0xa>
 800b8a6:	1881      	adds	r1, r0, r2
 800b8a8:	1ad2      	subs	r2, r2, r3
 800b8aa:	42d3      	cmn	r3, r2
 800b8ac:	d100      	bne.n	800b8b0 <memmove+0x28>
 800b8ae:	bd10      	pop	{r4, pc}
 800b8b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b8b8:	e7f7      	b.n	800b8aa <memmove+0x22>

0800b8ba <__malloc_lock>:
 800b8ba:	4770      	bx	lr

0800b8bc <__malloc_unlock>:
 800b8bc:	4770      	bx	lr

0800b8be <_realloc_r>:
 800b8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	4614      	mov	r4, r2
 800b8c4:	460e      	mov	r6, r1
 800b8c6:	b921      	cbnz	r1, 800b8d2 <_realloc_r+0x14>
 800b8c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	f7ff be0d 	b.w	800b4ec <_malloc_r>
 800b8d2:	b922      	cbnz	r2, 800b8de <_realloc_r+0x20>
 800b8d4:	f7ff fdbe 	bl	800b454 <_free_r>
 800b8d8:	4625      	mov	r5, r4
 800b8da:	4628      	mov	r0, r5
 800b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8de:	f000 f821 	bl	800b924 <_malloc_usable_size_r>
 800b8e2:	42a0      	cmp	r0, r4
 800b8e4:	d20f      	bcs.n	800b906 <_realloc_r+0x48>
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f7ff fdff 	bl	800b4ec <_malloc_r>
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d0f2      	beq.n	800b8da <_realloc_r+0x1c>
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	f7fd ffda 	bl	80098b0 <memcpy>
 800b8fc:	4631      	mov	r1, r6
 800b8fe:	4638      	mov	r0, r7
 800b900:	f7ff fda8 	bl	800b454 <_free_r>
 800b904:	e7e9      	b.n	800b8da <_realloc_r+0x1c>
 800b906:	4635      	mov	r5, r6
 800b908:	e7e7      	b.n	800b8da <_realloc_r+0x1c>

0800b90a <__ascii_wctomb>:
 800b90a:	b149      	cbz	r1, 800b920 <__ascii_wctomb+0x16>
 800b90c:	2aff      	cmp	r2, #255	; 0xff
 800b90e:	bf8b      	itete	hi
 800b910:	238a      	movhi	r3, #138	; 0x8a
 800b912:	700a      	strbls	r2, [r1, #0]
 800b914:	6003      	strhi	r3, [r0, #0]
 800b916:	2001      	movls	r0, #1
 800b918:	bf88      	it	hi
 800b91a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b91e:	4770      	bx	lr
 800b920:	4608      	mov	r0, r1
 800b922:	4770      	bx	lr

0800b924 <_malloc_usable_size_r>:
 800b924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b928:	1f18      	subs	r0, r3, #4
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	bfbc      	itt	lt
 800b92e:	580b      	ldrlt	r3, [r1, r0]
 800b930:	18c0      	addlt	r0, r0, r3
 800b932:	4770      	bx	lr

0800b934 <_init>:
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	bf00      	nop
 800b938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93a:	bc08      	pop	{r3}
 800b93c:	469e      	mov	lr, r3
 800b93e:	4770      	bx	lr

0800b940 <_fini>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	bf00      	nop
 800b944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b946:	bc08      	pop	{r3}
 800b948:	469e      	mov	lr, r3
 800b94a:	4770      	bx	lr
